
BadiApp_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a90  08005110  08005110  00005110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800cba0  0800cba0  0000cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca4  0800cca4  000101e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cca4  0800cca4  000101e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cca4  0800cca4  000101e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca4  0800cca4  0000cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca8  0800cca8  0000cca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ccac  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a4  200001e4  0800ce90  000101e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  0800ce90  00011688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bbe  00000000  00000000  0001020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c2  00000000  00000000  00035dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001494c  00000000  00000000  0003ae8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0004f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ab8  00000000  00000000  00050bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca7b  00000000  00000000  00052688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d47  00000000  00000000  0006f103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000940c4  00000000  00000000  00091e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00125f0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d14  00000000  00000000  00125f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	; (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	200001e4 	.word	0x200001e4
 800512c:	00000000 	.word	0x00000000
 8005130:	0800cb88 	.word	0x0800cb88

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	200001e8 	.word	0x200001e8
 800514c:	0800cb88 	.word	0x0800cb88

08005150 <__aeabi_drsub>:
 8005150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005154:	e002      	b.n	800515c <__adddf3>
 8005156:	bf00      	nop

08005158 <__aeabi_dsub>:
 8005158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800515c <__adddf3>:
 800515c:	b530      	push	{r4, r5, lr}
 800515e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005166:	ea94 0f05 	teq	r4, r5
 800516a:	bf08      	it	eq
 800516c:	ea90 0f02 	teqeq	r0, r2
 8005170:	bf1f      	itttt	ne
 8005172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800517a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800517e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005182:	f000 80e2 	beq.w	800534a <__adddf3+0x1ee>
 8005186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800518a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800518e:	bfb8      	it	lt
 8005190:	426d      	neglt	r5, r5
 8005192:	dd0c      	ble.n	80051ae <__adddf3+0x52>
 8005194:	442c      	add	r4, r5
 8005196:	ea80 0202 	eor.w	r2, r0, r2
 800519a:	ea81 0303 	eor.w	r3, r1, r3
 800519e:	ea82 0000 	eor.w	r0, r2, r0
 80051a2:	ea83 0101 	eor.w	r1, r3, r1
 80051a6:	ea80 0202 	eor.w	r2, r0, r2
 80051aa:	ea81 0303 	eor.w	r3, r1, r3
 80051ae:	2d36      	cmp	r5, #54	; 0x36
 80051b0:	bf88      	it	hi
 80051b2:	bd30      	pophi	{r4, r5, pc}
 80051b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80051b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80051c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051c4:	d002      	beq.n	80051cc <__adddf3+0x70>
 80051c6:	4240      	negs	r0, r0
 80051c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80051d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051d8:	d002      	beq.n	80051e0 <__adddf3+0x84>
 80051da:	4252      	negs	r2, r2
 80051dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80051e0:	ea94 0f05 	teq	r4, r5
 80051e4:	f000 80a7 	beq.w	8005336 <__adddf3+0x1da>
 80051e8:	f1a4 0401 	sub.w	r4, r4, #1
 80051ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80051f0:	db0d      	blt.n	800520e <__adddf3+0xb2>
 80051f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80051f6:	fa22 f205 	lsr.w	r2, r2, r5
 80051fa:	1880      	adds	r0, r0, r2
 80051fc:	f141 0100 	adc.w	r1, r1, #0
 8005200:	fa03 f20e 	lsl.w	r2, r3, lr
 8005204:	1880      	adds	r0, r0, r2
 8005206:	fa43 f305 	asr.w	r3, r3, r5
 800520a:	4159      	adcs	r1, r3
 800520c:	e00e      	b.n	800522c <__adddf3+0xd0>
 800520e:	f1a5 0520 	sub.w	r5, r5, #32
 8005212:	f10e 0e20 	add.w	lr, lr, #32
 8005216:	2a01      	cmp	r2, #1
 8005218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800521c:	bf28      	it	cs
 800521e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005222:	fa43 f305 	asr.w	r3, r3, r5
 8005226:	18c0      	adds	r0, r0, r3
 8005228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800522c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005230:	d507      	bpl.n	8005242 <__adddf3+0xe6>
 8005232:	f04f 0e00 	mov.w	lr, #0
 8005236:	f1dc 0c00 	rsbs	ip, ip, #0
 800523a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800523e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005246:	d31b      	bcc.n	8005280 <__adddf3+0x124>
 8005248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800524c:	d30c      	bcc.n	8005268 <__adddf3+0x10c>
 800524e:	0849      	lsrs	r1, r1, #1
 8005250:	ea5f 0030 	movs.w	r0, r0, rrx
 8005254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005258:	f104 0401 	add.w	r4, r4, #1
 800525c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005264:	f080 809a 	bcs.w	800539c <__adddf3+0x240>
 8005268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800526c:	bf08      	it	eq
 800526e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005272:	f150 0000 	adcs.w	r0, r0, #0
 8005276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800527a:	ea41 0105 	orr.w	r1, r1, r5
 800527e:	bd30      	pop	{r4, r5, pc}
 8005280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005284:	4140      	adcs	r0, r0
 8005286:	eb41 0101 	adc.w	r1, r1, r1
 800528a:	3c01      	subs	r4, #1
 800528c:	bf28      	it	cs
 800528e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005292:	d2e9      	bcs.n	8005268 <__adddf3+0x10c>
 8005294:	f091 0f00 	teq	r1, #0
 8005298:	bf04      	itt	eq
 800529a:	4601      	moveq	r1, r0
 800529c:	2000      	moveq	r0, #0
 800529e:	fab1 f381 	clz	r3, r1
 80052a2:	bf08      	it	eq
 80052a4:	3320      	addeq	r3, #32
 80052a6:	f1a3 030b 	sub.w	r3, r3, #11
 80052aa:	f1b3 0220 	subs.w	r2, r3, #32
 80052ae:	da0c      	bge.n	80052ca <__adddf3+0x16e>
 80052b0:	320c      	adds	r2, #12
 80052b2:	dd08      	ble.n	80052c6 <__adddf3+0x16a>
 80052b4:	f102 0c14 	add.w	ip, r2, #20
 80052b8:	f1c2 020c 	rsb	r2, r2, #12
 80052bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80052c0:	fa21 f102 	lsr.w	r1, r1, r2
 80052c4:	e00c      	b.n	80052e0 <__adddf3+0x184>
 80052c6:	f102 0214 	add.w	r2, r2, #20
 80052ca:	bfd8      	it	le
 80052cc:	f1c2 0c20 	rsble	ip, r2, #32
 80052d0:	fa01 f102 	lsl.w	r1, r1, r2
 80052d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052d8:	bfdc      	itt	le
 80052da:	ea41 010c 	orrle.w	r1, r1, ip
 80052de:	4090      	lslle	r0, r2
 80052e0:	1ae4      	subs	r4, r4, r3
 80052e2:	bfa2      	ittt	ge
 80052e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80052e8:	4329      	orrge	r1, r5
 80052ea:	bd30      	popge	{r4, r5, pc}
 80052ec:	ea6f 0404 	mvn.w	r4, r4
 80052f0:	3c1f      	subs	r4, #31
 80052f2:	da1c      	bge.n	800532e <__adddf3+0x1d2>
 80052f4:	340c      	adds	r4, #12
 80052f6:	dc0e      	bgt.n	8005316 <__adddf3+0x1ba>
 80052f8:	f104 0414 	add.w	r4, r4, #20
 80052fc:	f1c4 0220 	rsb	r2, r4, #32
 8005300:	fa20 f004 	lsr.w	r0, r0, r4
 8005304:	fa01 f302 	lsl.w	r3, r1, r2
 8005308:	ea40 0003 	orr.w	r0, r0, r3
 800530c:	fa21 f304 	lsr.w	r3, r1, r4
 8005310:	ea45 0103 	orr.w	r1, r5, r3
 8005314:	bd30      	pop	{r4, r5, pc}
 8005316:	f1c4 040c 	rsb	r4, r4, #12
 800531a:	f1c4 0220 	rsb	r2, r4, #32
 800531e:	fa20 f002 	lsr.w	r0, r0, r2
 8005322:	fa01 f304 	lsl.w	r3, r1, r4
 8005326:	ea40 0003 	orr.w	r0, r0, r3
 800532a:	4629      	mov	r1, r5
 800532c:	bd30      	pop	{r4, r5, pc}
 800532e:	fa21 f004 	lsr.w	r0, r1, r4
 8005332:	4629      	mov	r1, r5
 8005334:	bd30      	pop	{r4, r5, pc}
 8005336:	f094 0f00 	teq	r4, #0
 800533a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800533e:	bf06      	itte	eq
 8005340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005344:	3401      	addeq	r4, #1
 8005346:	3d01      	subne	r5, #1
 8005348:	e74e      	b.n	80051e8 <__adddf3+0x8c>
 800534a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800534e:	bf18      	it	ne
 8005350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005354:	d029      	beq.n	80053aa <__adddf3+0x24e>
 8005356:	ea94 0f05 	teq	r4, r5
 800535a:	bf08      	it	eq
 800535c:	ea90 0f02 	teqeq	r0, r2
 8005360:	d005      	beq.n	800536e <__adddf3+0x212>
 8005362:	ea54 0c00 	orrs.w	ip, r4, r0
 8005366:	bf04      	itt	eq
 8005368:	4619      	moveq	r1, r3
 800536a:	4610      	moveq	r0, r2
 800536c:	bd30      	pop	{r4, r5, pc}
 800536e:	ea91 0f03 	teq	r1, r3
 8005372:	bf1e      	ittt	ne
 8005374:	2100      	movne	r1, #0
 8005376:	2000      	movne	r0, #0
 8005378:	bd30      	popne	{r4, r5, pc}
 800537a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800537e:	d105      	bne.n	800538c <__adddf3+0x230>
 8005380:	0040      	lsls	r0, r0, #1
 8005382:	4149      	adcs	r1, r1
 8005384:	bf28      	it	cs
 8005386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800538a:	bd30      	pop	{r4, r5, pc}
 800538c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005390:	bf3c      	itt	cc
 8005392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005396:	bd30      	popcc	{r4, r5, pc}
 8005398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800539c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80053a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	bd30      	pop	{r4, r5, pc}
 80053aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053ae:	bf1a      	itte	ne
 80053b0:	4619      	movne	r1, r3
 80053b2:	4610      	movne	r0, r2
 80053b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053b8:	bf1c      	itt	ne
 80053ba:	460b      	movne	r3, r1
 80053bc:	4602      	movne	r2, r0
 80053be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053c2:	bf06      	itte	eq
 80053c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053c8:	ea91 0f03 	teqeq	r1, r3
 80053cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80053d0:	bd30      	pop	{r4, r5, pc}
 80053d2:	bf00      	nop

080053d4 <__aeabi_ui2d>:
 80053d4:	f090 0f00 	teq	r0, #0
 80053d8:	bf04      	itt	eq
 80053da:	2100      	moveq	r1, #0
 80053dc:	4770      	bxeq	lr
 80053de:	b530      	push	{r4, r5, lr}
 80053e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80053e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80053e8:	f04f 0500 	mov.w	r5, #0
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	e750      	b.n	8005294 <__adddf3+0x138>
 80053f2:	bf00      	nop

080053f4 <__aeabi_i2d>:
 80053f4:	f090 0f00 	teq	r0, #0
 80053f8:	bf04      	itt	eq
 80053fa:	2100      	moveq	r1, #0
 80053fc:	4770      	bxeq	lr
 80053fe:	b530      	push	{r4, r5, lr}
 8005400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800540c:	bf48      	it	mi
 800540e:	4240      	negmi	r0, r0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e73e      	b.n	8005294 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_f2d>:
 8005418:	0042      	lsls	r2, r0, #1
 800541a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800541e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005426:	bf1f      	itttt	ne
 8005428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800542c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005434:	4770      	bxne	lr
 8005436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800543a:	bf08      	it	eq
 800543c:	4770      	bxeq	lr
 800543e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005442:	bf04      	itt	eq
 8005444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005448:	4770      	bxeq	lr
 800544a:	b530      	push	{r4, r5, lr}
 800544c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005458:	e71c      	b.n	8005294 <__adddf3+0x138>
 800545a:	bf00      	nop

0800545c <__aeabi_ul2d>:
 800545c:	ea50 0201 	orrs.w	r2, r0, r1
 8005460:	bf08      	it	eq
 8005462:	4770      	bxeq	lr
 8005464:	b530      	push	{r4, r5, lr}
 8005466:	f04f 0500 	mov.w	r5, #0
 800546a:	e00a      	b.n	8005482 <__aeabi_l2d+0x16>

0800546c <__aeabi_l2d>:
 800546c:	ea50 0201 	orrs.w	r2, r0, r1
 8005470:	bf08      	it	eq
 8005472:	4770      	bxeq	lr
 8005474:	b530      	push	{r4, r5, lr}
 8005476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800547a:	d502      	bpl.n	8005482 <__aeabi_l2d+0x16>
 800547c:	4240      	negs	r0, r0
 800547e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800548a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800548e:	f43f aed8 	beq.w	8005242 <__adddf3+0xe6>
 8005492:	f04f 0203 	mov.w	r2, #3
 8005496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800549a:	bf18      	it	ne
 800549c:	3203      	addne	r2, #3
 800549e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054a2:	bf18      	it	ne
 80054a4:	3203      	addne	r2, #3
 80054a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054aa:	f1c2 0320 	rsb	r3, r2, #32
 80054ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80054b2:	fa20 f002 	lsr.w	r0, r0, r2
 80054b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80054ba:	ea40 000e 	orr.w	r0, r0, lr
 80054be:	fa21 f102 	lsr.w	r1, r1, r2
 80054c2:	4414      	add	r4, r2
 80054c4:	e6bd      	b.n	8005242 <__adddf3+0xe6>
 80054c6:	bf00      	nop

080054c8 <__aeabi_dmul>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80054d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054d6:	bf1d      	ittte	ne
 80054d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80054dc:	ea94 0f0c 	teqne	r4, ip
 80054e0:	ea95 0f0c 	teqne	r5, ip
 80054e4:	f000 f8de 	bleq	80056a4 <__aeabi_dmul+0x1dc>
 80054e8:	442c      	add	r4, r5
 80054ea:	ea81 0603 	eor.w	r6, r1, r3
 80054ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80054f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80054f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80054fa:	bf18      	it	ne
 80054fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005508:	d038      	beq.n	800557c <__aeabi_dmul+0xb4>
 800550a:	fba0 ce02 	umull	ip, lr, r0, r2
 800550e:	f04f 0500 	mov.w	r5, #0
 8005512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800551a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800551e:	f04f 0600 	mov.w	r6, #0
 8005522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005526:	f09c 0f00 	teq	ip, #0
 800552a:	bf18      	it	ne
 800552c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800553c:	d204      	bcs.n	8005548 <__aeabi_dmul+0x80>
 800553e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005542:	416d      	adcs	r5, r5
 8005544:	eb46 0606 	adc.w	r6, r6, r6
 8005548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800554c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800555c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005560:	bf88      	it	hi
 8005562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005566:	d81e      	bhi.n	80055a6 <__aeabi_dmul+0xde>
 8005568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800556c:	bf08      	it	eq
 800556e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005572:	f150 0000 	adcs.w	r0, r0, #0
 8005576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005580:	ea46 0101 	orr.w	r1, r6, r1
 8005584:	ea40 0002 	orr.w	r0, r0, r2
 8005588:	ea81 0103 	eor.w	r1, r1, r3
 800558c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005590:	bfc2      	ittt	gt
 8005592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800559a:	bd70      	popgt	{r4, r5, r6, pc}
 800559c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055a0:	f04f 0e00 	mov.w	lr, #0
 80055a4:	3c01      	subs	r4, #1
 80055a6:	f300 80ab 	bgt.w	8005700 <__aeabi_dmul+0x238>
 80055aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80055ae:	bfde      	ittt	le
 80055b0:	2000      	movle	r0, #0
 80055b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80055b6:	bd70      	pople	{r4, r5, r6, pc}
 80055b8:	f1c4 0400 	rsb	r4, r4, #0
 80055bc:	3c20      	subs	r4, #32
 80055be:	da35      	bge.n	800562c <__aeabi_dmul+0x164>
 80055c0:	340c      	adds	r4, #12
 80055c2:	dc1b      	bgt.n	80055fc <__aeabi_dmul+0x134>
 80055c4:	f104 0414 	add.w	r4, r4, #20
 80055c8:	f1c4 0520 	rsb	r5, r4, #32
 80055cc:	fa00 f305 	lsl.w	r3, r0, r5
 80055d0:	fa20 f004 	lsr.w	r0, r0, r4
 80055d4:	fa01 f205 	lsl.w	r2, r1, r5
 80055d8:	ea40 0002 	orr.w	r0, r0, r2
 80055dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80055e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80055e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80055e8:	fa21 f604 	lsr.w	r6, r1, r4
 80055ec:	eb42 0106 	adc.w	r1, r2, r6
 80055f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80055f4:	bf08      	it	eq
 80055f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f1c4 040c 	rsb	r4, r4, #12
 8005600:	f1c4 0520 	rsb	r5, r4, #32
 8005604:	fa00 f304 	lsl.w	r3, r0, r4
 8005608:	fa20 f005 	lsr.w	r0, r0, r5
 800560c:	fa01 f204 	lsl.w	r2, r1, r4
 8005610:	ea40 0002 	orr.w	r0, r0, r2
 8005614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800561c:	f141 0100 	adc.w	r1, r1, #0
 8005620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005624:	bf08      	it	eq
 8005626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	f1c4 0520 	rsb	r5, r4, #32
 8005630:	fa00 f205 	lsl.w	r2, r0, r5
 8005634:	ea4e 0e02 	orr.w	lr, lr, r2
 8005638:	fa20 f304 	lsr.w	r3, r0, r4
 800563c:	fa01 f205 	lsl.w	r2, r1, r5
 8005640:	ea43 0302 	orr.w	r3, r3, r2
 8005644:	fa21 f004 	lsr.w	r0, r1, r4
 8005648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800564c:	fa21 f204 	lsr.w	r2, r1, r4
 8005650:	ea20 0002 	bic.w	r0, r0, r2
 8005654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800565c:	bf08      	it	eq
 800565e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f094 0f00 	teq	r4, #0
 8005668:	d10f      	bne.n	800568a <__aeabi_dmul+0x1c2>
 800566a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800566e:	0040      	lsls	r0, r0, #1
 8005670:	eb41 0101 	adc.w	r1, r1, r1
 8005674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005678:	bf08      	it	eq
 800567a:	3c01      	subeq	r4, #1
 800567c:	d0f7      	beq.n	800566e <__aeabi_dmul+0x1a6>
 800567e:	ea41 0106 	orr.w	r1, r1, r6
 8005682:	f095 0f00 	teq	r5, #0
 8005686:	bf18      	it	ne
 8005688:	4770      	bxne	lr
 800568a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800568e:	0052      	lsls	r2, r2, #1
 8005690:	eb43 0303 	adc.w	r3, r3, r3
 8005694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005698:	bf08      	it	eq
 800569a:	3d01      	subeq	r5, #1
 800569c:	d0f7      	beq.n	800568e <__aeabi_dmul+0x1c6>
 800569e:	ea43 0306 	orr.w	r3, r3, r6
 80056a2:	4770      	bx	lr
 80056a4:	ea94 0f0c 	teq	r4, ip
 80056a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056ac:	bf18      	it	ne
 80056ae:	ea95 0f0c 	teqne	r5, ip
 80056b2:	d00c      	beq.n	80056ce <__aeabi_dmul+0x206>
 80056b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056b8:	bf18      	it	ne
 80056ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056be:	d1d1      	bne.n	8005664 <__aeabi_dmul+0x19c>
 80056c0:	ea81 0103 	eor.w	r1, r1, r3
 80056c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056c8:	f04f 0000 	mov.w	r0, #0
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056d2:	bf06      	itte	eq
 80056d4:	4610      	moveq	r0, r2
 80056d6:	4619      	moveq	r1, r3
 80056d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056dc:	d019      	beq.n	8005712 <__aeabi_dmul+0x24a>
 80056de:	ea94 0f0c 	teq	r4, ip
 80056e2:	d102      	bne.n	80056ea <__aeabi_dmul+0x222>
 80056e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80056e8:	d113      	bne.n	8005712 <__aeabi_dmul+0x24a>
 80056ea:	ea95 0f0c 	teq	r5, ip
 80056ee:	d105      	bne.n	80056fc <__aeabi_dmul+0x234>
 80056f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80056f4:	bf1c      	itt	ne
 80056f6:	4610      	movne	r0, r2
 80056f8:	4619      	movne	r1, r3
 80056fa:	d10a      	bne.n	8005712 <__aeabi_dmul+0x24a>
 80056fc:	ea81 0103 	eor.w	r1, r1, r3
 8005700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570c:	f04f 0000 	mov.w	r0, #0
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800571a:	bd70      	pop	{r4, r5, r6, pc}

0800571c <__aeabi_ddiv>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800572a:	bf1d      	ittte	ne
 800572c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005730:	ea94 0f0c 	teqne	r4, ip
 8005734:	ea95 0f0c 	teqne	r5, ip
 8005738:	f000 f8a7 	bleq	800588a <__aeabi_ddiv+0x16e>
 800573c:	eba4 0405 	sub.w	r4, r4, r5
 8005740:	ea81 0e03 	eor.w	lr, r1, r3
 8005744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800574c:	f000 8088 	beq.w	8005860 <__aeabi_ddiv+0x144>
 8005750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800575c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800576c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005774:	429d      	cmp	r5, r3
 8005776:	bf08      	it	eq
 8005778:	4296      	cmpeq	r6, r2
 800577a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800577e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005782:	d202      	bcs.n	800578a <__aeabi_ddiv+0x6e>
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	ea4f 0232 	mov.w	r2, r2, rrx
 800578a:	1ab6      	subs	r6, r6, r2
 800578c:	eb65 0503 	sbc.w	r5, r5, r3
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	ea4f 0232 	mov.w	r2, r2, rrx
 8005796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800579a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800579e:	ebb6 0e02 	subs.w	lr, r6, r2
 80057a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057a6:	bf22      	ittt	cs
 80057a8:	1ab6      	subcs	r6, r6, r2
 80057aa:	4675      	movcs	r5, lr
 80057ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80057ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057be:	bf22      	ittt	cs
 80057c0:	1ab6      	subcs	r6, r6, r2
 80057c2:	4675      	movcs	r5, lr
 80057c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80057d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057d6:	bf22      	ittt	cs
 80057d8:	1ab6      	subcs	r6, r6, r2
 80057da:	4675      	movcs	r5, lr
 80057dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80057e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80057ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ee:	bf22      	ittt	cs
 80057f0:	1ab6      	subcs	r6, r6, r2
 80057f2:	4675      	movcs	r5, lr
 80057f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80057f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80057fc:	d018      	beq.n	8005830 <__aeabi_ddiv+0x114>
 80057fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800580a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800580e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800581a:	d1c0      	bne.n	800579e <__aeabi_ddiv+0x82>
 800581c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005820:	d10b      	bne.n	800583a <__aeabi_ddiv+0x11e>
 8005822:	ea41 0100 	orr.w	r1, r1, r0
 8005826:	f04f 0000 	mov.w	r0, #0
 800582a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800582e:	e7b6      	b.n	800579e <__aeabi_ddiv+0x82>
 8005830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005834:	bf04      	itt	eq
 8005836:	4301      	orreq	r1, r0
 8005838:	2000      	moveq	r0, #0
 800583a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800583e:	bf88      	it	hi
 8005840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005844:	f63f aeaf 	bhi.w	80055a6 <__aeabi_dmul+0xde>
 8005848:	ebb5 0c03 	subs.w	ip, r5, r3
 800584c:	bf04      	itt	eq
 800584e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005856:	f150 0000 	adcs.w	r0, r0, #0
 800585a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800586c:	bfc2      	ittt	gt
 800586e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005876:	bd70      	popgt	{r4, r5, r6, pc}
 8005878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800587c:	f04f 0e00 	mov.w	lr, #0
 8005880:	3c01      	subs	r4, #1
 8005882:	e690      	b.n	80055a6 <__aeabi_dmul+0xde>
 8005884:	ea45 0e06 	orr.w	lr, r5, r6
 8005888:	e68d      	b.n	80055a6 <__aeabi_dmul+0xde>
 800588a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800588e:	ea94 0f0c 	teq	r4, ip
 8005892:	bf08      	it	eq
 8005894:	ea95 0f0c 	teqeq	r5, ip
 8005898:	f43f af3b 	beq.w	8005712 <__aeabi_dmul+0x24a>
 800589c:	ea94 0f0c 	teq	r4, ip
 80058a0:	d10a      	bne.n	80058b8 <__aeabi_ddiv+0x19c>
 80058a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058a6:	f47f af34 	bne.w	8005712 <__aeabi_dmul+0x24a>
 80058aa:	ea95 0f0c 	teq	r5, ip
 80058ae:	f47f af25 	bne.w	80056fc <__aeabi_dmul+0x234>
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	e72c      	b.n	8005712 <__aeabi_dmul+0x24a>
 80058b8:	ea95 0f0c 	teq	r5, ip
 80058bc:	d106      	bne.n	80058cc <__aeabi_ddiv+0x1b0>
 80058be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058c2:	f43f aefd 	beq.w	80056c0 <__aeabi_dmul+0x1f8>
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	e722      	b.n	8005712 <__aeabi_dmul+0x24a>
 80058cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058d0:	bf18      	it	ne
 80058d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058d6:	f47f aec5 	bne.w	8005664 <__aeabi_dmul+0x19c>
 80058da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80058de:	f47f af0d 	bne.w	80056fc <__aeabi_dmul+0x234>
 80058e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80058e6:	f47f aeeb 	bne.w	80056c0 <__aeabi_dmul+0x1f8>
 80058ea:	e712      	b.n	8005712 <__aeabi_dmul+0x24a>

080058ec <__gedf2>:
 80058ec:	f04f 3cff 	mov.w	ip, #4294967295
 80058f0:	e006      	b.n	8005900 <__cmpdf2+0x4>
 80058f2:	bf00      	nop

080058f4 <__ledf2>:
 80058f4:	f04f 0c01 	mov.w	ip, #1
 80058f8:	e002      	b.n	8005900 <__cmpdf2+0x4>
 80058fa:	bf00      	nop

080058fc <__cmpdf2>:
 80058fc:	f04f 0c01 	mov.w	ip, #1
 8005900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800590c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005910:	bf18      	it	ne
 8005912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005916:	d01b      	beq.n	8005950 <__cmpdf2+0x54>
 8005918:	b001      	add	sp, #4
 800591a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800591e:	bf0c      	ite	eq
 8005920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005924:	ea91 0f03 	teqne	r1, r3
 8005928:	bf02      	ittt	eq
 800592a:	ea90 0f02 	teqeq	r0, r2
 800592e:	2000      	moveq	r0, #0
 8005930:	4770      	bxeq	lr
 8005932:	f110 0f00 	cmn.w	r0, #0
 8005936:	ea91 0f03 	teq	r1, r3
 800593a:	bf58      	it	pl
 800593c:	4299      	cmppl	r1, r3
 800593e:	bf08      	it	eq
 8005940:	4290      	cmpeq	r0, r2
 8005942:	bf2c      	ite	cs
 8005944:	17d8      	asrcs	r0, r3, #31
 8005946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800594a:	f040 0001 	orr.w	r0, r0, #1
 800594e:	4770      	bx	lr
 8005950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005958:	d102      	bne.n	8005960 <__cmpdf2+0x64>
 800595a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800595e:	d107      	bne.n	8005970 <__cmpdf2+0x74>
 8005960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005968:	d1d6      	bne.n	8005918 <__cmpdf2+0x1c>
 800596a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800596e:	d0d3      	beq.n	8005918 <__cmpdf2+0x1c>
 8005970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <__aeabi_cdrcmple>:
 8005978:	4684      	mov	ip, r0
 800597a:	4610      	mov	r0, r2
 800597c:	4662      	mov	r2, ip
 800597e:	468c      	mov	ip, r1
 8005980:	4619      	mov	r1, r3
 8005982:	4663      	mov	r3, ip
 8005984:	e000      	b.n	8005988 <__aeabi_cdcmpeq>
 8005986:	bf00      	nop

08005988 <__aeabi_cdcmpeq>:
 8005988:	b501      	push	{r0, lr}
 800598a:	f7ff ffb7 	bl	80058fc <__cmpdf2>
 800598e:	2800      	cmp	r0, #0
 8005990:	bf48      	it	mi
 8005992:	f110 0f00 	cmnmi.w	r0, #0
 8005996:	bd01      	pop	{r0, pc}

08005998 <__aeabi_dcmpeq>:
 8005998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800599c:	f7ff fff4 	bl	8005988 <__aeabi_cdcmpeq>
 80059a0:	bf0c      	ite	eq
 80059a2:	2001      	moveq	r0, #1
 80059a4:	2000      	movne	r0, #0
 80059a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80059aa:	bf00      	nop

080059ac <__aeabi_dcmplt>:
 80059ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059b0:	f7ff ffea 	bl	8005988 <__aeabi_cdcmpeq>
 80059b4:	bf34      	ite	cc
 80059b6:	2001      	movcc	r0, #1
 80059b8:	2000      	movcs	r0, #0
 80059ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80059be:	bf00      	nop

080059c0 <__aeabi_dcmple>:
 80059c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059c4:	f7ff ffe0 	bl	8005988 <__aeabi_cdcmpeq>
 80059c8:	bf94      	ite	ls
 80059ca:	2001      	movls	r0, #1
 80059cc:	2000      	movhi	r0, #0
 80059ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80059d2:	bf00      	nop

080059d4 <__aeabi_dcmpge>:
 80059d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059d8:	f7ff ffce 	bl	8005978 <__aeabi_cdrcmple>
 80059dc:	bf94      	ite	ls
 80059de:	2001      	movls	r0, #1
 80059e0:	2000      	movhi	r0, #0
 80059e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80059e6:	bf00      	nop

080059e8 <__aeabi_dcmpgt>:
 80059e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059ec:	f7ff ffc4 	bl	8005978 <__aeabi_cdrcmple>
 80059f0:	bf34      	ite	cc
 80059f2:	2001      	movcc	r0, #1
 80059f4:	2000      	movcs	r0, #0
 80059f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80059fa:	bf00      	nop

080059fc <__aeabi_dcmpun>:
 80059fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a04:	d102      	bne.n	8005a0c <__aeabi_dcmpun+0x10>
 8005a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a0a:	d10a      	bne.n	8005a22 <__aeabi_dcmpun+0x26>
 8005a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a14:	d102      	bne.n	8005a1c <__aeabi_dcmpun+0x20>
 8005a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a1a:	d102      	bne.n	8005a22 <__aeabi_dcmpun+0x26>
 8005a1c:	f04f 0000 	mov.w	r0, #0
 8005a20:	4770      	bx	lr
 8005a22:	f04f 0001 	mov.w	r0, #1
 8005a26:	4770      	bx	lr

08005a28 <__aeabi_d2iz>:
 8005a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005a30:	d215      	bcs.n	8005a5e <__aeabi_d2iz+0x36>
 8005a32:	d511      	bpl.n	8005a58 <__aeabi_d2iz+0x30>
 8005a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a3c:	d912      	bls.n	8005a64 <__aeabi_d2iz+0x3c>
 8005a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8005a52:	bf18      	it	ne
 8005a54:	4240      	negne	r0, r0
 8005a56:	4770      	bx	lr
 8005a58:	f04f 0000 	mov.w	r0, #0
 8005a5c:	4770      	bx	lr
 8005a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a62:	d105      	bne.n	8005a70 <__aeabi_d2iz+0x48>
 8005a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005a68:	bf08      	it	eq
 8005a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005a6e:	4770      	bx	lr
 8005a70:	f04f 0000 	mov.w	r0, #0
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <__aeabi_d2f>:
 8005a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005a80:	bf24      	itt	cs
 8005a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005a8a:	d90d      	bls.n	8005aa8 <__aeabi_d2f+0x30>
 8005a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005aa0:	bf08      	it	eq
 8005aa2:	f020 0001 	biceq.w	r0, r0, #1
 8005aa6:	4770      	bx	lr
 8005aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005aac:	d121      	bne.n	8005af2 <__aeabi_d2f+0x7a>
 8005aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005ab2:	bfbc      	itt	lt
 8005ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005ab8:	4770      	bxlt	lr
 8005aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005ac2:	f1c2 0218 	rsb	r2, r2, #24
 8005ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8005aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8005ace:	fa20 f002 	lsr.w	r0, r0, r2
 8005ad2:	bf18      	it	ne
 8005ad4:	f040 0001 	orrne.w	r0, r0, #1
 8005ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005ae4:	ea40 000c 	orr.w	r0, r0, ip
 8005ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8005aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005af0:	e7cc      	b.n	8005a8c <__aeabi_d2f+0x14>
 8005af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005af6:	d107      	bne.n	8005b08 <__aeabi_d2f+0x90>
 8005af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005afc:	bf1e      	ittt	ne
 8005afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005b06:	4770      	bxne	lr
 8005b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <__aeabi_frsub>:
 8005b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005b1c:	e002      	b.n	8005b24 <__addsf3>
 8005b1e:	bf00      	nop

08005b20 <__aeabi_fsub>:
 8005b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08005b24 <__addsf3>:
 8005b24:	0042      	lsls	r2, r0, #1
 8005b26:	bf1f      	itttt	ne
 8005b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8005b2c:	ea92 0f03 	teqne	r2, r3
 8005b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8005b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b38:	d06a      	beq.n	8005c10 <__addsf3+0xec>
 8005b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8005b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8005b42:	bfc1      	itttt	gt
 8005b44:	18d2      	addgt	r2, r2, r3
 8005b46:	4041      	eorgt	r1, r0
 8005b48:	4048      	eorgt	r0, r1
 8005b4a:	4041      	eorgt	r1, r0
 8005b4c:	bfb8      	it	lt
 8005b4e:	425b      	neglt	r3, r3
 8005b50:	2b19      	cmp	r3, #25
 8005b52:	bf88      	it	hi
 8005b54:	4770      	bxhi	lr
 8005b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005b62:	bf18      	it	ne
 8005b64:	4240      	negne	r0, r0
 8005b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005b72:	bf18      	it	ne
 8005b74:	4249      	negne	r1, r1
 8005b76:	ea92 0f03 	teq	r2, r3
 8005b7a:	d03f      	beq.n	8005bfc <__addsf3+0xd8>
 8005b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8005b80:	fa41 fc03 	asr.w	ip, r1, r3
 8005b84:	eb10 000c 	adds.w	r0, r0, ip
 8005b88:	f1c3 0320 	rsb	r3, r3, #32
 8005b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8005b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005b94:	d502      	bpl.n	8005b9c <__addsf3+0x78>
 8005b96:	4249      	negs	r1, r1
 8005b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8005b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005ba0:	d313      	bcc.n	8005bca <__addsf3+0xa6>
 8005ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005ba6:	d306      	bcc.n	8005bb6 <__addsf3+0x92>
 8005ba8:	0840      	lsrs	r0, r0, #1
 8005baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8005bae:	f102 0201 	add.w	r2, r2, #1
 8005bb2:	2afe      	cmp	r2, #254	; 0xfe
 8005bb4:	d251      	bcs.n	8005c5a <__addsf3+0x136>
 8005bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8005bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005bbe:	bf08      	it	eq
 8005bc0:	f020 0001 	biceq.w	r0, r0, #1
 8005bc4:	ea40 0003 	orr.w	r0, r0, r3
 8005bc8:	4770      	bx	lr
 8005bca:	0049      	lsls	r1, r1, #1
 8005bcc:	eb40 0000 	adc.w	r0, r0, r0
 8005bd0:	3a01      	subs	r2, #1
 8005bd2:	bf28      	it	cs
 8005bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8005bd8:	d2ed      	bcs.n	8005bb6 <__addsf3+0x92>
 8005bda:	fab0 fc80 	clz	ip, r0
 8005bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8005be2:	ebb2 020c 	subs.w	r2, r2, ip
 8005be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8005bea:	bfaa      	itet	ge
 8005bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8005bf0:	4252      	neglt	r2, r2
 8005bf2:	4318      	orrge	r0, r3
 8005bf4:	bfbc      	itt	lt
 8005bf6:	40d0      	lsrlt	r0, r2
 8005bf8:	4318      	orrlt	r0, r3
 8005bfa:	4770      	bx	lr
 8005bfc:	f092 0f00 	teq	r2, #0
 8005c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8005c04:	bf06      	itte	eq
 8005c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005c0a:	3201      	addeq	r2, #1
 8005c0c:	3b01      	subne	r3, #1
 8005c0e:	e7b5      	b.n	8005b7c <__addsf3+0x58>
 8005c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c18:	bf18      	it	ne
 8005c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005c1e:	d021      	beq.n	8005c64 <__addsf3+0x140>
 8005c20:	ea92 0f03 	teq	r2, r3
 8005c24:	d004      	beq.n	8005c30 <__addsf3+0x10c>
 8005c26:	f092 0f00 	teq	r2, #0
 8005c2a:	bf08      	it	eq
 8005c2c:	4608      	moveq	r0, r1
 8005c2e:	4770      	bx	lr
 8005c30:	ea90 0f01 	teq	r0, r1
 8005c34:	bf1c      	itt	ne
 8005c36:	2000      	movne	r0, #0
 8005c38:	4770      	bxne	lr
 8005c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8005c3e:	d104      	bne.n	8005c4a <__addsf3+0x126>
 8005c40:	0040      	lsls	r0, r0, #1
 8005c42:	bf28      	it	cs
 8005c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005c48:	4770      	bx	lr
 8005c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8005c4e:	bf3c      	itt	cc
 8005c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005c54:	4770      	bxcc	lr
 8005c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8005c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c62:	4770      	bx	lr
 8005c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005c68:	bf16      	itet	ne
 8005c6a:	4608      	movne	r0, r1
 8005c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005c70:	4601      	movne	r1, r0
 8005c72:	0242      	lsls	r2, r0, #9
 8005c74:	bf06      	itte	eq
 8005c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8005c7a:	ea90 0f01 	teqeq	r0, r1
 8005c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8005c82:	4770      	bx	lr

08005c84 <__aeabi_ui2f>:
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e004      	b.n	8005c94 <__aeabi_i2f+0x8>
 8005c8a:	bf00      	nop

08005c8c <__aeabi_i2f>:
 8005c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005c90:	bf48      	it	mi
 8005c92:	4240      	negmi	r0, r0
 8005c94:	ea5f 0c00 	movs.w	ip, r0
 8005c98:	bf08      	it	eq
 8005c9a:	4770      	bxeq	lr
 8005c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	e01c      	b.n	8005ce2 <__aeabi_l2f+0x2a>

08005ca8 <__aeabi_ul2f>:
 8005ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8005cac:	bf08      	it	eq
 8005cae:	4770      	bxeq	lr
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	e00a      	b.n	8005ccc <__aeabi_l2f+0x14>
 8005cb6:	bf00      	nop

08005cb8 <__aeabi_l2f>:
 8005cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8005cbc:	bf08      	it	eq
 8005cbe:	4770      	bxeq	lr
 8005cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8005cc4:	d502      	bpl.n	8005ccc <__aeabi_l2f+0x14>
 8005cc6:	4240      	negs	r0, r0
 8005cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ccc:	ea5f 0c01 	movs.w	ip, r1
 8005cd0:	bf02      	ittt	eq
 8005cd2:	4684      	moveq	ip, r0
 8005cd4:	4601      	moveq	r1, r0
 8005cd6:	2000      	moveq	r0, #0
 8005cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8005cdc:	bf08      	it	eq
 8005cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8005ce6:	fabc f28c 	clz	r2, ip
 8005cea:	3a08      	subs	r2, #8
 8005cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8005cf0:	db10      	blt.n	8005d14 <__aeabi_l2f+0x5c>
 8005cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8005cf6:	4463      	add	r3, ip
 8005cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8005cfc:	f1c2 0220 	rsb	r2, r2, #32
 8005d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005d04:	fa20 f202 	lsr.w	r2, r0, r2
 8005d08:	eb43 0002 	adc.w	r0, r3, r2
 8005d0c:	bf08      	it	eq
 8005d0e:	f020 0001 	biceq.w	r0, r0, #1
 8005d12:	4770      	bx	lr
 8005d14:	f102 0220 	add.w	r2, r2, #32
 8005d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8005d1c:	f1c2 0220 	rsb	r2, r2, #32
 8005d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8005d24:	fa21 f202 	lsr.w	r2, r1, r2
 8005d28:	eb43 0002 	adc.w	r0, r3, r2
 8005d2c:	bf08      	it	eq
 8005d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005d32:	4770      	bx	lr

08005d34 <__aeabi_fmul>:
 8005d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005d3c:	bf1e      	ittt	ne
 8005d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005d42:	ea92 0f0c 	teqne	r2, ip
 8005d46:	ea93 0f0c 	teqne	r3, ip
 8005d4a:	d06f      	beq.n	8005e2c <__aeabi_fmul+0xf8>
 8005d4c:	441a      	add	r2, r3
 8005d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8005d52:	0240      	lsls	r0, r0, #9
 8005d54:	bf18      	it	ne
 8005d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005d5a:	d01e      	beq.n	8005d9a <__aeabi_fmul+0x66>
 8005d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005d68:	fba0 3101 	umull	r3, r1, r0, r1
 8005d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005d74:	bf3e      	ittt	cc
 8005d76:	0049      	lslcc	r1, r1, #1
 8005d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005d7c:	005b      	lslcc	r3, r3, #1
 8005d7e:	ea40 0001 	orr.w	r0, r0, r1
 8005d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005d86:	2afd      	cmp	r2, #253	; 0xfd
 8005d88:	d81d      	bhi.n	8005dc6 <__aeabi_fmul+0x92>
 8005d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005d92:	bf08      	it	eq
 8005d94:	f020 0001 	biceq.w	r0, r0, #1
 8005d98:	4770      	bx	lr
 8005d9a:	f090 0f00 	teq	r0, #0
 8005d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005da2:	bf08      	it	eq
 8005da4:	0249      	lsleq	r1, r1, #9
 8005da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8005dae:	3a7f      	subs	r2, #127	; 0x7f
 8005db0:	bfc2      	ittt	gt
 8005db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005dba:	4770      	bxgt	lr
 8005dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	dc5d      	bgt.n	8005e84 <__aeabi_fmul+0x150>
 8005dc8:	f112 0f19 	cmn.w	r2, #25
 8005dcc:	bfdc      	itt	le
 8005dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8005dd2:	4770      	bxle	lr
 8005dd4:	f1c2 0200 	rsb	r2, r2, #0
 8005dd8:	0041      	lsls	r1, r0, #1
 8005dda:	fa21 f102 	lsr.w	r1, r1, r2
 8005dde:	f1c2 0220 	rsb	r2, r2, #32
 8005de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8005de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8005dea:	f140 0000 	adc.w	r0, r0, #0
 8005dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8005df2:	bf08      	it	eq
 8005df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005df8:	4770      	bx	lr
 8005dfa:	f092 0f00 	teq	r2, #0
 8005dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005e02:	bf02      	ittt	eq
 8005e04:	0040      	lsleq	r0, r0, #1
 8005e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005e0a:	3a01      	subeq	r2, #1
 8005e0c:	d0f9      	beq.n	8005e02 <__aeabi_fmul+0xce>
 8005e0e:	ea40 000c 	orr.w	r0, r0, ip
 8005e12:	f093 0f00 	teq	r3, #0
 8005e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005e1a:	bf02      	ittt	eq
 8005e1c:	0049      	lsleq	r1, r1, #1
 8005e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005e22:	3b01      	subeq	r3, #1
 8005e24:	d0f9      	beq.n	8005e1a <__aeabi_fmul+0xe6>
 8005e26:	ea41 010c 	orr.w	r1, r1, ip
 8005e2a:	e78f      	b.n	8005d4c <__aeabi_fmul+0x18>
 8005e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005e30:	ea92 0f0c 	teq	r2, ip
 8005e34:	bf18      	it	ne
 8005e36:	ea93 0f0c 	teqne	r3, ip
 8005e3a:	d00a      	beq.n	8005e52 <__aeabi_fmul+0x11e>
 8005e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005e40:	bf18      	it	ne
 8005e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005e46:	d1d8      	bne.n	8005dfa <__aeabi_fmul+0xc6>
 8005e48:	ea80 0001 	eor.w	r0, r0, r1
 8005e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005e50:	4770      	bx	lr
 8005e52:	f090 0f00 	teq	r0, #0
 8005e56:	bf17      	itett	ne
 8005e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8005e5c:	4608      	moveq	r0, r1
 8005e5e:	f091 0f00 	teqne	r1, #0
 8005e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8005e66:	d014      	beq.n	8005e92 <__aeabi_fmul+0x15e>
 8005e68:	ea92 0f0c 	teq	r2, ip
 8005e6c:	d101      	bne.n	8005e72 <__aeabi_fmul+0x13e>
 8005e6e:	0242      	lsls	r2, r0, #9
 8005e70:	d10f      	bne.n	8005e92 <__aeabi_fmul+0x15e>
 8005e72:	ea93 0f0c 	teq	r3, ip
 8005e76:	d103      	bne.n	8005e80 <__aeabi_fmul+0x14c>
 8005e78:	024b      	lsls	r3, r1, #9
 8005e7a:	bf18      	it	ne
 8005e7c:	4608      	movne	r0, r1
 8005e7e:	d108      	bne.n	8005e92 <__aeabi_fmul+0x15e>
 8005e80:	ea80 0001 	eor.w	r0, r0, r1
 8005e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005e90:	4770      	bx	lr
 8005e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8005e9a:	4770      	bx	lr

08005e9c <__aeabi_fdiv>:
 8005e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005ea4:	bf1e      	ittt	ne
 8005ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005eaa:	ea92 0f0c 	teqne	r2, ip
 8005eae:	ea93 0f0c 	teqne	r3, ip
 8005eb2:	d069      	beq.n	8005f88 <__aeabi_fdiv+0xec>
 8005eb4:	eba2 0203 	sub.w	r2, r2, r3
 8005eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8005ebc:	0249      	lsls	r1, r1, #9
 8005ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8005ec2:	d037      	beq.n	8005f34 <__aeabi_fdiv+0x98>
 8005ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8005ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	bf38      	it	cc
 8005ed8:	005b      	lslcc	r3, r3, #1
 8005eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8005ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8005ee2:	428b      	cmp	r3, r1
 8005ee4:	bf24      	itt	cs
 8005ee6:	1a5b      	subcs	r3, r3, r1
 8005ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8005eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8005ef0:	bf24      	itt	cs
 8005ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8005ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8005efe:	bf24      	itt	cs
 8005f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8005f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8005f0c:	bf24      	itt	cs
 8005f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8005f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	bf18      	it	ne
 8005f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8005f1e:	d1e0      	bne.n	8005ee2 <__aeabi_fdiv+0x46>
 8005f20:	2afd      	cmp	r2, #253	; 0xfd
 8005f22:	f63f af50 	bhi.w	8005dc6 <__aeabi_fmul+0x92>
 8005f26:	428b      	cmp	r3, r1
 8005f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005f2c:	bf08      	it	eq
 8005f2e:	f020 0001 	biceq.w	r0, r0, #1
 8005f32:	4770      	bx	lr
 8005f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005f3c:	327f      	adds	r2, #127	; 0x7f
 8005f3e:	bfc2      	ittt	gt
 8005f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005f48:	4770      	bxgt	lr
 8005f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	3a01      	subs	r2, #1
 8005f54:	e737      	b.n	8005dc6 <__aeabi_fmul+0x92>
 8005f56:	f092 0f00 	teq	r2, #0
 8005f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005f5e:	bf02      	ittt	eq
 8005f60:	0040      	lsleq	r0, r0, #1
 8005f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005f66:	3a01      	subeq	r2, #1
 8005f68:	d0f9      	beq.n	8005f5e <__aeabi_fdiv+0xc2>
 8005f6a:	ea40 000c 	orr.w	r0, r0, ip
 8005f6e:	f093 0f00 	teq	r3, #0
 8005f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005f76:	bf02      	ittt	eq
 8005f78:	0049      	lsleq	r1, r1, #1
 8005f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005f7e:	3b01      	subeq	r3, #1
 8005f80:	d0f9      	beq.n	8005f76 <__aeabi_fdiv+0xda>
 8005f82:	ea41 010c 	orr.w	r1, r1, ip
 8005f86:	e795      	b.n	8005eb4 <__aeabi_fdiv+0x18>
 8005f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005f8c:	ea92 0f0c 	teq	r2, ip
 8005f90:	d108      	bne.n	8005fa4 <__aeabi_fdiv+0x108>
 8005f92:	0242      	lsls	r2, r0, #9
 8005f94:	f47f af7d 	bne.w	8005e92 <__aeabi_fmul+0x15e>
 8005f98:	ea93 0f0c 	teq	r3, ip
 8005f9c:	f47f af70 	bne.w	8005e80 <__aeabi_fmul+0x14c>
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	e776      	b.n	8005e92 <__aeabi_fmul+0x15e>
 8005fa4:	ea93 0f0c 	teq	r3, ip
 8005fa8:	d104      	bne.n	8005fb4 <__aeabi_fdiv+0x118>
 8005faa:	024b      	lsls	r3, r1, #9
 8005fac:	f43f af4c 	beq.w	8005e48 <__aeabi_fmul+0x114>
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	e76e      	b.n	8005e92 <__aeabi_fmul+0x15e>
 8005fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005fb8:	bf18      	it	ne
 8005fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005fbe:	d1ca      	bne.n	8005f56 <__aeabi_fdiv+0xba>
 8005fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005fc4:	f47f af5c 	bne.w	8005e80 <__aeabi_fmul+0x14c>
 8005fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005fcc:	f47f af3c 	bne.w	8005e48 <__aeabi_fmul+0x114>
 8005fd0:	e75f      	b.n	8005e92 <__aeabi_fmul+0x15e>
 8005fd2:	bf00      	nop

08005fd4 <__aeabi_f2uiz>:
 8005fd4:	0042      	lsls	r2, r0, #1
 8005fd6:	d20e      	bcs.n	8005ff6 <__aeabi_f2uiz+0x22>
 8005fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005fdc:	d30b      	bcc.n	8005ff6 <__aeabi_f2uiz+0x22>
 8005fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005fe6:	d409      	bmi.n	8005ffc <__aeabi_f2uiz+0x28>
 8005fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff0:	fa23 f002 	lsr.w	r0, r3, r2
 8005ff4:	4770      	bx	lr
 8005ff6:	f04f 0000 	mov.w	r0, #0
 8005ffa:	4770      	bx	lr
 8005ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006000:	d101      	bne.n	8006006 <__aeabi_f2uiz+0x32>
 8006002:	0242      	lsls	r2, r0, #9
 8006004:	d102      	bne.n	800600c <__aeabi_f2uiz+0x38>
 8006006:	f04f 30ff 	mov.w	r0, #4294967295
 800600a:	4770      	bx	lr
 800600c:	f04f 0000 	mov.w	r0, #0
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop

08006014 <initCounterLap>:
 */

#include "Lap_Timer.h"

//Initialization of all variables
void initCounterLap(){
 8006014:	b508      	push	{r3, lr}
	previousMillisLap = HAL_GetTick();
 8006016:	f000 ff27 	bl	8006e68 <HAL_GetTick>
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <initCounterLap+0x1c>)
 800601c:	6018      	str	r0, [r3, #0]
	Lap_Value = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	4a04      	ldr	r2, [pc, #16]	; (8006034 <initCounterLap+0x20>)
 8006022:	6013      	str	r3, [r2, #0]

	previousMillisLap_Display = 0;
 8006024:	4a04      	ldr	r2, [pc, #16]	; (8006038 <initCounterLap+0x24>)
 8006026:	6013      	str	r3, [r2, #0]
	LapUpdateDisplay = 0;
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <initCounterLap+0x28>)
 800602a:	7013      	strb	r3, [r2, #0]
}
 800602c:	bd08      	pop	{r3, pc}
 800602e:	bf00      	nop
 8006030:	20000434 	.word	0x20000434
 8006034:	20000430 	.word	0x20000430
 8006038:	2000043c 	.word	0x2000043c
 800603c:	20000438 	.word	0x20000438

08006040 <deltaTimeInterruptLap>:

//Called after finish each lap
void deltaTimeInterruptLap(uint32_t currentMillisLap){
	uint32_t maxCurrentMillis = previousMillisLap + MAX_DELTA_TIME_MILLIS_LAP;
 8006040:	4b0e      	ldr	r3, [pc, #56]	; (800607c <deltaTimeInterruptLap+0x3c>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	f502 2374 	add.w	r3, r2, #999424	; 0xf4000
 8006048:	f203 233f 	addw	r3, r3, #575	; 0x23f

	if(maxCurrentMillis < currentMillisLap){ //Check if it is the first lap
 800604c:	4283      	cmp	r3, r0
 800604e:	d208      	bcs.n	8006062 <deltaTimeInterruptLap+0x22>
		previousMillisLap = currentMillisLap;
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <deltaTimeInterruptLap+0x3c>)
 8006052:	6018      	str	r0, [r3, #0]
		Lap_Value = MAX_DELTA_TIME_MILLIS_LAP;
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <deltaTimeInterruptLap+0x40>)
 8006056:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <deltaTimeInterruptLap+0x44>)
 8006058:	601a      	str	r2, [r3, #0]
		LapUpdateDisplay = 1;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <deltaTimeInterruptLap+0x48>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	4770      	bx	lr
	} else { //Calculate the time of the current lap
		uint32_t actualMillisLap = currentMillisLap - previousMillisLap;
 8006062:	1a82      	subs	r2, r0, r2
		if(actualMillisLap > MIN_DELTA_TIME_MILLIS_LAP){
 8006064:	f241 3388 	movw	r3, #5000	; 0x1388
 8006068:	429a      	cmp	r2, r3
 800606a:	d906      	bls.n	800607a <deltaTimeInterruptLap+0x3a>
			previousMillisLap = currentMillisLap;
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <deltaTimeInterruptLap+0x3c>)
 800606e:	6018      	str	r0, [r3, #0]
			Lap_Value = actualMillisLap;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <deltaTimeInterruptLap+0x40>)
 8006072:	601a      	str	r2, [r3, #0]
			LapUpdateDisplay = 1;
 8006074:	4b04      	ldr	r3, [pc, #16]	; (8006088 <deltaTimeInterruptLap+0x48>)
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800607a:	4770      	bx	lr
 800607c:	20000434 	.word	0x20000434
 8006080:	20000430 	.word	0x20000430
 8006084:	000f423f 	.word	0x000f423f
 8006088:	20000438 	.word	0x20000438

0800608c <initCounterRPM>:

#include "RPM_Counter.h"

//Initialization of all variables
void initCounterRPM(){
	previousMicrosRPM = DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <initCounterRPM+0x34>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <initCounterRPM+0x38>)
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	490c      	ldr	r1, [pc, #48]	; (80060c8 <initCounterRPM+0x3c>)
 8006096:	fba1 1202 	umull	r1, r2, r1, r2
 800609a:	0c92      	lsrs	r2, r2, #18
 800609c:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <initCounterRPM+0x40>)
 80060a2:	6013      	str	r3, [r2, #0]
	counterAverageRPM = 0;
 80060a4:	2200      	movs	r2, #0
 80060a6:	490a      	ldr	r1, [pc, #40]	; (80060d0 <initCounterRPM+0x44>)
 80060a8:	700a      	strb	r2, [r1, #0]
	RPM_DeltaTime = 0;
 80060aa:	490a      	ldr	r1, [pc, #40]	; (80060d4 <initCounterRPM+0x48>)
 80060ac:	600a      	str	r2, [r1, #0]
	RPM_Value = 0;
 80060ae:	490a      	ldr	r1, [pc, #40]	; (80060d8 <initCounterRPM+0x4c>)
 80060b0:	800a      	strh	r2, [r1, #0]

	previousMillisRPM_Display = previousMicrosRPM/1000U;
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <initCounterRPM+0x50>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	099b      	lsrs	r3, r3, #6
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <initCounterRPM+0x54>)
 80060bc:	6013      	str	r3, [r2, #0]
}
 80060be:	4770      	bx	lr
 80060c0:	e0001000 	.word	0xe0001000
 80060c4:	20000000 	.word	0x20000000
 80060c8:	431bde83 	.word	0x431bde83
 80060cc:	20000440 	.word	0x20000440
 80060d0:	2000044e 	.word	0x2000044e
 80060d4:	20000444 	.word	0x20000444
 80060d8:	2000044c 	.word	0x2000044c
 80060dc:	10624dd3 	.word	0x10624dd3
 80060e0:	20000448 	.word	0x20000448

080060e4 <deltaTimeInterruptRPM>:

//Called after each spark pulse
void deltaTimeInterruptRPM(uint32_t currentMicrosRPM){
	uint32_t maxCurrentMicros = previousMicrosRPM + MAX_DELTA_TIME_MICROS_RPM;
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <deltaTimeInterruptRPM+0x44>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	f502 2312 	add.w	r3, r2, #598016	; 0x92000
 80060ec:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0

	if(maxCurrentMicros < currentMicrosRPM){ //Check if engine is turn on now
 80060f0:	4283      	cmp	r3, r0
 80060f2:	d208      	bcs.n	8006106 <deltaTimeInterruptRPM+0x22>
		previousMicrosRPM = currentMicrosRPM;
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <deltaTimeInterruptRPM+0x44>)
 80060f6:	6018      	str	r0, [r3, #0]
		RPM_DeltaTime = MAX_DELTA_TIME_MICROS_RPM;
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <deltaTimeInterruptRPM+0x48>)
 80060fa:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <deltaTimeInterruptRPM+0x4c>)
 80060fc:	601a      	str	r2, [r3, #0]
		counterAverageRPM = 1;
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <deltaTimeInterruptRPM+0x50>)
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	4770      	bx	lr
	} else { //Calculate the delta time
		uint32_t actualMicrosRPM = currentMicrosRPM - previousMicrosRPM;
 8006106:	1a82      	subs	r2, r0, r2
		if(actualMicrosRPM > MIN_DELTA_TIME_MICROS_RPM){
 8006108:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800610c:	429a      	cmp	r2, r3
 800610e:	d909      	bls.n	8006124 <deltaTimeInterruptRPM+0x40>
			previousMicrosRPM = currentMicrosRPM;
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <deltaTimeInterruptRPM+0x44>)
 8006112:	6018      	str	r0, [r3, #0]
			RPM_DeltaTime += actualMicrosRPM;
 8006114:	4905      	ldr	r1, [pc, #20]	; (800612c <deltaTimeInterruptRPM+0x48>)
 8006116:	680b      	ldr	r3, [r1, #0]
 8006118:	441a      	add	r2, r3
 800611a:	600a      	str	r2, [r1, #0]
			counterAverageRPM ++;
 800611c:	4a05      	ldr	r2, [pc, #20]	; (8006134 <deltaTimeInterruptRPM+0x50>)
 800611e:	7813      	ldrb	r3, [r2, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000440 	.word	0x20000440
 800612c:	20000444 	.word	0x20000444
 8006130:	000927c0 	.word	0x000927c0
 8006134:	2000044e 	.word	0x2000044e

08006138 <calculateRPM>:

//Called when is necessary calculate RPM value
void calculateRPM(){
 8006138:	b508      	push	{r3, lr}
	if(counterAverageRPM > 0)
 800613a:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <calculateRPM+0x3c>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b1bb      	cbz	r3, 8006170 <calculateRPM+0x38>
		RPM_Value = 60.0f * 1.0f /((float)(RPM_DeltaTime/counterAverageRPM)/1000000.0f); //Formula: 60*(1/(delta t[s]))
 8006140:	4a0d      	ldr	r2, [pc, #52]	; (8006178 <calculateRPM+0x40>)
 8006142:	6810      	ldr	r0, [r2, #0]
 8006144:	fbb0 f0f3 	udiv	r0, r0, r3
 8006148:	f7ff fd9c 	bl	8005c84 <__aeabi_ui2f>
 800614c:	490b      	ldr	r1, [pc, #44]	; (800617c <calculateRPM+0x44>)
 800614e:	f7ff fea5 	bl	8005e9c <__aeabi_fdiv>
 8006152:	4601      	mov	r1, r0
 8006154:	480a      	ldr	r0, [pc, #40]	; (8006180 <calculateRPM+0x48>)
 8006156:	f7ff fea1 	bl	8005e9c <__aeabi_fdiv>
 800615a:	f7ff ff3b 	bl	8005fd4 <__aeabi_f2uiz>
 800615e:	b280      	uxth	r0, r0
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <calculateRPM+0x4c>)
 8006162:	8018      	strh	r0, [r3, #0]
	else
		RPM_Value = 0;
	//Reset counters
	counterAverageRPM = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	4a03      	ldr	r2, [pc, #12]	; (8006174 <calculateRPM+0x3c>)
 8006168:	7013      	strb	r3, [r2, #0]
	RPM_DeltaTime = 0;
 800616a:	4a03      	ldr	r2, [pc, #12]	; (8006178 <calculateRPM+0x40>)
 800616c:	6013      	str	r3, [r2, #0]
}
 800616e:	bd08      	pop	{r3, pc}
		RPM_Value = 0;
 8006170:	2000      	movs	r0, #0
 8006172:	e7f5      	b.n	8006160 <calculateRPM+0x28>
 8006174:	2000044e 	.word	0x2000044e
 8006178:	20000444 	.word	0x20000444
 800617c:	49742400 	.word	0x49742400
 8006180:	42700000 	.word	0x42700000
 8006184:	2000044c 	.word	0x2000044c

08006188 <initReadTemperature>:

#include "Temperature_Sensor.h"
#include "math.h"

//Initialization of all variables
void initReadTemperature(){
 8006188:	b508      	push	{r3, lr}
	previousMillisTemperature_Read = HAL_GetTick();
 800618a:	f000 fe6d 	bl	8006e68 <HAL_GetTick>
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <initReadTemperature+0x24>)
 8006190:	6018      	str	r0, [r3, #0]
	previousMillisTemperature_Display = previousMillisTemperature_Read;
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <initReadTemperature+0x28>)
 8006194:	6018      	str	r0, [r3, #0]
	TemperatureValue = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	4a06      	ldr	r2, [pc, #24]	; (80061b4 <initReadTemperature+0x2c>)
 800619a:	8013      	strh	r3, [r2, #0]

	counterAverageRead = 0;
 800619c:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <initReadTemperature+0x30>)
 800619e:	7013      	strb	r3, [r2, #0]
	sumReadValue = 0;
 80061a0:	4a06      	ldr	r2, [pc, #24]	; (80061bc <initReadTemperature+0x34>)
 80061a2:	6013      	str	r3, [r2, #0]

	TemperatureAlarmUpdateDisplay = ProbeOk;
 80061a4:	4a06      	ldr	r2, [pc, #24]	; (80061c0 <initReadTemperature+0x38>)
 80061a6:	7013      	strb	r3, [r2, #0]
}
 80061a8:	bd08      	pop	{r3, pc}
 80061aa:	bf00      	nop
 80061ac:	20000460 	.word	0x20000460
 80061b0:	20000468 	.word	0x20000468
 80061b4:	20000454 	.word	0x20000454
 80061b8:	20000464 	.word	0x20000464
 80061bc:	20000450 	.word	0x20000450
 80061c0:	20000458 	.word	0x20000458

080061c4 <averageRead>:

//Increment counters and readings
void averageRead(){
	sumReadValue += ActualRead;
 80061c4:	4a05      	ldr	r2, [pc, #20]	; (80061dc <averageRead+0x18>)
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	4905      	ldr	r1, [pc, #20]	; (80061e0 <averageRead+0x1c>)
 80061ca:	6809      	ldr	r1, [r1, #0]
 80061cc:	440b      	add	r3, r1
 80061ce:	6013      	str	r3, [r2, #0]
	counterAverageRead ++;
 80061d0:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <averageRead+0x20>)
 80061d2:	7813      	ldrb	r3, [r2, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	7013      	strb	r3, [r2, #0]
}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000450 	.word	0x20000450
 80061e0:	2000045c 	.word	0x2000045c
 80061e4:	20000464 	.word	0x20000464

080061e8 <calculateTemperature>:

//Convert read average to temperature
void calculateTemperature(){
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float Vin = V_MAX_TEMP*(float)((float)(sumReadValue/counterAverageRead)/4096.0);
 80061ec:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80062ec <calculateTemperature+0x104>
 80061f0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80062f0 <calculateTemperature+0x108>
 80061f4:	f898 3000 	ldrb.w	r3, [r8]
 80061f8:	f8d9 0000 	ldr.w	r0, [r9]
 80061fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8006200:	f7ff fd40 	bl	8005c84 <__aeabi_ui2f>
 8006204:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8006208:	f7ff fd94 	bl	8005d34 <__aeabi_fmul>
 800620c:	f7ff f904 	bl	8005418 <__aeabi_f2d>
 8006210:	a327      	add	r3, pc, #156	; (adr r3, 80062b0 <calculateTemperature+0xc8>)
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f7ff f957 	bl	80054c8 <__aeabi_dmul>
 800621a:	f7ff fc2d 	bl	8005a78 <__aeabi_d2f>
	TemperatureValue = (float)(1.0/(1.0 / (TEMP_ZERO + 273.15) + (1.0 / BETA * log((KNOWN_RES_TEMP*Vin)/(V_MAX_TEMP-Vin)/RES_ZERO))) - 273.15)*10.0;
 800621e:	f7ff f8fb 	bl	8005418 <__aeabi_f2d>
 8006222:	4606      	mov	r6, r0
 8006224:	460f      	mov	r7, r1
 8006226:	a324      	add	r3, pc, #144	; (adr r3, 80062b8 <calculateTemperature+0xd0>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7ff f94c 	bl	80054c8 <__aeabi_dmul>
 8006230:	4604      	mov	r4, r0
 8006232:	460d      	mov	r5, r1
 8006234:	4632      	mov	r2, r6
 8006236:	463b      	mov	r3, r7
 8006238:	a11d      	add	r1, pc, #116	; (adr r1, 80062b0 <calculateTemperature+0xc8>)
 800623a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800623e:	f7fe ff8b 	bl	8005158 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7ff fa67 	bl	800571c <__aeabi_ddiv>
 800624e:	a31c      	add	r3, pc, #112	; (adr r3, 80062c0 <calculateTemperature+0xd8>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7ff fa62 	bl	800571c <__aeabi_ddiv>
 8006258:	f006 faa2 	bl	800c7a0 <log>
 800625c:	a31a      	add	r3, pc, #104	; (adr r3, 80062c8 <calculateTemperature+0xe0>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7ff f931 	bl	80054c8 <__aeabi_dmul>
 8006266:	a31a      	add	r3, pc, #104	; (adr r3, 80062d0 <calculateTemperature+0xe8>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f7fe ff76 	bl	800515c <__adddf3>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	2000      	movs	r0, #0
 8006276:	491a      	ldr	r1, [pc, #104]	; (80062e0 <calculateTemperature+0xf8>)
 8006278:	f7ff fa50 	bl	800571c <__aeabi_ddiv>
 800627c:	a316      	add	r3, pc, #88	; (adr r3, 80062d8 <calculateTemperature+0xf0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fe ff69 	bl	8005158 <__aeabi_dsub>
 8006286:	f7ff fbf7 	bl	8005a78 <__aeabi_d2f>
 800628a:	f7ff f8c5 	bl	8005418 <__aeabi_f2d>
 800628e:	2200      	movs	r2, #0
 8006290:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <calculateTemperature+0xfc>)
 8006292:	f7ff f919 	bl	80054c8 <__aeabi_dmul>
 8006296:	f7ff fbc7 	bl	8005a28 <__aeabi_d2iz>
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <calculateTemperature+0x100>)
 800629c:	8018      	strh	r0, [r3, #0]

	sumReadValue = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	f8c9 3000 	str.w	r3, [r9]
	counterAverageRead = 0;
 80062a4:	f888 3000 	strb.w	r3, [r8]
}
 80062a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ac:	f3af 8000 	nop.w
 80062b0:	66666666 	.word	0x66666666
 80062b4:	400a6666 	.word	0x400a6666
 80062b8:	00000000 	.word	0x00000000
 80062bc:	40c38800 	.word	0x40c38800
 80062c0:	00000000 	.word	0x00000000
 80062c4:	40a9c800 	.word	0x40a9c800
 80062c8:	bdf80108 	.word	0xbdf80108
 80062cc:	3f3081ff 	.word	0x3f3081ff
 80062d0:	9dd379ac 	.word	0x9dd379ac
 80062d4:	3f65f421 	.word	0x3f65f421
 80062d8:	66666666 	.word	0x66666666
 80062dc:	40711266 	.word	0x40711266
 80062e0:	3ff00000 	.word	0x3ff00000
 80062e4:	40240000 	.word	0x40240000
 80062e8:	20000454 	.word	0x20000454
 80062ec:	20000450 	.word	0x20000450
 80062f0:	20000464 	.word	0x20000464

080062f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062f4:	b500      	push	{lr}
 80062f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062f8:	2300      	movs	r3, #0
 80062fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80062fc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	9306      	str	r3, [sp, #24]
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	9308      	str	r3, [sp, #32]
 8006306:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006310:	2205      	movs	r2, #5
 8006312:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006318:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800631a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800631c:	2301      	movs	r3, #1
 800631e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006320:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006322:	2302      	movs	r3, #2
 8006324:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006326:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006328:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800632c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800632e:	a80a      	add	r0, sp, #40	; 0x28
 8006330:	f002 fca8 	bl	8008c84 <HAL_RCC_OscConfig>
 8006334:	bb00      	cbnz	r0, 8006378 <SystemClock_Config+0x84>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006336:	230f      	movs	r3, #15
 8006338:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800633a:	2102      	movs	r1, #2
 800633c:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800633e:	2300      	movs	r3, #0
 8006340:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006346:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006348:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800634a:	a805      	add	r0, sp, #20
 800634c:	f002 feec 	bl	8009128 <HAL_RCC_ClockConfig>
 8006350:	b9a0      	cbnz	r0, 800637c <SystemClock_Config+0x88>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8006352:	2313      	movs	r3, #19
 8006354:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800635a:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800635c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006360:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8006362:	2300      	movs	r3, #0
 8006364:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006366:	a801      	add	r0, sp, #4
 8006368:	f002 ffca 	bl	8009300 <HAL_RCCEx_PeriphCLKConfig>
 800636c:	b940      	cbnz	r0, 8006380 <SystemClock_Config+0x8c>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800636e:	f002 fe9f 	bl	80090b0 <HAL_RCC_EnableCSS>
}
 8006372:	b015      	add	sp, #84	; 0x54
 8006374:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006378:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800637a:	e7fe      	b.n	800637a <SystemClock_Config+0x86>
 800637c:	b672      	cpsid	i
 800637e:	e7fe      	b.n	800637e <SystemClock_Config+0x8a>
 8006380:	b672      	cpsid	i
 8006382:	e7fe      	b.n	8006382 <SystemClock_Config+0x8e>

08006384 <main>:
{
 8006384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	b0a0      	sub	sp, #128	; 0x80
  HAL_Init();
 800638a:	f000 fd4f 	bl	8006e2c <HAL_Init>
  SystemClock_Config();
 800638e:	f7ff ffb1 	bl	80062f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006392:	2400      	movs	r4, #0
 8006394:	9407      	str	r4, [sp, #28]
 8006396:	9408      	str	r4, [sp, #32]
 8006398:	9409      	str	r4, [sp, #36]	; 0x24
 800639a:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800639c:	4db4      	ldr	r5, [pc, #720]	; (8006670 <main+0x2ec>)
 800639e:	69ab      	ldr	r3, [r5, #24]
 80063a0:	f043 0310 	orr.w	r3, r3, #16
 80063a4:	61ab      	str	r3, [r5, #24]
 80063a6:	69ab      	ldr	r3, [r5, #24]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80063b0:	69ab      	ldr	r3, [r5, #24]
 80063b2:	f043 0320 	orr.w	r3, r3, #32
 80063b6:	61ab      	str	r3, [r5, #24]
 80063b8:	69ab      	ldr	r3, [r5, #24]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c2:	69ab      	ldr	r3, [r5, #24]
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	61ab      	str	r3, [r5, #24]
 80063ca:	69ab      	ldr	r3, [r5, #24]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	9305      	str	r3, [sp, #20]
 80063d2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d4:	69ab      	ldr	r3, [r5, #24]
 80063d6:	f043 0308 	orr.w	r3, r3, #8
 80063da:	61ab      	str	r3, [r5, #24]
 80063dc:	69ab      	ldr	r3, [r5, #24]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	9306      	str	r3, [sp, #24]
 80063e4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(ToDeleate_Led_GPIO_Port, ToDeleate_Led_Pin, GPIO_PIN_SET);
 80063e6:	4fa3      	ldr	r7, [pc, #652]	; (8006674 <main+0x2f0>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063ee:	4638      	mov	r0, r7
 80063f0:	f001 fb56 	bl	8007aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Led_status_Pin|Buzzer_Pin|WP_Flash_Pin, GPIO_PIN_RESET);
 80063f4:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80066b8 <main+0x334>
 80063f8:	4622      	mov	r2, r4
 80063fa:	f240 1111 	movw	r1, #273	; 0x111
 80063fe:	4640      	mov	r0, r8
 8006400:	f001 fb4e 	bl	8007aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPS_ONOFF_Pin|HOLD_Flash_Pin|GPS_NRST_Pin, GPIO_PIN_RESET);
 8006404:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80066bc <main+0x338>
 8006408:	4622      	mov	r2, r4
 800640a:	2115      	movs	r1, #21
 800640c:	4648      	mov	r0, r9
 800640e:	f001 fb47 	bl	8007aa0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ToDeleate_Led_Pin;
 8006412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006416:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006418:	2601      	movs	r6, #1
 800641a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800641e:	f04f 0a02 	mov.w	sl, #2
 8006422:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(ToDeleate_Led_GPIO_Port, &GPIO_InitStruct);
 8006426:	a907      	add	r1, sp, #28
 8006428:	4638      	mov	r0, r7
 800642a:	f001 fa29 	bl	8007880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Led_status_Pin|Buzzer_Pin;
 800642e:	2711      	movs	r7, #17
 8006430:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006432:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006434:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006436:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800643a:	a907      	add	r1, sp, #28
 800643c:	4640      	mov	r0, r8
 800643e:	f001 fa1f 	bl	8007880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Track_Sensor_Pin|RPM_Sensor_Pin;
 8006442:	2322      	movs	r3, #34	; 0x22
 8006444:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006446:	4b8c      	ldr	r3, [pc, #560]	; (8006678 <main+0x2f4>)
 8006448:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800644c:	a907      	add	r1, sp, #28
 800644e:	4640      	mov	r0, r8
 8006450:	f001 fa16 	bl	8007880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPS_ONOFF_Pin|GPS_NRST_Pin;
 8006454:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006456:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006458:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800645a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800645e:	a907      	add	r1, sp, #28
 8006460:	4648      	mov	r0, r9
 8006462:	f001 fa0d 	bl	8007880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPS_PPS_Pin|IMU_Interrupt_Pin;
 8006466:	f240 2302 	movw	r3, #514	; 0x202
 800646a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800646c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006470:	a907      	add	r1, sp, #28
 8006472:	4648      	mov	r0, r9
 8006474:	f001 fa04 	bl	8007880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HOLD_Flash_Pin;
 8006478:	2304      	movs	r3, #4
 800647a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800647c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006480:	f04f 0a03 	mov.w	sl, #3
 8006484:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(HOLD_Flash_GPIO_Port, &GPIO_InitStruct);
 8006488:	a907      	add	r1, sp, #28
 800648a:	4648      	mov	r0, r9
 800648c:	f001 f9f8 	bl	8007880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WP_Flash_Pin;
 8006490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006494:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006496:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006498:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800649a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(WP_Flash_GPIO_Port, &GPIO_InitStruct);
 800649e:	a907      	add	r1, sp, #28
 80064a0:	4640      	mov	r0, r8
 80064a2:	f001 f9ed 	bl	8007880 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80064a6:	4622      	mov	r2, r4
 80064a8:	4621      	mov	r1, r4
 80064aa:	2007      	movs	r0, #7
 80064ac:	f001 f806 	bl	80074bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80064b0:	2007      	movs	r0, #7
 80064b2:	f001 f835 	bl	8007520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80064b6:	4622      	mov	r2, r4
 80064b8:	4621      	mov	r1, r4
 80064ba:	2017      	movs	r0, #23
 80064bc:	f000 fffe 	bl	80074bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80064c0:	2017      	movs	r0, #23
 80064c2:	f001 f82d 	bl	8007520 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064c6:	696b      	ldr	r3, [r5, #20]
 80064c8:	4333      	orrs	r3, r6
 80064ca:	616b      	str	r3, [r5, #20]
 80064cc:	696b      	ldr	r3, [r5, #20]
 80064ce:	4033      	ands	r3, r6
 80064d0:	9302      	str	r3, [sp, #8]
 80064d2:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80064d4:	4622      	mov	r2, r4
 80064d6:	4621      	mov	r1, r4
 80064d8:	200b      	movs	r0, #11
 80064da:	f000 ffef 	bl	80074bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80064de:	200b      	movs	r0, #11
 80064e0:	f001 f81e 	bl	8007520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80064e4:	4622      	mov	r2, r4
 80064e6:	4621      	mov	r1, r4
 80064e8:	2010      	movs	r0, #16
 80064ea:	f000 ffe7 	bl	80074bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80064ee:	2010      	movs	r0, #16
 80064f0:	f001 f816 	bl	8007520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80064f4:	4622      	mov	r2, r4
 80064f6:	4621      	mov	r1, r4
 80064f8:	4638      	mov	r0, r7
 80064fa:	f000 ffdf 	bl	80074bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80064fe:	4638      	mov	r0, r7
 8006500:	f001 f80e 	bl	8007520 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8006504:	9407      	str	r4, [sp, #28]
 8006506:	9408      	str	r4, [sp, #32]
 8006508:	9409      	str	r4, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 800650a:	485c      	ldr	r0, [pc, #368]	; (800667c <main+0x2f8>)
 800650c:	4b5c      	ldr	r3, [pc, #368]	; (8006680 <main+0x2fc>)
 800650e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006510:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006512:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006514:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006516:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800651a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800651c:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800651e:	6106      	str	r6, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006520:	f000 feac 	bl	800727c <HAL_ADC_Init>
 8006524:	2800      	cmp	r0, #0
 8006526:	f040 80e7 	bne.w	80066f8 <main+0x374>
  sConfig.Channel = ADC_CHANNEL_7;
 800652a:	2307      	movs	r3, #7
 800652c:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800652e:	2301      	movs	r3, #1
 8006530:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006532:	2300      	movs	r3, #0
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006536:	a907      	add	r1, sp, #28
 8006538:	4850      	ldr	r0, [pc, #320]	; (800667c <main+0x2f8>)
 800653a:	f000 fced 	bl	8006f18 <HAL_ADC_ConfigChannel>
 800653e:	2800      	cmp	r0, #0
 8006540:	f040 80dc 	bne.w	80066fc <main+0x378>
  hi2c1.Instance = I2C1;
 8006544:	484f      	ldr	r0, [pc, #316]	; (8006684 <main+0x300>)
 8006546:	4b50      	ldr	r3, [pc, #320]	; (8006688 <main+0x304>)
 8006548:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800654a:	4b50      	ldr	r3, [pc, #320]	; (800668c <main+0x308>)
 800654c:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800654e:	2300      	movs	r3, #0
 8006550:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006552:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006554:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006558:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800655a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800655c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800655e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006560:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006562:	f001 fabb 	bl	8007adc <HAL_I2C_Init>
 8006566:	2800      	cmp	r0, #0
 8006568:	f040 80ca 	bne.w	8006700 <main+0x37c>
  RTC_TimeTypeDef sTime = {0};
 800656c:	2300      	movs	r3, #0
 800656e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006572:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8006576:	9307      	str	r3, [sp, #28]
  hrtc.Instance = RTC;
 8006578:	4845      	ldr	r0, [pc, #276]	; (8006690 <main+0x30c>)
 800657a:	4a46      	ldr	r2, [pc, #280]	; (8006694 <main+0x310>)
 800657c:	6002      	str	r2, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800657e:	f04f 32ff 	mov.w	r2, #4294967295
 8006582:	6042      	str	r2, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8006584:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006586:	f003 f977 	bl	8009878 <HAL_RTC_Init>
 800658a:	2800      	cmp	r0, #0
 800658c:	f040 80ba 	bne.w	8006704 <main+0x380>
  sTime.Hours = 0x21;
 8006590:	2321      	movs	r3, #33	; 0x21
 8006592:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x21;
 8006596:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x21;
 800659a:	f88d 3006 	strb.w	r3, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800659e:	2201      	movs	r2, #1
 80065a0:	a901      	add	r1, sp, #4
 80065a2:	483b      	ldr	r0, [pc, #236]	; (8006690 <main+0x30c>)
 80065a4:	f003 f881 	bl	80096aa <HAL_RTC_SetTime>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f040 80ad 	bne.w	8006708 <main+0x384>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80065ae:	2201      	movs	r2, #1
 80065b0:	f88d 201c 	strb.w	r2, [sp, #28]
  DateToUpdate.Month = RTC_MONTH_JUNE;
 80065b4:	2306      	movs	r3, #6
 80065b6:	f88d 301d 	strb.w	r3, [sp, #29]
  DateToUpdate.Date = 0x21;
 80065ba:	2321      	movs	r3, #33	; 0x21
 80065bc:	f88d 301e 	strb.w	r3, [sp, #30]
  DateToUpdate.Year = 0x21;
 80065c0:	f88d 301f 	strb.w	r3, [sp, #31]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80065c4:	a907      	add	r1, sp, #28
 80065c6:	4832      	ldr	r0, [pc, #200]	; (8006690 <main+0x30c>)
 80065c8:	f003 f8d0 	bl	800976c <HAL_RTC_SetDate>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f040 809d 	bne.w	800670c <main+0x388>
  hspi2.Instance = SPI2;
 80065d2:	4831      	ldr	r0, [pc, #196]	; (8006698 <main+0x314>)
 80065d4:	4b31      	ldr	r3, [pc, #196]	; (800669c <main+0x318>)
 80065d6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80065d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065dc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80065de:	2300      	movs	r3, #0
 80065e0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065e2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80065e4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80065e6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80065e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80065ec:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065ee:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065f0:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065f2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065f4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80065f6:	230a      	movs	r3, #10
 80065f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80065fa:	f003 f99b 	bl	8009934 <HAL_SPI_Init>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f040 8086 	bne.w	8006710 <main+0x38c>
  huart1.Instance = USART1;
 8006604:	4826      	ldr	r0, [pc, #152]	; (80066a0 <main+0x31c>)
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <main+0x320>)
 8006608:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800660a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800660e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006610:	2300      	movs	r3, #0
 8006612:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006614:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006616:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006618:	220c      	movs	r2, #12
 800661a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800661c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800661e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006620:	f003 fa40 	bl	8009aa4 <HAL_UART_Init>
 8006624:	2800      	cmp	r0, #0
 8006626:	d175      	bne.n	8006714 <main+0x390>
  huart2.Instance = USART2;
 8006628:	481f      	ldr	r0, [pc, #124]	; (80066a8 <main+0x324>)
 800662a:	4b20      	ldr	r3, [pc, #128]	; (80066ac <main+0x328>)
 800662c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 800662e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006632:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006634:	2300      	movs	r3, #0
 8006636:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006638:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800663a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800663c:	220c      	movs	r2, #12
 800663e:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006640:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006642:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006644:	f003 fa2e 	bl	8009aa4 <HAL_UART_Init>
 8006648:	2800      	cmp	r0, #0
 800664a:	d165      	bne.n	8006718 <main+0x394>
  huart3.Instance = USART3;
 800664c:	4818      	ldr	r0, [pc, #96]	; (80066b0 <main+0x32c>)
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <main+0x330>)
 8006650:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8006652:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006656:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006658:	2300      	movs	r3, #0
 800665a:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800665c:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800665e:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006660:	220c      	movs	r2, #12
 8006662:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006664:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006666:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006668:	f003 fa1c 	bl	8009aa4 <HAL_UART_Init>
 800666c:	e028      	b.n	80066c0 <main+0x33c>
 800666e:	bf00      	nop
 8006670:	40021000 	.word	0x40021000
 8006674:	40011000 	.word	0x40011000
 8006678:	10210000 	.word	0x10210000
 800667c:	200005a0 	.word	0x200005a0
 8006680:	40012400 	.word	0x40012400
 8006684:	2000054c 	.word	0x2000054c
 8006688:	40005400 	.word	0x40005400
 800668c:	000186a0 	.word	0x000186a0
 8006690:	2000069c 	.word	0x2000069c
 8006694:	40002800 	.word	0x40002800
 8006698:	200004b0 	.word	0x200004b0
 800669c:	40003800 	.word	0x40003800
 80066a0:	20000614 	.word	0x20000614
 80066a4:	40013800 	.word	0x40013800
 80066a8:	200006b0 	.word	0x200006b0
 80066ac:	40004400 	.word	0x40004400
 80066b0:	20000508 	.word	0x20000508
 80066b4:	40004800 	.word	0x40004800
 80066b8:	40010800 	.word	0x40010800
 80066bc:	40010c00 	.word	0x40010c00
 80066c0:	bb60      	cbnz	r0, 800671c <main+0x398>
  MX_USB_DEVICE_Init();
 80066c2:	f005 fa0f 	bl	800bae4 <MX_USB_DEVICE_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80066c6:	4869      	ldr	r0, [pc, #420]	; (800686c <main+0x4e8>)
 80066c8:	f000 fe5c 	bl	8007384 <HAL_ADCEx_Calibration_Start>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80066cc:	4a68      	ldr	r2, [pc, #416]	; (8006870 <main+0x4ec>)
 80066ce:	68d3      	ldr	r3, [r2, #12]
 80066d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066d4:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80066d6:	4a67      	ldr	r2, [pc, #412]	; (8006874 <main+0x4f0>)
 80066d8:	6813      	ldr	r3, [r2, #0]
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	6013      	str	r3, [r2, #0]
  initCounterRPM();
 80066e0:	f7ff fcd4 	bl	800608c <initCounterRPM>
  initCounterLap();
 80066e4:	f7ff fc96 	bl	8006014 <initCounterLap>
  initReadTemperature();
 80066e8:	f7ff fd4e 	bl	8006188 <initReadTemperature>
	  if(currentMillis-previousMillisRPM_Display > CALCULATE_RPM_DELTA_TIME){
 80066ec:	4f62      	ldr	r7, [pc, #392]	; (8006878 <main+0x4f4>)
		  previousMillisLap_Display = currentMillis + DELAY_DISPLAY_LAP_TIME;
 80066ee:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80068b8 <main+0x534>
	  HAL_GPIO_TogglePin (ToDeleate_Led_GPIO_Port, ToDeleate_Led_Pin);
 80066f2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80068bc <main+0x538>
 80066f6:	e053      	b.n	80067a0 <main+0x41c>
 80066f8:	b672      	cpsid	i
  while (1)
 80066fa:	e7fe      	b.n	80066fa <main+0x376>
 80066fc:	b672      	cpsid	i
 80066fe:	e7fe      	b.n	80066fe <main+0x37a>
 8006700:	b672      	cpsid	i
 8006702:	e7fe      	b.n	8006702 <main+0x37e>
 8006704:	b672      	cpsid	i
 8006706:	e7fe      	b.n	8006706 <main+0x382>
 8006708:	b672      	cpsid	i
 800670a:	e7fe      	b.n	800670a <main+0x386>
 800670c:	b672      	cpsid	i
 800670e:	e7fe      	b.n	800670e <main+0x38a>
 8006710:	b672      	cpsid	i
 8006712:	e7fe      	b.n	8006712 <main+0x38e>
 8006714:	b672      	cpsid	i
 8006716:	e7fe      	b.n	8006716 <main+0x392>
 8006718:	b672      	cpsid	i
 800671a:	e7fe      	b.n	800671a <main+0x396>
 800671c:	b672      	cpsid	i
 800671e:	e7fe      	b.n	800671e <main+0x39a>
		  calculateRPM();
 8006720:	f7ff fd0a 	bl	8006138 <calculateRPM>
		  sizeBuffUSB += sprintf(txtBufUSB, "RPM_Value: %u ", RPM_Value);
 8006724:	4e55      	ldr	r6, [pc, #340]	; (800687c <main+0x4f8>)
 8006726:	8832      	ldrh	r2, [r6, #0]
 8006728:	4955      	ldr	r1, [pc, #340]	; (8006880 <main+0x4fc>)
 800672a:	a80b      	add	r0, sp, #44	; 0x2c
 800672c:	f005 fbfe 	bl	800bf2c <siprintf>
 8006730:	b285      	uxth	r5, r0
		  sizeBuffBT += sprintf(txtBufBT, BT_RPM_SYMBOL "%u", RPM_Value); //6 Characters
 8006732:	8832      	ldrh	r2, [r6, #0]
 8006734:	4953      	ldr	r1, [pc, #332]	; (8006884 <main+0x500>)
 8006736:	a818      	add	r0, sp, #96	; 0x60
 8006738:	f005 fbf8 	bl	800bf2c <siprintf>
 800673c:	b286      	uxth	r6, r0
		  previousMillisRPM_Display = currentMillis;
 800673e:	603c      	str	r4, [r7, #0]
 8006740:	e037      	b.n	80067b2 <main+0x42e>
		  sizeBuffUSB += sprintf(txtBufUSB + sizeBuffUSB, "!--! Lap value: %lu !--! ", Lap_Value);
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <main+0x504>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4951      	ldr	r1, [pc, #324]	; (800688c <main+0x508>)
 8006748:	ab0b      	add	r3, sp, #44	; 0x2c
 800674a:	1958      	adds	r0, r3, r5
 800674c:	f005 fbee 	bl	800bf2c <siprintf>
 8006750:	4405      	add	r5, r0
 8006752:	b2ad      	uxth	r5, r5
		  previousMillisLap_Display = currentMillis + DELAY_DISPLAY_LAP_TIME;
 8006754:	f504 737a 	add.w	r3, r4, #1000	; 0x3e8
 8006758:	f8c8 3000 	str.w	r3, [r8]
		  LapUpdateDisplay = 0;
 800675c:	4b4c      	ldr	r3, [pc, #304]	; (8006890 <main+0x50c>)
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e02a      	b.n	80067ba <main+0x436>
	  if(currentMillis-previousMillisTemperature_Display > DELAY_DISPLAY_TEMPERATUIRE_SENSOR_TIME){
 8006764:	4b4b      	ldr	r3, [pc, #300]	; (8006894 <main+0x510>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1ae3      	subs	r3, r4, r3
 800676a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800676e:	d848      	bhi.n	8006802 <main+0x47e>
	  if(currentMillis-previousMillisTemperature_Read > CALCULATE_TEMPERATUIRE_SENSOR_TIME){
 8006770:	4b49      	ldr	r3, [pc, #292]	; (8006898 <main+0x514>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	1ae3      	subs	r3, r4, r3
 8006776:	2b64      	cmp	r3, #100	; 0x64
 8006778:	d86f      	bhi.n	800685a <main+0x4d6>
	  if(sizeBuffUSB > 0){
 800677a:	2d00      	cmp	r5, #0
 800677c:	d15e      	bne.n	800683c <main+0x4b8>
	  if(sizeBuffBT > 0){
 800677e:	b13e      	cbz	r6, 8006790 <main+0x40c>
		  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)txtBufBT, sizeBuffBT);
 8006780:	4632      	mov	r2, r6
 8006782:	a918      	add	r1, sp, #96	; 0x60
 8006784:	4845      	ldr	r0, [pc, #276]	; (800689c <main+0x518>)
 8006786:	f003 f9bd 	bl	8009b04 <HAL_UART_Transmit_DMA>
		  txtBufBT[30] = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
	  HAL_GPIO_TogglePin (ToDeleate_Led_GPIO_Port, ToDeleate_Led_Pin);
 8006790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006794:	4648      	mov	r0, r9
 8006796:	f001 f989 	bl	8007aac <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800679a:	2032      	movs	r0, #50	; 0x32
 800679c:	f000 fb6a 	bl	8006e74 <HAL_Delay>
	  uint32_t currentMillis = HAL_GetTick();
 80067a0:	f000 fb62 	bl	8006e68 <HAL_GetTick>
 80067a4:	4604      	mov	r4, r0
	  if(currentMillis-previousMillisRPM_Display > CALCULATE_RPM_DELTA_TIME){
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	1ac3      	subs	r3, r0, r3
 80067aa:	2bc8      	cmp	r3, #200	; 0xc8
 80067ac:	d8b8      	bhi.n	8006720 <main+0x39c>
 80067ae:	2500      	movs	r5, #0
 80067b0:	462e      	mov	r6, r5
	  if(LapUpdateDisplay == 1){
 80067b2:	4b37      	ldr	r3, [pc, #220]	; (8006890 <main+0x50c>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d0c3      	beq.n	8006742 <main+0x3be>
	  if(currentMillis > previousMillisLap_Display && currentMillis-previousMillisLap_Display > CALCULATE_LAP_DELTA_TIME && LapUpdateDisplay == 0){
 80067ba:	f8d8 3000 	ldr.w	r3, [r8]
 80067be:	42a3      	cmp	r3, r4
 80067c0:	d2d0      	bcs.n	8006764 <main+0x3e0>
 80067c2:	1ae3      	subs	r3, r4, r3
 80067c4:	2bc8      	cmp	r3, #200	; 0xc8
 80067c6:	d9cd      	bls.n	8006764 <main+0x3e0>
 80067c8:	4b31      	ldr	r3, [pc, #196]	; (8006890 <main+0x50c>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1c9      	bne.n	8006764 <main+0x3e0>
		  sizeBuffUSB += sprintf(txtBufUSB + sizeBuffUSB, "Lap value: %lu ", currentMillis-previousMillisLap);
 80067d0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80068c0 <main+0x53c>
 80067d4:	f8da 2000 	ldr.w	r2, [sl]
 80067d8:	1aa2      	subs	r2, r4, r2
 80067da:	4931      	ldr	r1, [pc, #196]	; (80068a0 <main+0x51c>)
 80067dc:	ab0b      	add	r3, sp, #44	; 0x2c
 80067de:	1958      	adds	r0, r3, r5
 80067e0:	f005 fba4 	bl	800bf2c <siprintf>
 80067e4:	4405      	add	r5, r0
 80067e6:	b2ad      	uxth	r5, r5
		  sizeBuffBT += sprintf(txtBufBT + sizeBuffBT, BT_LAP_SYMBOL "%lu", currentMillis-previousMillisLap); //11 Characters
 80067e8:	f8da 2000 	ldr.w	r2, [sl]
 80067ec:	1aa2      	subs	r2, r4, r2
 80067ee:	492d      	ldr	r1, [pc, #180]	; (80068a4 <main+0x520>)
 80067f0:	ab18      	add	r3, sp, #96	; 0x60
 80067f2:	1998      	adds	r0, r3, r6
 80067f4:	f005 fb9a 	bl	800bf2c <siprintf>
 80067f8:	4406      	add	r6, r0
 80067fa:	b2b6      	uxth	r6, r6
		  previousMillisLap_Display = currentMillis;
 80067fc:	f8c8 4000 	str.w	r4, [r8]
 8006800:	e7b0      	b.n	8006764 <main+0x3e0>
		  calculateTemperature();
 8006802:	f7ff fcf1 	bl	80061e8 <calculateTemperature>
		  sizeBuffUSB += sprintf(txtBufUSB + sizeBuffUSB, "Temp: %u ", TemperatureValue);
 8006806:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80068c4 <main+0x540>
 800680a:	f9ba 2000 	ldrsh.w	r2, [sl]
 800680e:	4926      	ldr	r1, [pc, #152]	; (80068a8 <main+0x524>)
 8006810:	ab0b      	add	r3, sp, #44	; 0x2c
 8006812:	1958      	adds	r0, r3, r5
 8006814:	f005 fb8a 	bl	800bf2c <siprintf>
 8006818:	4405      	add	r5, r0
 800681a:	b2ad      	uxth	r5, r5
		  sizeBuffBT += sprintf(txtBufBT + sizeBuffBT,BT_TEMP_SYMBOL "%u", TemperatureValue); //6 Characters
 800681c:	f9ba 2000 	ldrsh.w	r2, [sl]
 8006820:	4922      	ldr	r1, [pc, #136]	; (80068ac <main+0x528>)
 8006822:	ab18      	add	r3, sp, #96	; 0x60
 8006824:	1998      	adds	r0, r3, r6
 8006826:	f005 fb81 	bl	800bf2c <siprintf>
 800682a:	4406      	add	r6, r0
 800682c:	b2b6      	uxth	r6, r6
		  previousMillisTemperature_Display = currentMillis;
 800682e:	4b19      	ldr	r3, [pc, #100]	; (8006894 <main+0x510>)
 8006830:	601c      	str	r4, [r3, #0]
	  if(currentMillis-previousMillisTemperature_Read > CALCULATE_TEMPERATUIRE_SENSOR_TIME){
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <main+0x514>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	1ae3      	subs	r3, r4, r3
 8006838:	2b64      	cmp	r3, #100	; 0x64
 800683a:	d80e      	bhi.n	800685a <main+0x4d6>
		  sizeBuffUSB += sprintf(txtBufUSB + sizeBuffUSB, "\r\n");
 800683c:	a80b      	add	r0, sp, #44	; 0x2c
 800683e:	1942      	adds	r2, r0, r5
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <main+0x52c>)
 8006842:	8819      	ldrh	r1, [r3, #0]
 8006844:	789b      	ldrb	r3, [r3, #2]
 8006846:	5341      	strh	r1, [r0, r5]
 8006848:	7093      	strb	r3, [r2, #2]
 800684a:	1ca9      	adds	r1, r5, #2
		  CDC_Transmit_FS((uint8_t *)txtBufUSB, sizeBuffUSB);
 800684c:	b289      	uxth	r1, r1
 800684e:	f005 f999 	bl	800bb84 <CDC_Transmit_FS>
		  txtBufUSB[50] = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 8006858:	e791      	b.n	800677e <main+0x3fa>
		  HAL_ADC_Start_DMA(&hadc1, &ActualRead, 1);
 800685a:	2201      	movs	r2, #1
 800685c:	4915      	ldr	r1, [pc, #84]	; (80068b4 <main+0x530>)
 800685e:	4803      	ldr	r0, [pc, #12]	; (800686c <main+0x4e8>)
 8006860:	f000 fc46 	bl	80070f0 <HAL_ADC_Start_DMA>
		  previousMillisTemperature_Read = currentMillis;
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <main+0x514>)
 8006866:	601c      	str	r4, [r3, #0]
 8006868:	e787      	b.n	800677a <main+0x3f6>
 800686a:	bf00      	nop
 800686c:	200005a0 	.word	0x200005a0
 8006870:	e000edf0 	.word	0xe000edf0
 8006874:	e0001000 	.word	0xe0001000
 8006878:	20000448 	.word	0x20000448
 800687c:	2000044c 	.word	0x2000044c
 8006880:	0800cba0 	.word	0x0800cba0
 8006884:	0800cbb0 	.word	0x0800cbb0
 8006888:	20000430 	.word	0x20000430
 800688c:	0800cbb4 	.word	0x0800cbb4
 8006890:	20000438 	.word	0x20000438
 8006894:	20000468 	.word	0x20000468
 8006898:	20000460 	.word	0x20000460
 800689c:	200006b0 	.word	0x200006b0
 80068a0:	0800cbd0 	.word	0x0800cbd0
 80068a4:	0800cbe0 	.word	0x0800cbe0
 80068a8:	0800cbe8 	.word	0x0800cbe8
 80068ac:	0800cbf4 	.word	0x0800cbf4
 80068b0:	0800cbf8 	.word	0x0800cbf8
 80068b4:	2000045c 	.word	0x2000045c
 80068b8:	2000043c 	.word	0x2000043c
 80068bc:	40011000 	.word	0x40011000
 80068c0:	20000434 	.word	0x20000434
 80068c4:	20000454 	.word	0x20000454

080068c8 <HAL_GPIO_EXTI_Callback>:
{
 80068c8:	b508      	push	{r3, lr}
    if(GPIO_Pin == Track_Sensor_Pin) // If The INT Source Is EXTI Line1 (Track_Sensor)
 80068ca:	2802      	cmp	r0, #2
 80068cc:	d002      	beq.n	80068d4 <HAL_GPIO_EXTI_Callback+0xc>
    if(GPIO_Pin == RPM_Sensor_Pin) // If The INT Source Is EXTI Line5 (RPM_Sensor)
 80068ce:	2820      	cmp	r0, #32
 80068d0:	d005      	beq.n	80068de <HAL_GPIO_EXTI_Callback+0x16>
}
 80068d2:	bd08      	pop	{r3, pc}
    	deltaTimeInterruptLap(HAL_GetTick());
 80068d4:	f000 fac8 	bl	8006e68 <HAL_GetTick>
 80068d8:	f7ff fbb2 	bl	8006040 <deltaTimeInterruptLap>
    if(GPIO_Pin == RPM_Sensor_Pin) // If The INT Source Is EXTI Line5 (RPM_Sensor)
 80068dc:	e7f9      	b.n	80068d2 <HAL_GPIO_EXTI_Callback+0xa>
    	deltaTimeInterruptRPM(DWT->CYCCNT / (SystemCoreClock / 1000000U));
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80068e0:	6858      	ldr	r0, [r3, #4]
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_GPIO_EXTI_Callback+0x34>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <HAL_GPIO_EXTI_Callback+0x38>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	0c9b      	lsrs	r3, r3, #18
 80068ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80068f2:	f7ff fbf7 	bl	80060e4 <deltaTimeInterruptRPM>
}
 80068f6:	e7ec      	b.n	80068d2 <HAL_GPIO_EXTI_Callback+0xa>
 80068f8:	e0001000 	.word	0xe0001000
 80068fc:	20000000 	.word	0x20000000
 8006900:	431bde83 	.word	0x431bde83

08006904 <HAL_ADC_ConvCpltCallback>:
{
 8006904:	b508      	push	{r3, lr}
	averageRead();
 8006906:	f7ff fc5d 	bl	80061c4 <averageRead>
}
 800690a:	bd08      	pop	{r3, pc}

0800690c <Error_Handler>:
 800690c:	b672      	cpsid	i
  while (1)
 800690e:	e7fe      	b.n	800690e <Error_Handler+0x2>

08006910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006910:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006912:	4b0e      	ldr	r3, [pc, #56]	; (800694c <HAL_MspInit+0x3c>)
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	619a      	str	r2, [r3, #24]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	f002 0201 	and.w	r2, r2, #1
 8006922:	9200      	str	r2, [sp, #0]
 8006924:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800692c:	61da      	str	r2, [r3, #28]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006938:	4a05      	ldr	r2, [pc, #20]	; (8006950 <HAL_MspInit+0x40>)
 800693a:	6853      	ldr	r3, [r2, #4]
 800693c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006946:	b002      	add	sp, #8
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
 8006950:	40010000 	.word	0x40010000

08006954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006954:	b530      	push	{r4, r5, lr}
 8006956:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006958:	2300      	movs	r3, #0
 800695a:	9302      	str	r3, [sp, #8]
 800695c:	9303      	str	r3, [sp, #12]
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8006962:	6802      	ldr	r2, [r0, #0]
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <HAL_ADC_MspInit+0x88>)
 8006966:	429a      	cmp	r2, r3
 8006968:	d001      	beq.n	800696e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800696a:	b007      	add	sp, #28
 800696c:	bd30      	pop	{r4, r5, pc}
 800696e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006970:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697a:	619a      	str	r2, [r3, #24]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006982:	9200      	str	r2, [sp, #0]
 8006984:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	f042 0204 	orr.w	r2, r2, #4
 800698c:	619a      	str	r2, [r3, #24]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = H2O_NTC__Pin;
 8006998:	2580      	movs	r5, #128	; 0x80
 800699a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800699c:	2303      	movs	r3, #3
 800699e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(H2O_NTC__GPIO_Port, &GPIO_InitStruct);
 80069a0:	a902      	add	r1, sp, #8
 80069a2:	480f      	ldr	r0, [pc, #60]	; (80069e0 <HAL_ADC_MspInit+0x8c>)
 80069a4:	f000 ff6c 	bl	8007880 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80069a8:	480e      	ldr	r0, [pc, #56]	; (80069e4 <HAL_ADC_MspInit+0x90>)
 80069aa:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <HAL_ADC_MspInit+0x94>)
 80069ac:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069ae:	2300      	movs	r3, #0
 80069b0:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80069b2:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80069b4:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80069b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ba:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80069bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069c0:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80069c2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80069c4:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80069c6:	f000 fdcf 	bl	8007568 <HAL_DMA_Init>
 80069ca:	b918      	cbnz	r0, 80069d4 <HAL_ADC_MspInit+0x80>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_ADC_MspInit+0x90>)
 80069ce:	6223      	str	r3, [r4, #32]
 80069d0:	625c      	str	r4, [r3, #36]	; 0x24
}
 80069d2:	e7ca      	b.n	800696a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80069d4:	f7ff ff9a 	bl	800690c <Error_Handler>
 80069d8:	e7f8      	b.n	80069cc <HAL_ADC_MspInit+0x78>
 80069da:	bf00      	nop
 80069dc:	40012400 	.word	0x40012400
 80069e0:	40010800 	.word	0x40010800
 80069e4:	20000658 	.word	0x20000658
 80069e8:	40020008 	.word	0x40020008

080069ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80069ec:	b510      	push	{r4, lr}
 80069ee:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f0:	2300      	movs	r3, #0
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80069fa:	6802      	ldr	r2, [r0, #0]
 80069fc:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <HAL_I2C_MspInit+0x58>)
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d001      	beq.n	8006a06 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006a02:	b006      	add	sp, #24
 8006a04:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a06:	4c10      	ldr	r4, [pc, #64]	; (8006a48 <HAL_I2C_MspInit+0x5c>)
 8006a08:	69a3      	ldr	r3, [r4, #24]
 8006a0a:	f043 0308 	orr.w	r3, r3, #8
 8006a0e:	61a3      	str	r3, [r4, #24]
 8006a10:	69a3      	ldr	r3, [r4, #24]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006a1a:	23c0      	movs	r3, #192	; 0xc0
 8006a1c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a1e:	2312      	movs	r3, #18
 8006a20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a22:	2303      	movs	r3, #3
 8006a24:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a26:	a902      	add	r1, sp, #8
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <HAL_I2C_MspInit+0x60>)
 8006a2a:	f000 ff29 	bl	8007880 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a2e:	69e3      	ldr	r3, [r4, #28]
 8006a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a34:	61e3      	str	r3, [r4, #28]
 8006a36:	69e3      	ldr	r3, [r4, #28]
 8006a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	9b01      	ldr	r3, [sp, #4]
}
 8006a40:	e7df      	b.n	8006a02 <HAL_I2C_MspInit+0x16>
 8006a42:	bf00      	nop
 8006a44:	40005400 	.word	0x40005400
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40010c00 	.word	0x40010c00

08006a50 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8006a50:	6802      	ldr	r2, [r0, #0]
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <HAL_RTC_MspInit+0x34>)
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d000      	beq.n	8006a5a <HAL_RTC_MspInit+0xa>
 8006a58:	4770      	bx	lr
{
 8006a5a:	b500      	push	{lr}
 8006a5c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8006a5e:	f002 f90b 	bl	8008c78 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <HAL_RTC_MspInit+0x38>)
 8006a64:	69da      	ldr	r2, [r3, #28]
 8006a66:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RTC_MspInit+0x3c>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006a7c:	b003      	add	sp, #12
 8006a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a82:	bf00      	nop
 8006a84:	40002800 	.word	0x40002800
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	4242043c 	.word	0x4242043c

08006a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006a90:	b510      	push	{r4, lr}
 8006a92:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a94:	2300      	movs	r3, #0
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI2)
 8006a9e:	6802      	ldr	r2, [r0, #0]
 8006aa0:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <HAL_SPI_MspInit+0x70>)
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d001      	beq.n	8006aaa <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006aa6:	b006      	add	sp, #24
 8006aa8:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006aaa:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab4:	61da      	str	r2, [r3, #28]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006abc:	9200      	str	r2, [sp, #0]
 8006abe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	f042 0208 	orr.w	r2, r2, #8
 8006ac6:	619a      	str	r2, [r3, #24]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006ad2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8006ad6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006adc:	2303      	movs	r3, #3
 8006ade:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ae0:	4c08      	ldr	r4, [pc, #32]	; (8006b04 <HAL_SPI_MspInit+0x74>)
 8006ae2:	a902      	add	r1, sp, #8
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fecb 	bl	8007880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006aee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006af0:	2300      	movs	r3, #0
 8006af2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006af6:	a902      	add	r1, sp, #8
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fec1 	bl	8007880 <HAL_GPIO_Init>
}
 8006afe:	e7d2      	b.n	8006aa6 <HAL_SPI_MspInit+0x16>
 8006b00:	40003800 	.word	0x40003800
 8006b04:	40010c00 	.word	0x40010c00

08006b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9306      	str	r3, [sp, #24]
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	9308      	str	r3, [sp, #32]
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8006b16:	6803      	ldr	r3, [r0, #0]
 8006b18:	4a5d      	ldr	r2, [pc, #372]	; (8006c90 <HAL_UART_MspInit+0x188>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_UART_MspInit+0x2a>
 8006b1e:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006b20:	4a5c      	ldr	r2, [pc, #368]	; (8006c94 <HAL_UART_MspInit+0x18c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02f      	beq.n	8006b86 <HAL_UART_MspInit+0x7e>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8006b26:	4a5c      	ldr	r2, [pc, #368]	; (8006c98 <HAL_UART_MspInit+0x190>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	f000 8086 	beq.w	8006c3a <HAL_UART_MspInit+0x132>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b2e:	b00a      	add	sp, #40	; 0x28
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b32:	4b5a      	ldr	r3, [pc, #360]	; (8006c9c <HAL_UART_MspInit+0x194>)
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b3a:	619a      	str	r2, [r3, #24]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006b42:	9200      	str	r2, [sp, #0]
 8006b44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	f042 0204 	orr.w	r2, r2, #4
 8006b4c:	619a      	str	r2, [r3, #24]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b5c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b62:	2303      	movs	r3, #3
 8006b64:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b66:	4c4e      	ldr	r4, [pc, #312]	; (8006ca0 <HAL_UART_MspInit+0x198>)
 8006b68:	a906      	add	r1, sp, #24
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fe88 	bl	8007880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b74:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b76:	2300      	movs	r3, #0
 8006b78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b7c:	a906      	add	r1, sp, #24
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 fe7e 	bl	8007880 <HAL_GPIO_Init>
 8006b84:	e7d3      	b.n	8006b2e <HAL_UART_MspInit+0x26>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b86:	4b45      	ldr	r3, [pc, #276]	; (8006c9c <HAL_UART_MspInit+0x194>)
 8006b88:	69da      	ldr	r2, [r3, #28]
 8006b8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006b8e:	61da      	str	r2, [r3, #28]
 8006b90:	69da      	ldr	r2, [r3, #28]
 8006b92:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006b96:	9202      	str	r2, [sp, #8]
 8006b98:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	f042 0204 	orr.w	r2, r2, #4
 8006ba0:	619a      	str	r2, [r3, #24]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	9303      	str	r3, [sp, #12]
 8006baa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006bac:	2304      	movs	r3, #4
 8006bae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb8:	4e39      	ldr	r6, [pc, #228]	; (8006ca0 <HAL_UART_MspInit+0x198>)
 8006bba:	a906      	add	r1, sp, #24
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 fe5f 	bl	8007880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bca:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bcc:	a906      	add	r1, sp, #24
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f000 fe56 	bl	8007880 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006bd4:	4833      	ldr	r0, [pc, #204]	; (8006ca4 <HAL_UART_MspInit+0x19c>)
 8006bd6:	4b34      	ldr	r3, [pc, #208]	; (8006ca8 <HAL_UART_MspInit+0x1a0>)
 8006bd8:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bda:	2310      	movs	r3, #16
 8006bdc:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bde:	6085      	str	r5, [r0, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006be4:	6105      	str	r5, [r0, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006be6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006be8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006bea:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006bec:	f000 fcbc 	bl	8007568 <HAL_DMA_Init>
 8006bf0:	b9e8      	cbnz	r0, 8006c2e <HAL_UART_MspInit+0x126>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006bf2:	4b2c      	ldr	r3, [pc, #176]	; (8006ca4 <HAL_UART_MspInit+0x19c>)
 8006bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8006bf6:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006bf8:	482c      	ldr	r0, [pc, #176]	; (8006cac <HAL_UART_MspInit+0x1a4>)
 8006bfa:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <HAL_UART_MspInit+0x1a8>)
 8006bfc:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c02:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c04:	2280      	movs	r2, #128	; 0x80
 8006c06:	60c2      	str	r2, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c08:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c0a:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006c0c:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c0e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006c10:	f000 fcaa 	bl	8007568 <HAL_DMA_Init>
 8006c14:	b970      	cbnz	r0, 8006c34 <HAL_UART_MspInit+0x12c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006c16:	4b25      	ldr	r3, [pc, #148]	; (8006cac <HAL_UART_MspInit+0x1a4>)
 8006c18:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c1a:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4611      	mov	r1, r2
 8006c20:	2026      	movs	r0, #38	; 0x26
 8006c22:	f000 fc4b 	bl	80074bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006c26:	2026      	movs	r0, #38	; 0x26
 8006c28:	f000 fc7a 	bl	8007520 <HAL_NVIC_EnableIRQ>
 8006c2c:	e77f      	b.n	8006b2e <HAL_UART_MspInit+0x26>
      Error_Handler();
 8006c2e:	f7ff fe6d 	bl	800690c <Error_Handler>
 8006c32:	e7de      	b.n	8006bf2 <HAL_UART_MspInit+0xea>
      Error_Handler();
 8006c34:	f7ff fe6a 	bl	800690c <Error_Handler>
 8006c38:	e7ed      	b.n	8006c16 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c3a:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <HAL_UART_MspInit+0x194>)
 8006c3c:	69da      	ldr	r2, [r3, #28]
 8006c3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c42:	61da      	str	r2, [r3, #28]
 8006c44:	69da      	ldr	r2, [r3, #28]
 8006c46:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006c4a:	9204      	str	r2, [sp, #16]
 8006c4c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	f042 0208 	orr.w	r2, r2, #8
 8006c54:	619a      	str	r2, [r3, #24]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c64:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c66:	2302      	movs	r3, #2
 8006c68:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c6e:	4c11      	ldr	r4, [pc, #68]	; (8006cb4 <HAL_UART_MspInit+0x1ac>)
 8006c70:	a906      	add	r1, sp, #24
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fe04 	bl	8007880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c84:	a906      	add	r1, sp, #24
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 fdfa 	bl	8007880 <HAL_GPIO_Init>
}
 8006c8c:	e74f      	b.n	8006b2e <HAL_UART_MspInit+0x26>
 8006c8e:	bf00      	nop
 8006c90:	40013800 	.word	0x40013800
 8006c94:	40004400 	.word	0x40004400
 8006c98:	40004800 	.word	0x40004800
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40010800 	.word	0x40010800
 8006ca4:	200005d0 	.word	0x200005d0
 8006ca8:	40020080 	.word	0x40020080
 8006cac:	2000046c 	.word	0x2000046c
 8006cb0:	4002006c 	.word	0x4002006c
 8006cb4:	40010c00 	.word	0x40010c00

08006cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006cba:	f002 fb0f 	bl	80092dc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006cbe:	e7fe      	b.n	8006cbe <NMI_Handler+0x6>

08006cc0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006cc0:	e7fe      	b.n	8006cc0 <HardFault_Handler>

08006cc2 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006cc2:	e7fe      	b.n	8006cc2 <MemManage_Handler>

08006cc4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006cc4:	e7fe      	b.n	8006cc4 <BusFault_Handler>

08006cc6 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006cc6:	e7fe      	b.n	8006cc6 <UsageFault_Handler>

08006cc8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006cc8:	4770      	bx	lr

08006cca <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cca:	4770      	bx	lr

08006ccc <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ccc:	4770      	bx	lr

08006cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cce:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006cd0:	f000 f8be 	bl	8006e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cd4:	bd08      	pop	{r3, pc}

08006cd6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006cd6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006cd8:	2002      	movs	r0, #2
 8006cda:	f000 fef1 	bl	8007ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006cde:	bd08      	pop	{r3, pc}

08006ce0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ce0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ce2:	4802      	ldr	r0, [pc, #8]	; (8006cec <DMA1_Channel1_IRQHandler+0xc>)
 8006ce4:	f000 fd2c 	bl	8007740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006ce8:	bd08      	pop	{r3, pc}
 8006cea:	bf00      	nop
 8006cec:	20000658 	.word	0x20000658

08006cf0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006cf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006cf2:	4802      	ldr	r0, [pc, #8]	; (8006cfc <DMA1_Channel6_IRQHandler+0xc>)
 8006cf4:	f000 fd24 	bl	8007740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006cf8:	bd08      	pop	{r3, pc}
 8006cfa:	bf00      	nop
 8006cfc:	2000046c 	.word	0x2000046c

08006d00 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006d00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006d02:	4802      	ldr	r0, [pc, #8]	; (8006d0c <DMA1_Channel7_IRQHandler+0xc>)
 8006d04:	f000 fd1c 	bl	8007740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006d08:	bd08      	pop	{r3, pc}
 8006d0a:	bf00      	nop
 8006d0c:	200005d0 	.word	0x200005d0

08006d10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006d10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006d12:	4802      	ldr	r0, [pc, #8]	; (8006d1c <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8006d14:	f001 f852 	bl	8007dbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006d18:	bd08      	pop	{r3, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000138c 	.word	0x2000138c

08006d20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006d20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006d22:	2020      	movs	r0, #32
 8006d24:	f000 fecc 	bl	8007ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006d28:	bd08      	pop	{r3, pc}
	...

08006d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006d2e:	4802      	ldr	r0, [pc, #8]	; (8006d38 <USART2_IRQHandler+0xc>)
 8006d30:	f002 ffee 	bl	8009d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006d34:	bd08      	pop	{r3, pc}
 8006d36:	bf00      	nop
 8006d38:	200006b0 	.word	0x200006b0

08006d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d3c:	b508      	push	{r3, lr}
 8006d3e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d40:	4a0c      	ldr	r2, [pc, #48]	; (8006d74 <_sbrk+0x38>)
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	b152      	cbz	r2, 8006d5c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d46:	4a0b      	ldr	r2, [pc, #44]	; (8006d74 <_sbrk+0x38>)
 8006d48:	6810      	ldr	r0, [r2, #0]
 8006d4a:	4403      	add	r3, r0
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <_sbrk+0x3c>)
 8006d4e:	490b      	ldr	r1, [pc, #44]	; (8006d7c <_sbrk+0x40>)
 8006d50:	1a52      	subs	r2, r2, r1
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d806      	bhi.n	8006d64 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <_sbrk+0x38>)
 8006d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006d5a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8006d5c:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <_sbrk+0x38>)
 8006d5e:	4908      	ldr	r1, [pc, #32]	; (8006d80 <_sbrk+0x44>)
 8006d60:	6011      	str	r1, [r2, #0]
 8006d62:	e7f0      	b.n	8006d46 <_sbrk+0xa>
    errno = ENOMEM;
 8006d64:	f005 f8b8 	bl	800bed8 <__errno>
 8006d68:	230c      	movs	r3, #12
 8006d6a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e7f3      	b.n	8006d5a <_sbrk+0x1e>
 8006d72:	bf00      	nop
 8006d74:	20000200 	.word	0x20000200
 8006d78:	20004ff0 	.word	0x20004ff0
 8006d7c:	00000400 	.word	0x00000400
 8006d80:	20001688 	.word	0x20001688

08006d84 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8006d84:	4b01      	ldr	r3, [pc, #4]	; (8006d8c <SystemInit+0x8>)
 8006d86:	4a02      	ldr	r2, [pc, #8]	; (8006d90 <SystemInit+0xc>)
 8006d88:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d8a:	4770      	bx	lr
 8006d8c:	e000ed00 	.word	0xe000ed00
 8006d90:	08005000 	.word	0x08005000

08006d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006d94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006d96:	e003      	b.n	8006da0 <LoopCopyDataInit>

08006d98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006d9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006d9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006d9e:	3104      	adds	r1, #4

08006da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006da0:	480a      	ldr	r0, [pc, #40]	; (8006dcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006da4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006da6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006da8:	d3f6      	bcc.n	8006d98 <CopyDataInit>
  ldr r2, =_sbss
 8006daa:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006dac:	e002      	b.n	8006db4 <LoopFillZerobss>

08006dae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006dae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006db0:	f842 3b04 	str.w	r3, [r2], #4

08006db4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006db4:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006db6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006db8:	d3f9      	bcc.n	8006dae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006dba:	f7ff ffe3 	bl	8006d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dbe:	f005 f891 	bl	800bee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006dc2:	f7ff fadf 	bl	8006384 <main>
  bx lr
 8006dc6:	4770      	bx	lr
  ldr r3, =_sidata
 8006dc8:	0800ccac 	.word	0x0800ccac
  ldr r0, =_sdata
 8006dcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006dd0:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8006dd4:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8006dd8:	20001688 	.word	0x20001688

08006ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ddc:	e7fe      	b.n	8006ddc <ADC1_2_IRQHandler>
	...

08006de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <HAL_InitTick+0x40>)
 8006de6:	7818      	ldrb	r0, [r3, #0]
 8006de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dec:	fbb3 f3f0 	udiv	r3, r3, r0
 8006df0:	4a0c      	ldr	r2, [pc, #48]	; (8006e24 <HAL_InitTick+0x44>)
 8006df2:	6810      	ldr	r0, [r2, #0]
 8006df4:	fbb0 f0f3 	udiv	r0, r0, r3
 8006df8:	f000 fba0 	bl	800753c <HAL_SYSTICK_Config>
 8006dfc:	b968      	cbnz	r0, 8006e1a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006dfe:	2c0f      	cmp	r4, #15
 8006e00:	d901      	bls.n	8006e06 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8006e02:	2001      	movs	r0, #1
 8006e04:	e00a      	b.n	8006e1c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e06:	2200      	movs	r2, #0
 8006e08:	4621      	mov	r1, r4
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0e:	f000 fb55 	bl	80074bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <HAL_InitTick+0x48>)
 8006e14:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e16:	2000      	movs	r0, #0
 8006e18:	e000      	b.n	8006e1c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
}
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000004 	.word	0x20000004
 8006e24:	20000000 	.word	0x20000000
 8006e28:	20000008 	.word	0x20000008

08006e2c <HAL_Init>:
{
 8006e2c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e2e:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <HAL_Init+0x20>)
 8006e30:	6813      	ldr	r3, [r2, #0]
 8006e32:	f043 0310 	orr.w	r3, r3, #16
 8006e36:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e38:	2003      	movs	r0, #3
 8006e3a:	f000 fb2d 	bl	8007498 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f7ff ffce 	bl	8006de0 <HAL_InitTick>
  HAL_MspInit();
 8006e44:	f7ff fd64 	bl	8006910 <HAL_MspInit>
}
 8006e48:	2000      	movs	r0, #0
 8006e4a:	bd08      	pop	{r3, pc}
 8006e4c:	40022000 	.word	0x40022000

08006e50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006e50:	4a03      	ldr	r2, [pc, #12]	; (8006e60 <HAL_IncTick+0x10>)
 8006e52:	6811      	ldr	r1, [r2, #0]
 8006e54:	4b03      	ldr	r3, [pc, #12]	; (8006e64 <HAL_IncTick+0x14>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	440b      	add	r3, r1
 8006e5a:	6013      	str	r3, [r2, #0]
}
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	200006f4 	.word	0x200006f4
 8006e64:	20000004 	.word	0x20000004

08006e68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006e68:	4b01      	ldr	r3, [pc, #4]	; (8006e70 <HAL_GetTick+0x8>)
 8006e6a:	6818      	ldr	r0, [r3, #0]
}
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	200006f4 	.word	0x200006f4

08006e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006e78:	f7ff fff6 	bl	8006e68 <HAL_GetTick>
 8006e7c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e7e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006e82:	d002      	beq.n	8006e8a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e84:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <HAL_Delay+0x24>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e8a:	f7ff ffed 	bl	8006e68 <HAL_GetTick>
 8006e8e:	1b40      	subs	r0, r0, r5
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d3fa      	bcc.n	8006e8a <HAL_Delay+0x16>
  {
  }
}
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	20000004 	.word	0x20000004

08006e9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ea2:	f012 0f50 	tst.w	r2, #80	; 0x50
 8006ea6:	d11e      	bne.n	8006ee6 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	6892      	ldr	r2, [r2, #8]
 8006eb4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8006eb8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8006ebc:	d003      	beq.n	8006ec6 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff fd20 	bl	8006904 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006ec4:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ec6:	7b1a      	ldrb	r2, [r3, #12]
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	d1f8      	bne.n	8006ebe <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8006eda:	d1f0      	bne.n	8006ebe <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ee4:	e7eb      	b.n	8006ebe <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	4798      	blx	r3
}
 8006eec:	e7ea      	b.n	8006ec4 <ADC_DMAConvCplt+0x28>

08006eee <HAL_ADC_ConvHalfCpltCallback>:
}
 8006eee:	4770      	bx	lr

08006ef0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ef0:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ef2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006ef4:	f7ff fffb 	bl	8006eee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ef8:	bd08      	pop	{r3, pc}

08006efa <HAL_ADC_ErrorCallback>:
}
 8006efa:	4770      	bx	lr

08006efc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006efc:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006efe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f06:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006f08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006f0a:	f043 0304 	orr.w	r3, r3, #4
 8006f0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f10:	f7ff fff3 	bl	8006efa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f14:	bd08      	pop	{r3, pc}
	...

08006f18 <HAL_ADC_ConfigChannel>:
{ 
 8006f18:	b430      	push	{r4, r5}
 8006f1a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006f20:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8006f24:	2a01      	cmp	r2, #1
 8006f26:	f000 808f 	beq.w	8007048 <HAL_ADC_ConfigChannel+0x130>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8006f32:	684a      	ldr	r2, [r1, #4]
 8006f34:	2a06      	cmp	r2, #6
 8006f36:	d829      	bhi.n	8006f8c <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006f38:	6805      	ldr	r5, [r0, #0]
 8006f3a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006f3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f40:	3a05      	subs	r2, #5
 8006f42:	241f      	movs	r4, #31
 8006f44:	4094      	lsls	r4, r2
 8006f46:	ea20 0004 	bic.w	r0, r0, r4
 8006f4a:	680c      	ldr	r4, [r1, #0]
 8006f4c:	fa04 f202 	lsl.w	r2, r4, r2
 8006f50:	4302      	orrs	r2, r0
 8006f52:	636a      	str	r2, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006f54:	680a      	ldr	r2, [r1, #0]
 8006f56:	2a09      	cmp	r2, #9
 8006f58:	d938      	bls.n	8006fcc <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006f5a:	681d      	ldr	r5, [r3, #0]
 8006f5c:	68e8      	ldr	r0, [r5, #12]
 8006f5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006f62:	3a1e      	subs	r2, #30
 8006f64:	2407      	movs	r4, #7
 8006f66:	4094      	lsls	r4, r2
 8006f68:	ea20 0004 	bic.w	r0, r0, r4
 8006f6c:	688c      	ldr	r4, [r1, #8]
 8006f6e:	fa04 f202 	lsl.w	r2, r4, r2
 8006f72:	4302      	orrs	r2, r0
 8006f74:	60ea      	str	r2, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006f76:	680a      	ldr	r2, [r1, #0]
 8006f78:	3a10      	subs	r2, #16
 8006f7a:	2a01      	cmp	r2, #1
 8006f7c:	d934      	bls.n	8006fe8 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f7e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006f86:	b002      	add	sp, #8
 8006f88:	bc30      	pop	{r4, r5}
 8006f8a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8006f8c:	2a0c      	cmp	r2, #12
 8006f8e:	d80e      	bhi.n	8006fae <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006f90:	6805      	ldr	r5, [r0, #0]
 8006f92:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006f94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f98:	3a23      	subs	r2, #35	; 0x23
 8006f9a:	241f      	movs	r4, #31
 8006f9c:	4094      	lsls	r4, r2
 8006f9e:	ea20 0004 	bic.w	r0, r0, r4
 8006fa2:	680c      	ldr	r4, [r1, #0]
 8006fa4:	fa04 f202 	lsl.w	r2, r4, r2
 8006fa8:	4302      	orrs	r2, r0
 8006faa:	632a      	str	r2, [r5, #48]	; 0x30
 8006fac:	e7d2      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006fae:	6805      	ldr	r5, [r0, #0]
 8006fb0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006fb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006fb6:	3a41      	subs	r2, #65	; 0x41
 8006fb8:	241f      	movs	r4, #31
 8006fba:	4094      	lsls	r4, r2
 8006fbc:	ea20 0004 	bic.w	r0, r0, r4
 8006fc0:	680c      	ldr	r4, [r1, #0]
 8006fc2:	fa04 f202 	lsl.w	r2, r4, r2
 8006fc6:	4302      	orrs	r2, r0
 8006fc8:	62ea      	str	r2, [r5, #44]	; 0x2c
 8006fca:	e7c3      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006fcc:	681d      	ldr	r5, [r3, #0]
 8006fce:	6928      	ldr	r0, [r5, #16]
 8006fd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006fd4:	2407      	movs	r4, #7
 8006fd6:	4094      	lsls	r4, r2
 8006fd8:	ea20 0004 	bic.w	r0, r0, r4
 8006fdc:	688c      	ldr	r4, [r1, #8]
 8006fde:	fa04 f202 	lsl.w	r2, r4, r2
 8006fe2:	4302      	orrs	r2, r0
 8006fe4:	612a      	str	r2, [r5, #16]
 8006fe6:	e7c6      	b.n	8006f76 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <HAL_ADC_ConfigChannel+0x134>)
 8006fec:	4290      	cmp	r0, r2
 8006fee:	d005      	beq.n	8006ffc <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff2:	f042 0220 	orr.w	r2, r2, #32
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7c1      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006ffc:	6892      	ldr	r2, [r2, #8]
 8006ffe:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8007002:	d11d      	bne.n	8007040 <HAL_ADC_ConfigChannel+0x128>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007004:	4811      	ldr	r0, [pc, #68]	; (800704c <HAL_ADC_ConfigChannel+0x134>)
 8007006:	6882      	ldr	r2, [r0, #8]
 8007008:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800700c:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800700e:	680a      	ldr	r2, [r1, #0]
 8007010:	2a10      	cmp	r2, #16
 8007012:	d001      	beq.n	8007018 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007014:	2000      	movs	r0, #0
 8007016:	e7b3      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007018:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <HAL_ADC_ConfigChannel+0x138>)
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	490d      	ldr	r1, [pc, #52]	; (8007054 <HAL_ADC_ConfigChannel+0x13c>)
 800701e:	fba1 1202 	umull	r1, r2, r1, r2
 8007022:	0c92      	lsrs	r2, r2, #18
 8007024:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007028:	0052      	lsls	r2, r2, #1
 800702a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800702c:	9a01      	ldr	r2, [sp, #4]
 800702e:	b14a      	cbz	r2, 8007044 <HAL_ADC_ConfigChannel+0x12c>
            wait_loop_index--;
 8007030:	9a01      	ldr	r2, [sp, #4]
 8007032:	3a01      	subs	r2, #1
 8007034:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8007036:	9a01      	ldr	r2, [sp, #4]
 8007038:	2a00      	cmp	r2, #0
 800703a:	d1f9      	bne.n	8007030 <HAL_ADC_ConfigChannel+0x118>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800703c:	2000      	movs	r0, #0
 800703e:	e79f      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x68>
 8007040:	2000      	movs	r0, #0
 8007042:	e79d      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x68>
 8007044:	2000      	movs	r0, #0
 8007046:	e79b      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8007048:	2002      	movs	r0, #2
 800704a:	e79c      	b.n	8006f86 <HAL_ADC_ConfigChannel+0x6e>
 800704c:	40012400 	.word	0x40012400
 8007050:	20000000 	.word	0x20000000
 8007054:	431bde83 	.word	0x431bde83

08007058 <ADC_Enable>:
{
 8007058:	b530      	push	{r4, r5, lr}
 800705a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007060:	6803      	ldr	r3, [r0, #0]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	f012 0f01 	tst.w	r2, #1
 8007068:	d13b      	bne.n	80070e2 <ADC_Enable+0x8a>
 800706a:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007074:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <ADC_Enable+0x90>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1c      	ldr	r2, [pc, #112]	; (80070ec <ADC_Enable+0x94>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	0c9b      	lsrs	r3, r3, #18
 8007080:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8007082:	9b01      	ldr	r3, [sp, #4]
 8007084:	b12b      	cbz	r3, 8007092 <ADC_Enable+0x3a>
      wait_loop_index--;
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	3b01      	subs	r3, #1
 800708a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f9      	bne.n	8007086 <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 8007092:	f7ff fee9 	bl	8006e68 <HAL_GetTick>
 8007096:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f013 0f01 	tst.w	r3, #1
 80070a0:	d006      	beq.n	80070b0 <ADC_Enable+0x58>
  return HAL_OK;
 80070a2:	2000      	movs	r0, #0
 80070a4:	e01e      	b.n	80070e4 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f013 0f01 	tst.w	r3, #1
 80070ae:	d116      	bne.n	80070de <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80070b0:	f7ff feda 	bl	8006e68 <HAL_GetTick>
 80070b4:	1b43      	subs	r3, r0, r5
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d9f5      	bls.n	80070a6 <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f013 0f01 	tst.w	r3, #1
 80070c2:	d1f0      	bne.n	80070a6 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070c6:	f043 0310 	orr.w	r3, r3, #16
 80070ca:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80070d4:	2300      	movs	r3, #0
 80070d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 80070da:	2001      	movs	r0, #1
 80070dc:	e002      	b.n	80070e4 <ADC_Enable+0x8c>
  return HAL_OK;
 80070de:	2000      	movs	r0, #0
 80070e0:	e000      	b.n	80070e4 <ADC_Enable+0x8c>
 80070e2:	2000      	movs	r0, #0
}
 80070e4:	b003      	add	sp, #12
 80070e6:	bd30      	pop	{r4, r5, pc}
 80070e8:	20000000 	.word	0x20000000
 80070ec:	431bde83 	.word	0x431bde83

080070f0 <HAL_ADC_Start_DMA>:
{
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	4604      	mov	r4, r0
 80070f4:	460d      	mov	r5, r1
 80070f6:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80070f8:	6803      	ldr	r3, [r0, #0]
 80070fa:	4942      	ldr	r1, [pc, #264]	; (8007204 <HAL_ADC_Start_DMA+0x114>)
 80070fc:	428b      	cmp	r3, r1
 80070fe:	d05c      	beq.n	80071ba <HAL_ADC_Start_DMA+0xca>
 8007100:	4a41      	ldr	r2, [pc, #260]	; (8007208 <HAL_ADC_Start_DMA+0x118>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d059      	beq.n	80071ba <HAL_ADC_Start_DMA+0xca>
    __HAL_LOCK(hadc);
 8007106:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800710a:	2b01      	cmp	r3, #1
 800710c:	d077      	beq.n	80071fe <HAL_ADC_Start_DMA+0x10e>
 800710e:	2301      	movs	r3, #1
 8007110:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8007114:	4620      	mov	r0, r4
 8007116:	f7ff ff9f 	bl	8007058 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800711a:	4607      	mov	r7, r0
 800711c:	2800      	cmp	r0, #0
 800711e:	d169      	bne.n	80071f4 <HAL_ADC_Start_DMA+0x104>
      ADC_STATE_CLR_SET(hadc->State,
 8007120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	4b35      	ldr	r3, [pc, #212]	; (8007208 <HAL_ADC_Start_DMA+0x118>)
 8007134:	429a      	cmp	r2, r3
 8007136:	d047      	beq.n	80071c8 <HAL_ADC_Start_DMA+0xd8>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800713a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800713e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007140:	6853      	ldr	r3, [r2, #4]
 8007142:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007146:	d005      	beq.n	8007154 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007148:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800714a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800714e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007152:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007156:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800715a:	bf1a      	itte	ne
 800715c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 800715e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8007162:	2300      	moveq	r3, #0
 8007164:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8007166:	2300      	movs	r3, #0
 8007168:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800716c:	6a23      	ldr	r3, [r4, #32]
 800716e:	4a27      	ldr	r2, [pc, #156]	; (800720c <HAL_ADC_Start_DMA+0x11c>)
 8007170:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007172:	6a23      	ldr	r3, [r4, #32]
 8007174:	4a26      	ldr	r2, [pc, #152]	; (8007210 <HAL_ADC_Start_DMA+0x120>)
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007178:	6a23      	ldr	r3, [r4, #32]
 800717a:	4a26      	ldr	r2, [pc, #152]	; (8007214 <HAL_ADC_Start_DMA+0x124>)
 800717c:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f06f 0202 	mvn.w	r2, #2
 8007184:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	6893      	ldr	r3, [r2, #8]
 800718a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718e:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007190:	6821      	ldr	r1, [r4, #0]
 8007192:	4633      	mov	r3, r6
 8007194:	462a      	mov	r2, r5
 8007196:	314c      	adds	r1, #76	; 0x4c
 8007198:	6a20      	ldr	r0, [r4, #32]
 800719a:	f000 fa1b 	bl	80075d4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80071a6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	bf0c      	ite	eq
 80071ae:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80071b2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	e01f      	b.n	80071fa <HAL_ADC_Start_DMA+0x10a>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80071ba:	4b12      	ldr	r3, [pc, #72]	; (8007204 <HAL_ADC_Start_DMA+0x114>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80071c2:	d0a0      	beq.n	8007106 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80071c4:	2701      	movs	r7, #1
 80071c6:	e018      	b.n	80071fa <HAL_ADC_Start_DMA+0x10a>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80071c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80071d2:	d0b1      	beq.n	8007138 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80071d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071da:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_ADC_Start_DMA+0x114>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80071e4:	d0b6      	beq.n	8007154 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80071e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80071ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071f2:	e7af      	b.n	8007154 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 80071f4:	2300      	movs	r3, #0
 80071f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80071fa:	4638      	mov	r0, r7
 80071fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80071fe:	2702      	movs	r7, #2
 8007200:	e7fb      	b.n	80071fa <HAL_ADC_Start_DMA+0x10a>
 8007202:	bf00      	nop
 8007204:	40012400 	.word	0x40012400
 8007208:	40012800 	.word	0x40012800
 800720c:	08006e9d 	.word	0x08006e9d
 8007210:	08006ef1 	.word	0x08006ef1
 8007214:	08006efd 	.word	0x08006efd

08007218 <ADC_ConversionStop_Disable>:
{
 8007218:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800721a:	6803      	ldr	r3, [r0, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	f012 0f01 	tst.w	r2, #1
 8007222:	d101      	bne.n	8007228 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8007224:	2000      	movs	r0, #0
}
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007232:	f7ff fe19 	bl	8006e68 <HAL_GetTick>
 8007236:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f013 0f01 	tst.w	r3, #1
 8007240:	d106      	bne.n	8007250 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8007242:	2000      	movs	r0, #0
 8007244:	e7ef      	b.n	8007226 <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f013 0f01 	tst.w	r3, #1
 800724e:	d013      	beq.n	8007278 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007250:	f7ff fe0a 	bl	8006e68 <HAL_GetTick>
 8007254:	1b43      	subs	r3, r0, r5
 8007256:	2b02      	cmp	r3, #2
 8007258:	d9f5      	bls.n	8007246 <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f013 0f01 	tst.w	r3, #1
 8007262:	d0f0      	beq.n	8007246 <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007266:	f043 0310 	orr.w	r3, r3, #16
 800726a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800726c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8007274:	2001      	movs	r0, #1
 8007276:	e7d6      	b.n	8007226 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8007278:	2000      	movs	r0, #0
 800727a:	e7d4      	b.n	8007226 <ADC_ConversionStop_Disable+0xe>

0800727c <HAL_ADC_Init>:
  if(hadc == NULL)
 800727c:	2800      	cmp	r0, #0
 800727e:	d07a      	beq.n	8007376 <HAL_ADC_Init+0xfa>
{
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007284:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d04f      	beq.n	800732a <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff ffc4 	bl	8007218 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007292:	f013 0310 	ands.w	r3, r3, #16
 8007296:	d168      	bne.n	800736a <HAL_ADC_Init+0xee>
 8007298:	2800      	cmp	r0, #0
 800729a:	d166      	bne.n	800736a <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 800729c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800729e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80072a2:	f022 0202 	bic.w	r2, r2, #2
 80072a6:	f042 0202 	orr.w	r2, r2, #2
 80072aa:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80072ac:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80072ae:	6862      	ldr	r2, [r4, #4]
 80072b0:	69e5      	ldr	r5, [r4, #28]
 80072b2:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80072b4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80072b8:	68a5      	ldr	r5, [r4, #8]
 80072ba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80072be:	d004      	beq.n	80072ca <HAL_ADC_Init+0x4e>
 80072c0:	2d01      	cmp	r5, #1
 80072c2:	bf14      	ite	ne
 80072c4:	461d      	movne	r5, r3
 80072c6:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80072ca:	7d26      	ldrb	r6, [r4, #20]
 80072cc:	2e01      	cmp	r6, #1
 80072ce:	d032      	beq.n	8007336 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 80072d0:	6826      	ldr	r6, [r4, #0]
 80072d2:	6871      	ldr	r1, [r6, #4]
 80072d4:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80072d8:	4329      	orrs	r1, r5
 80072da:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80072dc:	6825      	ldr	r5, [r4, #0]
 80072de:	68ae      	ldr	r6, [r5, #8]
 80072e0:	4926      	ldr	r1, [pc, #152]	; (800737c <HAL_ADC_Init+0x100>)
 80072e2:	4031      	ands	r1, r6
 80072e4:	4311      	orrs	r1, r2
 80072e6:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80072e8:	68a1      	ldr	r1, [r4, #8]
 80072ea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80072ee:	d001      	beq.n	80072f4 <HAL_ADC_Init+0x78>
 80072f0:	2901      	cmp	r1, #1
 80072f2:	d102      	bne.n	80072fa <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80072fa:	6825      	ldr	r5, [r4, #0]
 80072fc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80072fe:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8007302:	430b      	orrs	r3, r1
 8007304:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
 800730a:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <HAL_ADC_Init+0x104>)
 800730c:	400b      	ands	r3, r1
 800730e:	429a      	cmp	r2, r3
 8007310:	d022      	beq.n	8007358 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8007312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007314:	f023 0312 	bic.w	r3, r3, #18
 8007318:	f043 0310 	orr.w	r3, r3, #16
 800731c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800731e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8007326:	2001      	movs	r0, #1
 8007328:	e024      	b.n	8007374 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 800732a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800732c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8007330:	f7ff fb10 	bl	8006954 <HAL_ADC_MspInit>
 8007334:	e7a9      	b.n	800728a <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007336:	b931      	cbnz	r1, 8007346 <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007338:	69a1      	ldr	r1, [r4, #24]
 800733a:	3901      	subs	r1, #1
 800733c:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8007340:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8007344:	e7c4      	b.n	80072d0 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007346:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007348:	f041 0120 	orr.w	r1, r1, #32
 800734c:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800734e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007350:	f041 0101 	orr.w	r1, r1, #1
 8007354:	62e1      	str	r1, [r4, #44]	; 0x2c
 8007356:	e7bb      	b.n	80072d0 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8007358:	2300      	movs	r3, #0
 800735a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800735c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	62a3      	str	r3, [r4, #40]	; 0x28
 8007368:	e004      	b.n	8007374 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800736a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800736c:	f043 0310 	orr.w	r3, r3, #16
 8007370:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8007372:	2001      	movs	r0, #1
}
 8007374:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007376:	2001      	movs	r0, #1
}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	ffe1f7fd 	.word	0xffe1f7fd
 8007380:	ff1f0efe 	.word	0xff1f0efe

08007384 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800738c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007390:	2b01      	cmp	r3, #1
 8007392:	d07d      	beq.n	8007490 <HAL_ADCEx_Calibration_Start+0x10c>
 8007394:	4604      	mov	r4, r0
 8007396:	2301      	movs	r3, #1
 8007398:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800739c:	f7ff ff3c 	bl	8007218 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80073a0:	4605      	mov	r5, r0
 80073a2:	b128      	cbz	r0, 80073b0 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073a4:	2300      	movs	r3, #0
 80073a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80073aa:	4628      	mov	r0, r5
 80073ac:	b002      	add	sp, #8
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80073b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073b6:	f023 0302 	bic.w	r3, r3, #2
 80073ba:	f043 0302 	orr.w	r3, r3, #2
 80073be:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80073c0:	4b34      	ldr	r3, [pc, #208]	; (8007494 <HAL_ADCEx_Calibration_Start+0x110>)
 80073c2:	681e      	ldr	r6, [r3, #0]
 80073c4:	2002      	movs	r0, #2
 80073c6:	f002 f827 	bl	8009418 <HAL_RCCEx_GetPeriphCLKFreq>
 80073ca:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80073ce:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 80073d0:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 80073d2:	9b01      	ldr	r3, [sp, #4]
 80073d4:	b12b      	cbz	r3, 80073e2 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 80073d6:	9b01      	ldr	r3, [sp, #4]
 80073d8:	3b01      	subs	r3, #1
 80073da:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80073dc:	9b01      	ldr	r3, [sp, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f9      	bne.n	80073d6 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7ff fe38 	bl	8007058 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	6893      	ldr	r3, [r2, #8]
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80073f2:	f7ff fd39 	bl	8006e68 <HAL_GetTick>
 80073f6:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	f012 0f08 	tst.w	r2, #8
 8007400:	d117      	bne.n	8007432 <HAL_ADCEx_Calibration_Start+0xae>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	f042 0204 	orr.w	r2, r2, #4
 8007408:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800740a:	f7ff fd2d 	bl	8006e68 <HAL_GetTick>
 800740e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f013 0f04 	tst.w	r3, #4
 8007418:	d125      	bne.n	8007466 <HAL_ADCEx_Calibration_Start+0xe2>
    ADC_STATE_CLR_SET(hadc->State,
 800741a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	62a3      	str	r3, [r4, #40]	; 0x28
 8007426:	e7bd      	b.n	80073a4 <HAL_ADCEx_Calibration_Start+0x20>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	f012 0f08 	tst.w	r2, #8
 8007430:	d0e7      	beq.n	8007402 <HAL_ADCEx_Calibration_Start+0x7e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007432:	f7ff fd19 	bl	8006e68 <HAL_GetTick>
 8007436:	1b80      	subs	r0, r0, r6
 8007438:	280a      	cmp	r0, #10
 800743a:	d9f5      	bls.n	8007428 <HAL_ADCEx_Calibration_Start+0xa4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f013 0f08 	tst.w	r3, #8
 8007444:	d0f0      	beq.n	8007428 <HAL_ADCEx_Calibration_Start+0xa4>
          ADC_STATE_CLR_SET(hadc->State,
 8007446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007448:	f023 0312 	bic.w	r3, r3, #18
 800744c:	f043 0310 	orr.w	r3, r3, #16
 8007450:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8007452:	2300      	movs	r3, #0
 8007454:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8007458:	2501      	movs	r5, #1
 800745a:	e7a6      	b.n	80073aa <HAL_ADCEx_Calibration_Start+0x26>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f013 0f04 	tst.w	r3, #4
 8007464:	d0d9      	beq.n	800741a <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007466:	f7ff fcff 	bl	8006e68 <HAL_GetTick>
 800746a:	1b80      	subs	r0, r0, r6
 800746c:	280a      	cmp	r0, #10
 800746e:	d9f5      	bls.n	800745c <HAL_ADCEx_Calibration_Start+0xd8>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f013 0f04 	tst.w	r3, #4
 8007478:	d0f0      	beq.n	800745c <HAL_ADCEx_Calibration_Start+0xd8>
          ADC_STATE_CLR_SET(hadc->State,
 800747a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800747c:	f023 0312 	bic.w	r3, r3, #18
 8007480:	f043 0310 	orr.w	r3, r3, #16
 8007484:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8007486:	2300      	movs	r3, #0
 8007488:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 800748c:	2501      	movs	r5, #1
 800748e:	e78c      	b.n	80073aa <HAL_ADCEx_Calibration_Start+0x26>
  __HAL_LOCK(hadc);
 8007490:	2502      	movs	r5, #2
 8007492:	e78a      	b.n	80073aa <HAL_ADCEx_Calibration_Start+0x26>
 8007494:	20000000 	.word	0x20000000

08007498 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007498:	4907      	ldr	r1, [pc, #28]	; (80074b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800749a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800749c:	0203      	lsls	r3, r0, #8
 800749e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074a6:	0412      	lsls	r2, r2, #16
 80074a8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80074b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80074b6:	4770      	bx	lr
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80074bc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074be:	4b16      	ldr	r3, [pc, #88]	; (8007518 <HAL_NVIC_SetPriority+0x5c>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074c6:	f1c3 0407 	rsb	r4, r3, #7
 80074ca:	2c04      	cmp	r4, #4
 80074cc:	bf28      	it	cs
 80074ce:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074d0:	1d1d      	adds	r5, r3, #4
 80074d2:	2d06      	cmp	r5, #6
 80074d4:	bf8c      	ite	hi
 80074d6:	3b03      	subhi	r3, #3
 80074d8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074da:	f04f 35ff 	mov.w	r5, #4294967295
 80074de:	fa05 f404 	lsl.w	r4, r5, r4
 80074e2:	ea21 0104 	bic.w	r1, r1, r4
 80074e6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074e8:	fa05 f303 	lsl.w	r3, r5, r3
 80074ec:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80074f2:	2800      	cmp	r0, #0
 80074f4:	db09      	blt.n	800750a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074f6:	0109      	lsls	r1, r1, #4
 80074f8:	b2c9      	uxtb	r1, r1
 80074fa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80074fe:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007502:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007506:	bc30      	pop	{r4, r5}
 8007508:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800750a:	f000 000f 	and.w	r0, r0, #15
 800750e:	0109      	lsls	r1, r1, #4
 8007510:	b2c9      	uxtb	r1, r1
 8007512:	4b02      	ldr	r3, [pc, #8]	; (800751c <HAL_NVIC_SetPriority+0x60>)
 8007514:	5419      	strb	r1, [r3, r0]
 8007516:	e7f6      	b.n	8007506 <HAL_NVIC_SetPriority+0x4a>
 8007518:	e000ed00 	.word	0xe000ed00
 800751c:	e000ed14 	.word	0xe000ed14

08007520 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007520:	2800      	cmp	r0, #0
 8007522:	db08      	blt.n	8007536 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007524:	0942      	lsrs	r2, r0, #5
 8007526:	f000 001f 	and.w	r0, r0, #31
 800752a:	2301      	movs	r3, #1
 800752c:	fa03 f000 	lsl.w	r0, r3, r0
 8007530:	4b01      	ldr	r3, [pc, #4]	; (8007538 <HAL_NVIC_EnableIRQ+0x18>)
 8007532:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007536:	4770      	bx	lr
 8007538:	e000e100 	.word	0xe000e100

0800753c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800753c:	3801      	subs	r0, #1
 800753e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007542:	d20a      	bcs.n	800755a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_SYSTICK_Config+0x24>)
 8007546:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007548:	4a06      	ldr	r2, [pc, #24]	; (8007564 <HAL_SYSTICK_Config+0x28>)
 800754a:	21f0      	movs	r1, #240	; 0xf0
 800754c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007550:	2000      	movs	r0, #0
 8007552:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007554:	2207      	movs	r2, #7
 8007556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007558:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800755a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	e000e010 	.word	0xe000e010
 8007564:	e000ed00 	.word	0xe000ed00

08007568 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007568:	b360      	cbz	r0, 80075c4 <HAL_DMA_Init+0x5c>
{
 800756a:	b410      	push	{r4}
 800756c:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800756e:	6801      	ldr	r1, [r0, #0]
 8007570:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <HAL_DMA_Init+0x60>)
 8007572:	440b      	add	r3, r1
 8007574:	4815      	ldr	r0, [pc, #84]	; (80075cc <HAL_DMA_Init+0x64>)
 8007576:	fba0 0303 	umull	r0, r3, r0, r3
 800757a:	091b      	lsrs	r3, r3, #4
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <HAL_DMA_Init+0x68>)
 8007582:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007584:	2302      	movs	r3, #2
 8007586:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800758a:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800758c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8007590:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007594:	6853      	ldr	r3, [r2, #4]
 8007596:	6894      	ldr	r4, [r2, #8]
 8007598:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800759a:	68d4      	ldr	r4, [r2, #12]
 800759c:	4323      	orrs	r3, r4
 800759e:	6914      	ldr	r4, [r2, #16]
 80075a0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075a2:	6954      	ldr	r4, [r2, #20]
 80075a4:	4323      	orrs	r3, r4
 80075a6:	6994      	ldr	r4, [r2, #24]
 80075a8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80075aa:	69d4      	ldr	r4, [r2, #28]
 80075ac:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80075ae:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80075b0:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075b2:	2000      	movs	r0, #0
 80075b4:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80075bc:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 80075c0:	bc10      	pop	{r4}
 80075c2:	4770      	bx	lr
    return HAL_ERROR;
 80075c4:	2001      	movs	r0, #1
}
 80075c6:	4770      	bx	lr
 80075c8:	bffdfff8 	.word	0xbffdfff8
 80075cc:	cccccccd 	.word	0xcccccccd
 80075d0:	40020000 	.word	0x40020000

080075d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075d4:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80075d6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80075da:	2c01      	cmp	r4, #1
 80075dc:	d042      	beq.n	8007664 <HAL_DMA_Start_IT+0x90>
 80075de:	2401      	movs	r4, #1
 80075e0:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80075e4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80075e8:	2c01      	cmp	r4, #1
 80075ea:	d005      	beq.n	80075f8 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80075ec:	2300      	movs	r3, #0
 80075ee:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80075f2:	2002      	movs	r0, #2
  }    
  return status;
}
 80075f4:	bc70      	pop	{r4, r5, r6}
 80075f6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80075f8:	2402      	movs	r4, #2
 80075fa:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075fe:	2400      	movs	r4, #0
 8007600:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8007602:	6805      	ldr	r5, [r0, #0]
 8007604:	682c      	ldr	r4, [r5, #0]
 8007606:	f024 0401 	bic.w	r4, r4, #1
 800760a:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800760c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800760e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8007610:	2401      	movs	r4, #1
 8007612:	40b4      	lsls	r4, r6
 8007614:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007616:	6804      	ldr	r4, [r0, #0]
 8007618:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800761a:	6843      	ldr	r3, [r0, #4]
 800761c:	2b10      	cmp	r3, #16
 800761e:	d011      	beq.n	8007644 <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007620:	6803      	ldr	r3, [r0, #0]
 8007622:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007624:	6803      	ldr	r3, [r0, #0]
 8007626:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8007628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800762a:	b183      	cbz	r3, 800764e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800762c:	6802      	ldr	r2, [r0, #0]
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	f043 030e 	orr.w	r3, r3, #14
 8007634:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8007636:	6802      	ldr	r2, [r0, #0]
 8007638:	6813      	ldr	r3, [r2, #0]
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007640:	2000      	movs	r0, #0
 8007642:	e7d7      	b.n	80075f4 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8007644:	6803      	ldr	r3, [r0, #0]
 8007646:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007648:	6803      	ldr	r3, [r0, #0]
 800764a:	60d9      	str	r1, [r3, #12]
 800764c:	e7ec      	b.n	8007628 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800764e:	6802      	ldr	r2, [r0, #0]
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	f023 0304 	bic.w	r3, r3, #4
 8007656:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007658:	6802      	ldr	r2, [r0, #0]
 800765a:	6813      	ldr	r3, [r2, #0]
 800765c:	f043 030a 	orr.w	r3, r3, #10
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e7e8      	b.n	8007636 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8007664:	2002      	movs	r0, #2
 8007666:	e7c5      	b.n	80075f4 <HAL_DMA_Start_IT+0x20>

08007668 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007668:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800766c:	2b02      	cmp	r3, #2
 800766e:	d006      	beq.n	800767e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007670:	2304      	movs	r3, #4
 8007672:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007674:	2300      	movs	r3, #0
 8007676:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800767a:	2001      	movs	r0, #1
 800767c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800767e:	6802      	ldr	r2, [r0, #0]
 8007680:	6813      	ldr	r3, [r2, #0]
 8007682:	f023 030e 	bic.w	r3, r3, #14
 8007686:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007688:	6802      	ldr	r2, [r0, #0]
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	f023 0301 	bic.w	r3, r3, #1
 8007690:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007692:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007694:	2201      	movs	r2, #1
 8007696:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800769e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80076a2:	2300      	movs	r3, #0
 80076a4:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80076a8:	4618      	mov	r0, r3
}
 80076aa:	4770      	bx	lr

080076ac <HAL_DMA_Abort_IT>:
{  
 80076ac:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80076ae:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d003      	beq.n	80076be <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076b6:	2304      	movs	r3, #4
 80076b8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80076ba:	2001      	movs	r0, #1
}
 80076bc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076be:	6802      	ldr	r2, [r0, #0]
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	f023 030e 	bic.w	r3, r3, #14
 80076c6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80076c8:	6802      	ldr	r2, [r0, #0]
 80076ca:	6813      	ldr	r3, [r2, #0]
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80076d2:	6803      	ldr	r3, [r0, #0]
 80076d4:	4a18      	ldr	r2, [pc, #96]	; (8007738 <HAL_DMA_Abort_IT+0x8c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_DMA_Abort_IT+0x56>
 80076da:	3214      	adds	r2, #20
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01e      	beq.n	800771e <HAL_DMA_Abort_IT+0x72>
 80076e0:	3214      	adds	r2, #20
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <HAL_DMA_Abort_IT+0x76>
 80076e6:	3214      	adds	r2, #20
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d01d      	beq.n	8007728 <HAL_DMA_Abort_IT+0x7c>
 80076ec:	3214      	adds	r2, #20
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01d      	beq.n	800772e <HAL_DMA_Abort_IT+0x82>
 80076f2:	3214      	adds	r2, #20
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bf0c      	ite	eq
 80076f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80076fc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007700:	e000      	b.n	8007704 <HAL_DMA_Abort_IT+0x58>
 8007702:	2301      	movs	r3, #1
 8007704:	4a0d      	ldr	r2, [pc, #52]	; (800773c <HAL_DMA_Abort_IT+0x90>)
 8007706:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007708:	2301      	movs	r3, #1
 800770a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800770e:	2300      	movs	r3, #0
 8007710:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007714:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007716:	b16b      	cbz	r3, 8007734 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8007718:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800771a:	2000      	movs	r0, #0
 800771c:	e7ce      	b.n	80076bc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800771e:	2310      	movs	r3, #16
 8007720:	e7f0      	b.n	8007704 <HAL_DMA_Abort_IT+0x58>
 8007722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007726:	e7ed      	b.n	8007704 <HAL_DMA_Abort_IT+0x58>
 8007728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800772c:	e7ea      	b.n	8007704 <HAL_DMA_Abort_IT+0x58>
 800772e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007732:	e7e7      	b.n	8007704 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8007734:	2000      	movs	r0, #0
 8007736:	e7c1      	b.n	80076bc <HAL_DMA_Abort_IT+0x10>
 8007738:	40020008 	.word	0x40020008
 800773c:	40020000 	.word	0x40020000

08007740 <HAL_DMA_IRQHandler>:
{
 8007740:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007742:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007744:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007746:	6804      	ldr	r4, [r0, #0]
 8007748:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800774a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800774c:	2304      	movs	r3, #4
 800774e:	408b      	lsls	r3, r1
 8007750:	4213      	tst	r3, r2
 8007752:	d034      	beq.n	80077be <HAL_DMA_IRQHandler+0x7e>
 8007754:	f015 0f04 	tst.w	r5, #4
 8007758:	d031      	beq.n	80077be <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	f013 0f20 	tst.w	r3, #32
 8007760:	d103      	bne.n	800776a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0304 	bic.w	r3, r3, #4
 8007768:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800776a:	6803      	ldr	r3, [r0, #0]
 800776c:	4a42      	ldr	r2, [pc, #264]	; (8007878 <HAL_DMA_IRQHandler+0x138>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_DMA_IRQHandler+0x5a>
 8007772:	3214      	adds	r2, #20
 8007774:	4293      	cmp	r3, r2
 8007776:	d017      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x68>
 8007778:	3214      	adds	r2, #20
 800777a:	4293      	cmp	r3, r2
 800777c:	d016      	beq.n	80077ac <HAL_DMA_IRQHandler+0x6c>
 800777e:	3214      	adds	r2, #20
 8007780:	4293      	cmp	r3, r2
 8007782:	d016      	beq.n	80077b2 <HAL_DMA_IRQHandler+0x72>
 8007784:	3214      	adds	r2, #20
 8007786:	4293      	cmp	r3, r2
 8007788:	d016      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x78>
 800778a:	3214      	adds	r2, #20
 800778c:	4293      	cmp	r3, r2
 800778e:	bf0c      	ite	eq
 8007790:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8007794:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8007798:	e000      	b.n	800779c <HAL_DMA_IRQHandler+0x5c>
 800779a:	2304      	movs	r3, #4
 800779c:	4a37      	ldr	r2, [pc, #220]	; (800787c <HAL_DMA_IRQHandler+0x13c>)
 800779e:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80077a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80077a2:	b103      	cbz	r3, 80077a6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 80077a4:	4798      	blx	r3
}
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80077a8:	2340      	movs	r3, #64	; 0x40
 80077aa:	e7f7      	b.n	800779c <HAL_DMA_IRQHandler+0x5c>
 80077ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b0:	e7f4      	b.n	800779c <HAL_DMA_IRQHandler+0x5c>
 80077b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077b6:	e7f1      	b.n	800779c <HAL_DMA_IRQHandler+0x5c>
 80077b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077bc:	e7ee      	b.n	800779c <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80077be:	2302      	movs	r3, #2
 80077c0:	408b      	lsls	r3, r1
 80077c2:	4213      	tst	r3, r2
 80077c4:	d03b      	beq.n	800783e <HAL_DMA_IRQHandler+0xfe>
 80077c6:	f015 0f02 	tst.w	r5, #2
 80077ca:	d038      	beq.n	800783e <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	f013 0f20 	tst.w	r3, #32
 80077d2:	d106      	bne.n	80077e2 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	f023 030a 	bic.w	r3, r3, #10
 80077da:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80077dc:	2301      	movs	r3, #1
 80077de:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80077e2:	6803      	ldr	r3, [r0, #0]
 80077e4:	4a24      	ldr	r2, [pc, #144]	; (8007878 <HAL_DMA_IRQHandler+0x138>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077ea:	3214      	adds	r2, #20
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01b      	beq.n	8007828 <HAL_DMA_IRQHandler+0xe8>
 80077f0:	3214      	adds	r2, #20
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d01a      	beq.n	800782c <HAL_DMA_IRQHandler+0xec>
 80077f6:	3214      	adds	r2, #20
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d01a      	beq.n	8007832 <HAL_DMA_IRQHandler+0xf2>
 80077fc:	3214      	adds	r2, #20
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01a      	beq.n	8007838 <HAL_DMA_IRQHandler+0xf8>
 8007802:	3214      	adds	r2, #20
 8007804:	4293      	cmp	r3, r2
 8007806:	bf0c      	ite	eq
 8007808:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800780c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8007810:	e000      	b.n	8007814 <HAL_DMA_IRQHandler+0xd4>
 8007812:	2302      	movs	r3, #2
 8007814:	4a19      	ldr	r2, [pc, #100]	; (800787c <HAL_DMA_IRQHandler+0x13c>)
 8007816:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007818:	2300      	movs	r3, #0
 800781a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800781e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0c0      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8007824:	4798      	blx	r3
 8007826:	e7be      	b.n	80077a6 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007828:	2320      	movs	r3, #32
 800782a:	e7f3      	b.n	8007814 <HAL_DMA_IRQHandler+0xd4>
 800782c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007830:	e7f0      	b.n	8007814 <HAL_DMA_IRQHandler+0xd4>
 8007832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007836:	e7ed      	b.n	8007814 <HAL_DMA_IRQHandler+0xd4>
 8007838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800783c:	e7ea      	b.n	8007814 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800783e:	2308      	movs	r3, #8
 8007840:	fa03 f101 	lsl.w	r1, r3, r1
 8007844:	4211      	tst	r1, r2
 8007846:	d0ae      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x66>
 8007848:	f015 0f08 	tst.w	r5, #8
 800784c:	d0ab      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f023 030e 	bic.w	r3, r3, #14
 8007854:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007856:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007858:	2301      	movs	r3, #1
 800785a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800785c:	fa03 f202 	lsl.w	r2, r3, r2
 8007860:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007862:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007864:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007868:	2300      	movs	r3, #0
 800786a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800786e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007870:	2b00      	cmp	r3, #0
 8007872:	d098      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8007874:	4798      	blx	r3
  return;
 8007876:	e796      	b.n	80077a6 <HAL_DMA_IRQHandler+0x66>
 8007878:	40020008 	.word	0x40020008
 800787c:	40020000 	.word	0x40020000

08007880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007886:	680f      	ldr	r7, [r1, #0]
 8007888:	2f00      	cmp	r7, #0
 800788a:	f000 80f8 	beq.w	8007a7e <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 800788e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8007890:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007892:	f8df c200 	ldr.w	ip, [pc, #512]	; 8007a94 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007896:	4d7b      	ldr	r5, [pc, #492]	; (8007a84 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8007898:	4e7b      	ldr	r6, [pc, #492]	; (8007a88 <HAL_GPIO_Init+0x208>)
 800789a:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8007a98 <HAL_GPIO_Init+0x218>
 800789e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8007a9c <HAL_GPIO_Init+0x21c>
 80078a2:	e09a      	b.n	80079da <HAL_GPIO_Init+0x15a>
 80078a4:	2200      	movs	r2, #0
 80078a6:	e01e      	b.n	80078e6 <HAL_GPIO_Init+0x66>
 80078a8:	42b4      	cmp	r4, r6
 80078aa:	d00c      	beq.n	80078c6 <HAL_GPIO_Init+0x46>
 80078ac:	d904      	bls.n	80078b8 <HAL_GPIO_Init+0x38>
 80078ae:	4574      	cmp	r4, lr
 80078b0:	d009      	beq.n	80078c6 <HAL_GPIO_Init+0x46>
 80078b2:	4544      	cmp	r4, r8
 80078b4:	d007      	beq.n	80078c6 <HAL_GPIO_Init+0x46>
 80078b6:	e016      	b.n	80078e6 <HAL_GPIO_Init+0x66>
 80078b8:	4f74      	ldr	r7, [pc, #464]	; (8007a8c <HAL_GPIO_Init+0x20c>)
 80078ba:	42bc      	cmp	r4, r7
 80078bc:	d003      	beq.n	80078c6 <HAL_GPIO_Init+0x46>
 80078be:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80078c2:	42bc      	cmp	r4, r7
 80078c4:	d10b      	bne.n	80078de <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80078c6:	688a      	ldr	r2, [r1, #8]
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	f000 80ca 	beq.w	8007a62 <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80078ce:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80078d0:	bf0c      	ite	eq
 80078d2:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 80078d6:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80078da:	2208      	movs	r2, #8
 80078dc:	e003      	b.n	80078e6 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 80078de:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80078e2:	42bc      	cmp	r4, r7
 80078e4:	d0ef      	beq.n	80078c6 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80078e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80078ea:	f200 80bc 	bhi.w	8007a66 <HAL_GPIO_Init+0x1e6>
 80078ee:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80078f0:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80078f4:	683c      	ldr	r4, [r7, #0]
 80078f6:	f04f 0b0f 	mov.w	fp, #15
 80078fa:	fa0b fb09 	lsl.w	fp, fp, r9
 80078fe:	ea24 040b 	bic.w	r4, r4, fp
 8007902:	fa02 f909 	lsl.w	r9, r2, r9
 8007906:	ea44 0409 	orr.w	r4, r4, r9
 800790a:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800790c:	684c      	ldr	r4, [r1, #4]
 800790e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8007912:	d05d      	beq.n	80079d0 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007914:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8007918:	f044 0401 	orr.w	r4, r4, #1
 800791c:	f8cc 4018 	str.w	r4, [ip, #24]
 8007920:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8007924:	f004 0401 	and.w	r4, r4, #1
 8007928:	9401      	str	r4, [sp, #4]
 800792a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800792c:	f023 0403 	bic.w	r4, r3, #3
 8007930:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8007934:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8007938:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800793c:	f003 0703 	and.w	r7, r3, #3
 8007940:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8007944:	270f      	movs	r7, #15
 8007946:	fa07 f70b 	lsl.w	r7, r7, fp
 800794a:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800794e:	4f50      	ldr	r7, [pc, #320]	; (8007a90 <HAL_GPIO_Init+0x210>)
 8007950:	42b8      	cmp	r0, r7
 8007952:	f000 808e 	beq.w	8007a72 <HAL_GPIO_Init+0x1f2>
 8007956:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800795a:	42b8      	cmp	r0, r7
 800795c:	f000 808b 	beq.w	8007a76 <HAL_GPIO_Init+0x1f6>
 8007960:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007964:	42b8      	cmp	r0, r7
 8007966:	f000 8088 	beq.w	8007a7a <HAL_GPIO_Init+0x1fa>
 800796a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800796e:	42b8      	cmp	r0, r7
 8007970:	bf0c      	ite	eq
 8007972:	2703      	moveq	r7, #3
 8007974:	2704      	movne	r7, #4
 8007976:	fa07 f70b 	lsl.w	r7, r7, fp
 800797a:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800797e:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007980:	684c      	ldr	r4, [r1, #4]
 8007982:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007986:	682c      	ldr	r4, [r5, #0]
 8007988:	bf14      	ite	ne
 800798a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800798e:	ea24 040a 	biceq.w	r4, r4, sl
 8007992:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007994:	684c      	ldr	r4, [r1, #4]
 8007996:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800799a:	686c      	ldr	r4, [r5, #4]
 800799c:	bf14      	ite	ne
 800799e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80079a2:	ea24 040a 	biceq.w	r4, r4, sl
 80079a6:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079a8:	684c      	ldr	r4, [r1, #4]
 80079aa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80079ae:	68ac      	ldr	r4, [r5, #8]
 80079b0:	bf14      	ite	ne
 80079b2:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80079b6:	ea24 040a 	biceq.w	r4, r4, sl
 80079ba:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079bc:	684c      	ldr	r4, [r1, #4]
 80079be:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80079c2:	68ec      	ldr	r4, [r5, #12]
 80079c4:	bf14      	ite	ne
 80079c6:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80079ca:	ea24 040a 	biceq.w	r4, r4, sl
 80079ce:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 80079d0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079d2:	680f      	ldr	r7, [r1, #0]
 80079d4:	fa37 f403 	lsrs.w	r4, r7, r3
 80079d8:	d051      	beq.n	8007a7e <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 80079da:	f04f 0901 	mov.w	r9, #1
 80079de:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079e2:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 80079e6:	ea39 0407 	bics.w	r4, r9, r7
 80079ea:	d1f1      	bne.n	80079d0 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80079ec:	684c      	ldr	r4, [r1, #4]
 80079ee:	2c12      	cmp	r4, #18
 80079f0:	f63f af5a 	bhi.w	80078a8 <HAL_GPIO_Init+0x28>
 80079f4:	2c12      	cmp	r4, #18
 80079f6:	f63f af76 	bhi.w	80078e6 <HAL_GPIO_Init+0x66>
 80079fa:	a701      	add	r7, pc, #4	; (adr r7, 8007a00 <HAL_GPIO_Init+0x180>)
 80079fc:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8007a00:	080078c7 	.word	0x080078c7
 8007a04:	08007a4d 	.word	0x08007a4d
 8007a08:	08007a57 	.word	0x08007a57
 8007a0c:	080078a5 	.word	0x080078a5
 8007a10:	080078e7 	.word	0x080078e7
 8007a14:	080078e7 	.word	0x080078e7
 8007a18:	080078e7 	.word	0x080078e7
 8007a1c:	080078e7 	.word	0x080078e7
 8007a20:	080078e7 	.word	0x080078e7
 8007a24:	080078e7 	.word	0x080078e7
 8007a28:	080078e7 	.word	0x080078e7
 8007a2c:	080078e7 	.word	0x080078e7
 8007a30:	080078e7 	.word	0x080078e7
 8007a34:	080078e7 	.word	0x080078e7
 8007a38:	080078e7 	.word	0x080078e7
 8007a3c:	080078e7 	.word	0x080078e7
 8007a40:	080078e7 	.word	0x080078e7
 8007a44:	08007a51 	.word	0x08007a51
 8007a48:	08007a5d 	.word	0x08007a5d
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007a4c:	68ca      	ldr	r2, [r1, #12]
          break;
 8007a4e:	e74a      	b.n	80078e6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007a50:	68ca      	ldr	r2, [r1, #12]
 8007a52:	3204      	adds	r2, #4
          break;
 8007a54:	e747      	b.n	80078e6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007a56:	68ca      	ldr	r2, [r1, #12]
 8007a58:	3208      	adds	r2, #8
          break;
 8007a5a:	e744      	b.n	80078e6 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007a5c:	68ca      	ldr	r2, [r1, #12]
 8007a5e:	320c      	adds	r2, #12
          break;
 8007a60:	e741      	b.n	80078e6 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007a62:	2204      	movs	r2, #4
 8007a64:	e73f      	b.n	80078e6 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007a66:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007a68:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007a6c:	f1a9 0920 	sub.w	r9, r9, #32
 8007a70:	e740      	b.n	80078f4 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007a72:	2700      	movs	r7, #0
 8007a74:	e77f      	b.n	8007976 <HAL_GPIO_Init+0xf6>
 8007a76:	2701      	movs	r7, #1
 8007a78:	e77d      	b.n	8007976 <HAL_GPIO_Init+0xf6>
 8007a7a:	2702      	movs	r7, #2
 8007a7c:	e77b      	b.n	8007976 <HAL_GPIO_Init+0xf6>
  }
}
 8007a7e:	b003      	add	sp, #12
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	40010400 	.word	0x40010400
 8007a88:	10220000 	.word	0x10220000
 8007a8c:	10120000 	.word	0x10120000
 8007a90:	40010800 	.word	0x40010800
 8007a94:	40021000 	.word	0x40021000
 8007a98:	10310000 	.word	0x10310000
 8007a9c:	10320000 	.word	0x10320000

08007aa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007aa0:	b10a      	cbz	r2, 8007aa6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aa2:	6101      	str	r1, [r0, #16]
 8007aa4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007aa6:	0409      	lsls	r1, r1, #16
 8007aa8:	6101      	str	r1, [r0, #16]
  }
}
 8007aaa:	4770      	bx	lr

08007aac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007aac:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007aae:	ea01 0203 	and.w	r2, r1, r3
 8007ab2:	ea21 0103 	bic.w	r1, r1, r3
 8007ab6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aba:	6101      	str	r1, [r0, #16]
}
 8007abc:	4770      	bx	lr
	...

08007ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ac0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	4203      	tst	r3, r0
 8007ac8:	d100      	bne.n	8007acc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8007aca:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007ace:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ad0:	f7fe fefa 	bl	80068c8 <HAL_GPIO_EXTI_Callback>
}
 8007ad4:	e7f9      	b.n	8007aca <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007ad6:	bf00      	nop
 8007ad8:	40010400 	.word	0x40010400

08007adc <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f000 80b0 	beq.w	8007c42 <HAL_I2C_Init+0x166>
{
 8007ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae4:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ae6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d078      	beq.n	8007be0 <HAL_I2C_Init+0x104>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007aee:	2324      	movs	r3, #36	; 0x24
 8007af0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	6813      	ldr	r3, [r2, #0]
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	6813      	ldr	r3, [r2, #0]
 8007b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b10:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b12:	f001 fbc1 	bl	8009298 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b16:	6862      	ldr	r2, [r4, #4]
 8007b18:	4b4c      	ldr	r3, [pc, #304]	; (8007c4c <HAL_I2C_Init+0x170>)
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	bf94      	ite	ls
 8007b1e:	4b4c      	ldrls	r3, [pc, #304]	; (8007c50 <HAL_I2C_Init+0x174>)
 8007b20:	4b4c      	ldrhi	r3, [pc, #304]	; (8007c54 <HAL_I2C_Init+0x178>)
 8007b22:	4298      	cmp	r0, r3
 8007b24:	bf8c      	ite	hi
 8007b26:	2300      	movhi	r3, #0
 8007b28:	2301      	movls	r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 808b 	bne.w	8007c46 <HAL_I2C_Init+0x16a>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b30:	4d49      	ldr	r5, [pc, #292]	; (8007c58 <HAL_I2C_Init+0x17c>)
 8007b32:	fba5 3500 	umull	r3, r5, r5, r0
 8007b36:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b38:	6826      	ldr	r6, [r4, #0]
 8007b3a:	6871      	ldr	r1, [r6, #4]
 8007b3c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007b40:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8007b44:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b46:	6821      	ldr	r1, [r4, #0]
 8007b48:	6a0b      	ldr	r3, [r1, #32]
 8007b4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b4e:	6865      	ldr	r5, [r4, #4]
 8007b50:	4a3e      	ldr	r2, [pc, #248]	; (8007c4c <HAL_I2C_Init+0x170>)
 8007b52:	4295      	cmp	r5, r2
 8007b54:	d849      	bhi.n	8007bea <HAL_I2C_Init+0x10e>
 8007b56:	1c7a      	adds	r2, r7, #1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b5c:	6825      	ldr	r5, [r4, #0]
 8007b5e:	69e9      	ldr	r1, [r5, #28]
 8007b60:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007b64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	4a38      	ldr	r2, [pc, #224]	; (8007c4c <HAL_I2C_Init+0x170>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d846      	bhi.n	8007bfe <HAL_I2C_Init+0x122>
 8007b70:	3801      	subs	r0, #1
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b7e:	4218      	tst	r0, r3
 8007b80:	d059      	beq.n	8007c36 <HAL_I2C_Init+0x15a>
 8007b82:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007b86:	430b      	orrs	r3, r1
 8007b88:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	680a      	ldr	r2, [r1, #0]
 8007b8e:	69e3      	ldr	r3, [r4, #28]
 8007b90:	6a20      	ldr	r0, [r4, #32]
 8007b92:	4303      	orrs	r3, r0
 8007b94:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007b9c:	6821      	ldr	r1, [r4, #0]
 8007b9e:	688a      	ldr	r2, [r1, #8]
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	68e0      	ldr	r0, [r4, #12]
 8007ba4:	4303      	orrs	r3, r0
 8007ba6:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8007baa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bb2:	6821      	ldr	r1, [r4, #0]
 8007bb4:	68ca      	ldr	r2, [r1, #12]
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	69a0      	ldr	r0, [r4, #24]
 8007bba:	4303      	orrs	r3, r0
 8007bbc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bc4:	6822      	ldr	r2, [r4, #0]
 8007bc6:	6813      	ldr	r3, [r2, #0]
 8007bc8:	f043 0301 	orr.w	r3, r3, #1
 8007bcc:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bce:	2000      	movs	r0, #0
 8007bd0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bd8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bda:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8007bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007be0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8007be4:	f7fe ff02 	bl	80069ec <HAL_I2C_MspInit>
 8007be8:	e781      	b.n	8007aee <HAL_I2C_Init+0x12>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007bee:	fb02 f207 	mul.w	r2, r2, r7
 8007bf2:	4d1a      	ldr	r5, [pc, #104]	; (8007c5c <HAL_I2C_Init+0x180>)
 8007bf4:	fba5 5202 	umull	r5, r2, r5, r2
 8007bf8:	0992      	lsrs	r2, r2, #6
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	e7ac      	b.n	8007b58 <HAL_I2C_Init+0x7c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007bfe:	68a2      	ldr	r2, [r4, #8]
 8007c00:	b95a      	cbnz	r2, 8007c1a <HAL_I2C_Init+0x13e>
 8007c02:	1e42      	subs	r2, r0, #1
 8007c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c0c:	3201      	adds	r2, #1
 8007c0e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007c12:	b192      	cbz	r2, 8007c3a <HAL_I2C_Init+0x15e>
 8007c14:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8007c18:	e7b5      	b.n	8007b86 <HAL_I2C_Init+0xaa>
 8007c1a:	1e42      	subs	r2, r0, #1
 8007c1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c28:	3201      	adds	r2, #1
 8007c2a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007c2e:	b132      	cbz	r2, 8007c3e <HAL_I2C_Init+0x162>
 8007c30:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8007c34:	e7a7      	b.n	8007b86 <HAL_I2C_Init+0xaa>
 8007c36:	2304      	movs	r3, #4
 8007c38:	e7a5      	b.n	8007b86 <HAL_I2C_Init+0xaa>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e7a3      	b.n	8007b86 <HAL_I2C_Init+0xaa>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e7a1      	b.n	8007b86 <HAL_I2C_Init+0xaa>
    return HAL_ERROR;
 8007c42:	2001      	movs	r0, #1
}
 8007c44:	4770      	bx	lr
    return HAL_ERROR;
 8007c46:	2001      	movs	r0, #1
 8007c48:	e7c9      	b.n	8007bde <HAL_I2C_Init+0x102>
 8007c4a:	bf00      	nop
 8007c4c:	000186a0 	.word	0x000186a0
 8007c50:	001e847f 	.word	0x001e847f
 8007c54:	003d08ff 	.word	0x003d08ff
 8007c58:	431bde83 	.word	0x431bde83
 8007c5c:	10624dd3 	.word	0x10624dd3

08007c60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c62:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d07a      	beq.n	8007d5e <HAL_PCD_Init+0xfe>
 8007c68:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c6a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8007c6e:	b1db      	cbz	r3, 8007ca8 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c70:	2303      	movs	r3, #3
 8007c72:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c76:	6828      	ldr	r0, [r5, #0]
 8007c78:	f002 f992 	bl	8009fa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c7c:	462c      	mov	r4, r5
 8007c7e:	f854 7b10 	ldr.w	r7, [r4], #16
 8007c82:	466e      	mov	r6, sp
 8007c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	1d2b      	adds	r3, r5, #4
 8007c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c90:	4638      	mov	r0, r7
 8007c92:	f002 f975 	bl	8009f80 <USB_CoreInit>
 8007c96:	4604      	mov	r4, r0
 8007c98:	b158      	cbz	r0, 8007cb2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8007ca0:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	b007      	add	sp, #28
 8007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8007ca8:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8007cac:	f003 fffe 	bl	800bcac <HAL_PCD_MspInit>
 8007cb0:	e7de      	b.n	8007c70 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6828      	ldr	r0, [r5, #0]
 8007cb6:	f002 f97d 	bl	8009fb4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cba:	6868      	ldr	r0, [r5, #4]
 8007cbc:	b388      	cbz	r0, 8007d22 <HAL_PCD_Init+0xc2>
 8007cbe:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8007cc0:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cc2:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8007cc4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007cc8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007ccc:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8007cd0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007cd4:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cd6:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8007cda:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007cdc:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8007cde:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007ce2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007ce6:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ce8:	3301      	adds	r3, #1
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	4283      	cmp	r3, r0
 8007cee:	d3e9      	bcc.n	8007cc4 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007cf6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007cfa:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8007cfe:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d02:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d06:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d0a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007d12:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007d16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d1a:	3401      	adds	r4, #1
 8007d1c:	b2e4      	uxtb	r4, r4
 8007d1e:	4284      	cmp	r4, r0
 8007d20:	d3e7      	bcc.n	8007cf2 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d22:	462c      	mov	r4, r5
 8007d24:	f854 7b10 	ldr.w	r7, [r4], #16
 8007d28:	466e      	mov	r6, sp
 8007d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	1d2b      	adds	r3, r5, #4
 8007d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d36:	4638      	mov	r0, r7
 8007d38:	f002 f93e 	bl	8009fb8 <USB_DevInit>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	b120      	cbz	r0, 8007d4a <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d40:	2302      	movs	r3, #2
 8007d42:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8007d46:	2401      	movs	r4, #1
 8007d48:	e7ab      	b.n	8007ca2 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d56:	6828      	ldr	r0, [r5, #0]
 8007d58:	f002 fc26 	bl	800a5a8 <USB_DevDisconnect>
  return HAL_OK;
 8007d5c:	e7a1      	b.n	8007ca2 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8007d5e:	2401      	movs	r4, #1
 8007d60:	e79f      	b.n	8007ca2 <HAL_PCD_Init+0x42>

08007d62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d62:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8007d64:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d011      	beq.n	8007d90 <HAL_PCD_Start+0x2e>
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	2501      	movs	r5, #1
 8007d70:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007d74:	6800      	ldr	r0, [r0, #0]
 8007d76:	f002 f90a 	bl	8009f8e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f004 f8aa 	bl	800bed6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8007d82:	6820      	ldr	r0, [r4, #0]
 8007d84:	f002 fc0e 	bl	800a5a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8007d90:	2002      	movs	r0, #2
 8007d92:	e7fc      	b.n	8007d8e <HAL_PCD_Start+0x2c>

08007d94 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8007d94:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d00d      	beq.n	8007db8 <HAL_PCD_SetAddress+0x24>
{
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007da0:	2301      	movs	r3, #1
 8007da2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007da6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	f002 fbf4 	bl	800a598 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007db0:	2000      	movs	r0, #0
 8007db2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8007db6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007db8:	2002      	movs	r0, #2
}
 8007dba:	4770      	bx	lr

08007dbc <HAL_PCD_IRQHandler>:
{
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007dc4:	6800      	ldr	r0, [r0, #0]
 8007dc6:	f002 fbf1 	bl	800a5ac <USB_ReadInterrupts>
 8007dca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007dce:	f040 809a 	bne.w	8007f06 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	f002 fbea 	bl	800a5ac <USB_ReadInterrupts>
 8007dd8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8007ddc:	f040 84f1 	bne.w	80087c2 <HAL_PCD_IRQHandler+0xa06>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8007de0:	6820      	ldr	r0, [r4, #0]
 8007de2:	f002 fbe3 	bl	800a5ac <USB_ReadInterrupts>
 8007de6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007dea:	d008      	beq.n	8007dfe <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007dec:	6822      	ldr	r2, [r4, #0]
 8007dee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	0c1b      	lsrs	r3, r3, #16
 8007dfa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	f002 fbd4 	bl	800a5ac <USB_ReadInterrupts>
 8007e04:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007e08:	d008      	beq.n	8007e1c <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007e10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	f002 fbc5 	bl	800a5ac <USB_ReadInterrupts>
 8007e22:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8007e26:	f040 84de 	bne.w	80087e6 <HAL_PCD_IRQHandler+0xa2a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	f002 fbbe 	bl	800a5ac <USB_ReadInterrupts>
 8007e30:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8007e34:	d04e      	beq.n	8007ed4 <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8007e36:	6826      	ldr	r6, [r4, #0]
 8007e38:	4631      	mov	r1, r6
 8007e3a:	f1ad 0202 	sub.w	r2, sp, #2
 8007e3e:	f10d 050e 	add.w	r5, sp, #14
 8007e42:	4613      	mov	r3, r2
 8007e44:	f831 0b04 	ldrh.w	r0, [r1], #4
 8007e48:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 8007e4c:	42ab      	cmp	r3, r5
 8007e4e:	d1f9      	bne.n	8007e44 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8007e50:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	0c1b      	lsrs	r3, r3, #16
 8007e6c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8007e70:	6821      	ldr	r1, [r4, #0]
 8007e72:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8007e76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e7a:	d0fa      	beq.n	8007e72 <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007e7c:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8007e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e84:	041b      	lsls	r3, r3, #16
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 8007e8c:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8007e8e:	6821      	ldr	r1, [r4, #0]
 8007e90:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8007e94:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 8007e96:	3304      	adds	r3, #4
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d1f8      	bne.n	8007e8e <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f043 0308 	orr.w	r3, r3, #8
 8007ea8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb6:	041b      	lsls	r3, r3, #16
 8007eb8:	0c1b      	lsrs	r3, r3, #16
 8007eba:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f043 0304 	orr.w	r3, r3, #4
 8007eca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f003 ff44 	bl	800bd5c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	f002 fb69 	bl	800a5ac <USB_ReadInterrupts>
 8007eda:	f410 7f00 	tst.w	r0, #512	; 0x200
 8007ede:	f040 84a2 	bne.w	8008826 <HAL_PCD_IRQHandler+0xa6a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	f002 fb62 	bl	800a5ac <USB_ReadInterrupts>
 8007ee8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007eec:	d008      	beq.n	8007f00 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8007f00:	b004      	add	sp, #16
 8007f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007f0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007f10:	f43f af5f 	beq.w	8007dd2 <HAL_PCD_IRQHandler+0x16>
 8007f14:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007f16:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007f1a:	f24c 0880 	movw	r8, #49280	; 0xc080
 8007f1e:	e058      	b.n	8007fd2 <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007f20:	8803      	ldrh	r3, [r0, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8007f44:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007f48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007f4c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f54:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007f56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007f58:	4413      	add	r3, r2
 8007f5a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f003 fed8 	bl	800bd14 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007f64:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007f68:	b363      	cbz	r3, 8007fc4 <HAL_PCD_IRQHandler+0x208>
 8007f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f6c:	bb53      	cbnz	r3, 8007fc4 <HAL_PCD_IRQHandler+0x208>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007f6e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f78:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007f7c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8007f80:	e020      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x208>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8007f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007f94:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8007f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f9c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007fa0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8007fa4:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8007fa8:	f002 ff47 	bl	800ae3a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007fac:	6822      	ldr	r2, [r4, #0]
 8007fae:	8813      	ldrh	r3, [r2, #0]
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb4:	051b      	lsls	r3, r3, #20
 8007fb6:	0d1b      	lsrs	r3, r3, #20
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f003 fe94 	bl	800bcec <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007fca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007fce:	f43f af00 	beq.w	8007dd2 <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8007fd2:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8007fd6:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8007fd8:	f015 050f 	ands.w	r5, r5, #15
 8007fdc:	d173      	bne.n	80080c6 <HAL_PCD_IRQHandler+0x30a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007fde:	f013 0f10 	tst.w	r3, #16
 8007fe2:	d09d      	beq.n	8007f20 <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007fe4:	8803      	ldrh	r3, [r0, #0]
 8007fe6:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007fe8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007fec:	d1c9      	bne.n	8007f82 <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007fee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007ff2:	d0e7      	beq.n	8007fc4 <HAL_PCD_IRQHandler+0x208>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007ff4:	8803      	ldrh	r3, [r0, #0]
 8007ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffa:	051b      	lsls	r3, r3, #20
 8007ffc:	0d1b      	lsrs	r3, r3, #20
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008004:	6820      	ldr	r0, [r4, #0]
 8008006:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800800a:	b29b      	uxth	r3, r3
 800800c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8008010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008014:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008018:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800801c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008020:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008024:	b18b      	cbz	r3, 800804a <HAL_PCD_IRQHandler+0x28e>
 8008026:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800802a:	b171      	cbz	r1, 800804a <HAL_PCD_IRQHandler+0x28e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800802c:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8008030:	f002 ff03 	bl	800ae3a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008038:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 800803c:	4413      	add	r3, r2
 800803e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008042:	4631      	mov	r1, r6
 8008044:	4620      	mov	r0, r4
 8008046:	f003 fe59 	bl	800bcfc <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	881a      	ldrh	r2, [r3, #0]
 800804e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008052:	d1b7      	bne.n	8007fc4 <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008054:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008058:	b292      	uxth	r2, r2
 800805a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800805e:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8008062:	b9c1      	cbnz	r1, 8008096 <HAL_PCD_IRQHandler+0x2da>
 8008064:	5a99      	ldrh	r1, [r3, r2]
 8008066:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800806a:	0409      	lsls	r1, r1, #16
 800806c:	0c09      	lsrs	r1, r1, #16
 800806e:	5299      	strh	r1, [r3, r2]
 8008070:	5a99      	ldrh	r1, [r3, r2]
 8008072:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8008076:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800807a:	b289      	uxth	r1, r1
 800807c:	5299      	strh	r1, [r3, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	8813      	ldrh	r3, [r2, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008090:	433b      	orrs	r3, r7
 8008092:	8013      	strh	r3, [r2, #0]
 8008094:	e796      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x208>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008096:	293e      	cmp	r1, #62	; 0x3e
 8008098:	d808      	bhi.n	80080ac <HAL_PCD_IRQHandler+0x2f0>
 800809a:	0848      	lsrs	r0, r1, #1
 800809c:	f011 0f01 	tst.w	r1, #1
 80080a0:	bf18      	it	ne
 80080a2:	3001      	addne	r0, #1
 80080a4:	0281      	lsls	r1, r0, #10
 80080a6:	b289      	uxth	r1, r1
 80080a8:	5299      	strh	r1, [r3, r2]
 80080aa:	e7e8      	b.n	800807e <HAL_PCD_IRQHandler+0x2c2>
 80080ac:	0948      	lsrs	r0, r1, #5
 80080ae:	f011 0f1f 	tst.w	r1, #31
 80080b2:	bf08      	it	eq
 80080b4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80080b8:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 80080bc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80080c0:	b289      	uxth	r1, r1
 80080c2:	5299      	strh	r1, [r3, r2]
 80080c4:	e7db      	b.n	800807e <HAL_PCD_IRQHandler+0x2c2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80080c6:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80080ca:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80080ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80080d2:	d154      	bne.n	800817e <HAL_PCD_IRQHandler+0x3c2>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80080d4:	f019 0f80 	tst.w	r9, #128	; 0x80
 80080d8:	f43f af74 	beq.w	8007fc4 <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80080e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80080fa:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80080fe:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 8008102:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8008106:	2b03      	cmp	r3, #3
 8008108:	d007      	beq.n	800811a <HAL_PCD_IRQHandler+0x35e>
 800810a:	b133      	cbz	r3, 800811a <HAL_PCD_IRQHandler+0x35e>
 800810c:	2b02      	cmp	r3, #2
 800810e:	f040 818d 	bne.w	800842c <HAL_PCD_IRQHandler+0x670>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8008112:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008116:	f040 8189 	bne.w	800842c <HAL_PCD_IRQHandler+0x670>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008120:	b29b      	uxth	r3, r3
          if (ep->xfer_len > TxByteNbre)
 8008122:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8008126:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800812a:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800812c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8008130:	3302      	adds	r3, #2
 8008132:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008136:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800813a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 800813e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008142:	429a      	cmp	r2, r3
 8008144:	f240 837d 	bls.w	8008842 <HAL_PCD_IRQHandler+0xa86>
            ep->xfer_len -= TxByteNbre;
 8008148:	1ad2      	subs	r2, r2, r3
 800814a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800814e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008152:	640a      	str	r2, [r1, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8008154:	2a00      	cmp	r2, #0
 8008156:	f000 8379 	beq.w	800884c <HAL_PCD_IRQHandler+0xa90>
            ep->xfer_buff += TxByteNbre;
 800815a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800815e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008162:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008164:	4419      	add	r1, r3
 8008166:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8008168:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800816a:	440b      	add	r3, r1
 800816c:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800816e:	3501      	adds	r5, #1
 8008170:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008174:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008178:	f002 fa37 	bl	800a5ea <USB_EPStartXfer>
 800817c:	e722      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x208>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800817e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8008182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008186:	051b      	lsls	r3, r3, #20
 8008188:	0d1b      	lsrs	r3, r3, #20
 800818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818e:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8008192:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008196:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800819a:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d145      	bne.n	800822e <HAL_PCD_IRQHandler+0x472>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80081a2:	6820      	ldr	r0, [r4, #0]
 80081a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80081ae:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80081b2:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80081b6:	3306      	adds	r3, #6
 80081b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80081c0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80081c4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 80081c8:	f1ba 0f00 	cmp.w	sl, #0
 80081cc:	d123      	bne.n	8008216 <HAL_PCD_IRQHandler+0x45a>
        ep->xfer_count += count;
 80081ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80081d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80081d6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80081da:	4452      	add	r2, sl
 80081dc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80081e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80081e4:	4452      	add	r2, sl
 80081e6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80081ea:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80081ee:	b143      	cbz	r3, 8008202 <HAL_PCD_IRQHandler+0x446>
 80081f0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80081f4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80081f8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80081fc:	459a      	cmp	sl, r3
 80081fe:	f080 810b 	bcs.w	8008418 <HAL_PCD_IRQHandler+0x65c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008202:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008206:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800820a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800820e:	4620      	mov	r0, r4
 8008210:	f003 fd74 	bl	800bcfc <HAL_PCD_DataOutStageCallback>
 8008214:	e75e      	b.n	80080d4 <HAL_PCD_IRQHandler+0x318>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008216:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800821a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800821e:	4653      	mov	r3, sl
 8008220:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8008224:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008228:	f002 fe07 	bl	800ae3a <USB_ReadPMA>
 800822c:	e7cf      	b.n	80081ce <HAL_PCD_IRQHandler+0x412>
          if (ep->type == EP_TYPE_BULK)
 800822e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008232:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008236:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 800823a:	2b02      	cmp	r3, #2
 800823c:	d037      	beq.n	80082ae <HAL_PCD_IRQHandler+0x4f2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800823e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8008242:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008246:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 800824a:	6821      	ldr	r1, [r4, #0]
 800824c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008262:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800826c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008270:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008274:	f000 80b4 	beq.w	80083e0 <HAL_PCD_IRQHandler+0x624>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008278:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800827c:	b29b      	uxth	r3, r3
 800827e:	3302      	adds	r3, #2
 8008280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008284:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008288:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 800828c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8008290:	f1ba 0f00 	cmp.w	sl, #0
 8008294:	d09b      	beq.n	80081ce <HAL_PCD_IRQHandler+0x412>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008296:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800829a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800829e:	4653      	mov	r3, sl
 80082a0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80082a4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80082a8:	f002 fdc7 	bl	800ae3a <USB_ReadPMA>
 80082ac:	e78f      	b.n	80081ce <HAL_PCD_IRQHandler+0x412>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80082ae:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80082b2:	d04a      	beq.n	800834a <HAL_PCD_IRQHandler+0x58e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80082b4:	6822      	ldr	r2, [r4, #0]
 80082b6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80082c0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80082c4:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 80082c8:	3302      	adds	r3, #2
 80082ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80082ce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80082d2:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80082d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80082da:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 80082de:	4553      	cmp	r3, sl
 80082e0:	f0c0 8364 	bcc.w	80089ac <HAL_PCD_IRQHandler+0xbf0>
      ep->xfer_len -= count;
 80082e4:	eba3 030a 	sub.w	r3, r3, sl
 80082e8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80082ec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80082f0:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 835f 	beq.w	80089b8 <HAL_PCD_IRQHandler+0xbfc>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80082fa:	f019 0f40 	tst.w	r9, #64	; 0x40
 80082fe:	d013      	beq.n	8008328 <HAL_PCD_IRQHandler+0x56c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008300:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008304:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008308:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008324:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	f43f af4f 	beq.w	80081ce <HAL_PCD_IRQHandler+0x412>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008330:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8008334:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008338:	4653      	mov	r3, sl
 800833a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800833e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008342:	6820      	ldr	r0, [r4, #0]
 8008344:	f002 fd79 	bl	800ae3a <USB_ReadPMA>
 8008348:	e741      	b.n	80081ce <HAL_PCD_IRQHandler+0x412>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008350:	b29b      	uxth	r3, r3
 8008352:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8008356:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800835a:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 800835e:	3306      	adds	r3, #6
 8008360:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008364:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008368:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 800836c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8008370:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8008374:	4553      	cmp	r3, sl
 8008376:	f0c0 832c 	bcc.w	80089d2 <HAL_PCD_IRQHandler+0xc16>
      ep->xfer_len -= count;
 800837a:	eba3 030a 	sub.w	r3, r3, sl
 800837e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8008382:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8008386:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8327 	beq.w	80089de <HAL_PCD_IRQHandler+0xc22>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008390:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008394:	d113      	bne.n	80083be <HAL_PCD_IRQHandler+0x602>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008396:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800839a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800839e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80083a2:	6822      	ldr	r2, [r4, #0]
 80083a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083ba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 80083be:	f1ba 0f00 	cmp.w	sl, #0
 80083c2:	f43f af04 	beq.w	80081ce <HAL_PCD_IRQHandler+0x412>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80083c6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80083ca:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80083ce:	4653      	mov	r3, sl
 80083d0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80083d4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80083d8:	6820      	ldr	r0, [r4, #0]
 80083da:	f002 fd2e 	bl	800ae3a <USB_ReadPMA>
 80083de:	e6f6      	b.n	80081ce <HAL_PCD_IRQHandler+0x412>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3306      	adds	r3, #6
 80083e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80083f0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80083f4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80083f8:	f1ba 0f00 	cmp.w	sl, #0
 80083fc:	f43f aee7 	beq.w	80081ce <HAL_PCD_IRQHandler+0x412>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008400:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8008404:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008408:	4653      	mov	r3, sl
 800840a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800840e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008412:	f002 fd12 	bl	800ae3a <USB_ReadPMA>
 8008416:	e6da      	b.n	80081ce <HAL_PCD_IRQHandler+0x412>
        ep = &hpcd->OUT_ep[epindex];
 8008418:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800841c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008420:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	f002 f8e0 	bl	800a5ea <USB_EPStartXfer>
 800842a:	e653      	b.n	80080d4 <HAL_PCD_IRQHandler+0x318>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800842c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008430:	f000 80e8 	beq.w	8008604 <HAL_PCD_IRQHandler+0x848>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800843a:	b29b      	uxth	r3, r3
 800843c:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8008440:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8008444:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008448:	6c09      	ldr	r1, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800844a:	3302      	adds	r3, #2
 800844c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008450:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008454:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8008458:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800845c:	4561      	cmp	r1, ip
 800845e:	f240 81fc 	bls.w	800885a <HAL_PCD_IRQHandler+0xa9e>
      ep->xfer_len -= TxByteNbre;
 8008462:	eba1 010c 	sub.w	r1, r1, ip
 8008466:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800846a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800846e:	6419      	str	r1, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8008470:	2900      	cmp	r1, #0
 8008472:	f000 81f7 	beq.w	8008864 <HAL_PCD_IRQHandler+0xaa8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008476:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800847a:	d00a      	beq.n	8008492 <HAL_PCD_IRQHandler+0x6d6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800847c:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8008480:	b29b      	uxth	r3, r3
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	ea48 0303 	orr.w	r3, r8, r3
 800848e:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8008492:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008496:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800849a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d029      	beq.n	80084f6 <HAL_PCD_IRQHandler+0x73a>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80084a2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80084ba:	433b      	orrs	r3, r7
 80084bc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80084c0:	e580      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x208>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	f040 8203 	bne.w	80088ce <HAL_PCD_IRQHandler+0xb12>
 80084c8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80084cc:	b299      	uxth	r1, r3
 80084ce:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80084d2:	440b      	add	r3, r1
 80084d4:	0100      	lsls	r0, r0, #4
 80084d6:	521e      	strh	r6, [r3, r0]
 80084d8:	e1dd      	b.n	8008896 <HAL_PCD_IRQHandler+0xada>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084da:	2a01      	cmp	r2, #1
 80084dc:	f040 81f7 	bne.w	80088ce <HAL_PCD_IRQHandler+0xb12>
 80084e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80084e4:	b292      	uxth	r2, r2
 80084e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084ea:	4413      	add	r3, r2
 80084ec:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80084f0:	0112      	lsls	r2, r2, #4
 80084f2:	529e      	strh	r6, [r3, r2]
 80084f4:	e1eb      	b.n	80088ce <HAL_PCD_IRQHandler+0xb12>
        ep->xfer_buff += TxByteNbre;
 80084f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80084fa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80084fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008500:	4462      	add	r2, ip
 8008502:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8008504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008506:	4462      	add	r2, ip
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800850a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	4299      	cmp	r1, r3
 8008510:	d325      	bcc.n	800855e <HAL_PCD_IRQHandler+0x7a2>
          ep->xfer_len_db -= len;
 8008512:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8008516:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800851a:	1ac9      	subs	r1, r1, r3
 800851c:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800851e:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8008522:	2a00      	cmp	r2, #0
 8008524:	d146      	bne.n	80085b4 <HAL_PCD_IRQHandler+0x7f8>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 800852c:	fa1f fc8c 	uxth.w	ip, ip
 8008530:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8008534:	0110      	lsls	r0, r2, #4
 8008536:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800853a:	4461      	add	r1, ip
 800853c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8008540:	bb63      	cbnz	r3, 800859c <HAL_PCD_IRQHandler+0x7e0>
 8008542:	5a42      	ldrh	r2, [r0, r1]
 8008544:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008548:	0412      	lsls	r2, r2, #16
 800854a:	0c12      	lsrs	r2, r2, #16
 800854c:	5242      	strh	r2, [r0, r1]
 800854e:	5a42      	ldrh	r2, [r0, r1]
 8008550:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008554:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008558:	b292      	uxth	r2, r2
 800855a:	5242      	strh	r2, [r0, r1]
 800855c:	e02c      	b.n	80085b8 <HAL_PCD_IRQHandler+0x7fc>
        else if (ep->xfer_len_db == 0U)
 800855e:	b939      	cbnz	r1, 8008570 <HAL_PCD_IRQHandler+0x7b4>
          ep->xfer_fill_db = 0U;
 8008560:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008564:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008568:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 800856c:	4663      	mov	r3, ip
 800856e:	e7d6      	b.n	800851e <HAL_PCD_IRQHandler+0x762>
          ep->xfer_fill_db = 0U;
 8008570:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008574:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008578:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800857c:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800857e:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8008582:	b9b2      	cbnz	r2, 80085b2 <HAL_PCD_IRQHandler+0x7f6>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800858a:	b290      	uxth	r0, r2
 800858c:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
 8008590:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008594:	4402      	add	r2, r0
 8008596:	eb02 120c 	add.w	r2, r2, ip, lsl #4
          len = ep->xfer_len_db;
 800859a:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800859c:	2b3e      	cmp	r3, #62	; 0x3e
 800859e:	d817      	bhi.n	80085d0 <HAL_PCD_IRQHandler+0x814>
 80085a0:	0859      	lsrs	r1, r3, #1
 80085a2:	f013 0f01 	tst.w	r3, #1
 80085a6:	bf18      	it	ne
 80085a8:	3101      	addne	r1, #1
 80085aa:	0289      	lsls	r1, r1, #10
 80085ac:	b289      	uxth	r1, r1
 80085ae:	8011      	strh	r1, [r2, #0]
 80085b0:	e002      	b.n	80085b8 <HAL_PCD_IRQHandler+0x7fc>
          len = ep->xfer_len_db;
 80085b2:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80085b4:	2a01      	cmp	r2, #1
 80085b6:	d018      	beq.n	80085ea <HAL_PCD_IRQHandler+0x82e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80085b8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80085bc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80085c0:	4611      	mov	r1, r2
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80085c6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	f001 fff5 	bl	800a5b8 <USB_WritePMA>
 80085ce:	e768      	b.n	80084a2 <HAL_PCD_IRQHandler+0x6e6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80085d0:	0959      	lsrs	r1, r3, #5
 80085d2:	f013 0f1f 	tst.w	r3, #31
 80085d6:	bf08      	it	eq
 80085d8:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80085dc:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80085e0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80085e4:	b289      	uxth	r1, r1
 80085e6:	8011      	strh	r1, [r2, #0]
 80085e8:	e7e6      	b.n	80085b8 <HAL_PCD_IRQHandler+0x7fc>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80085f0:	b280      	uxth	r0, r0
 80085f2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80085f6:	0109      	lsls	r1, r1, #4
 80085f8:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80085fc:	4402      	add	r2, r0
 80085fe:	b298      	uxth	r0, r3
 8008600:	5288      	strh	r0, [r1, r2]
 8008602:	e7d9      	b.n	80085b8 <HAL_PCD_IRQHandler+0x7fc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008604:	6822      	ldr	r2, [r4, #0]
 8008606:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800860a:	b29b      	uxth	r3, r3
 800860c:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8008610:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8008614:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008618:	6c08      	ldr	r0, [r1, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800861a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800861e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008622:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8008626:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800862a:	4288      	cmp	r0, r1
 800862c:	f0c0 8167 	bcc.w	80088fe <HAL_PCD_IRQHandler+0xb42>
      ep->xfer_len -= TxByteNbre;
 8008630:	1a40      	subs	r0, r0, r1
 8008632:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008636:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800863a:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800863c:	2800      	cmp	r0, #0
 800863e:	f000 8163 	beq.w	8008908 <HAL_PCD_IRQHandler+0xb4c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008642:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8008646:	d10a      	bne.n	800865e <HAL_PCD_IRQHandler+0x8a2>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008648:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800864c:	b29b      	uxth	r3, r3
 800864e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008656:	ea48 0303 	orr.w	r3, r8, r3
 800865a:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800865e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008662:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008666:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800866a:	2b01      	cmp	r3, #1
 800866c:	f47f af19 	bne.w	80084a2 <HAL_PCD_IRQHandler+0x6e6>
        ep->xfer_buff += TxByteNbre;
 8008670:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008674:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800867a:	440a      	add	r2, r1
 800867c:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800867e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008680:	440a      	add	r2, r1
 8008682:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8008684:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	4298      	cmp	r0, r3
 800868a:	d343      	bcc.n	8008714 <HAL_PCD_IRQHandler+0x958>
          ep->xfer_len_db -= len;
 800868c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8008690:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008694:	1ac0      	subs	r0, r0, r3
 8008696:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	4611      	mov	r1, r2
 800869c:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 80086a0:	f1bc 0f00 	cmp.w	ip, #0
 80086a4:	d165      	bne.n	8008772 <HAL_PCD_IRQHandler+0x9b6>
 80086a6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80086aa:	b289      	uxth	r1, r1
 80086ac:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80086b0:	440a      	add	r2, r1
 80086b2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80086b6:	0108      	lsls	r0, r1, #4
 80086b8:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d14c      	bne.n	800875a <HAL_PCD_IRQHandler+0x99e>
 80086c0:	5a11      	ldrh	r1, [r2, r0]
 80086c2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80086c6:	0409      	lsls	r1, r1, #16
 80086c8:	0c09      	lsrs	r1, r1, #16
 80086ca:	5211      	strh	r1, [r2, r0]
 80086cc:	5a11      	ldrh	r1, [r2, r0]
 80086ce:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80086d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80086d6:	b289      	uxth	r1, r1
 80086d8:	5211      	strh	r1, [r2, r0]
 80086da:	e04d      	b.n	8008778 <HAL_PCD_IRQHandler+0x9bc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 814d 	bne.w	800897c <HAL_PCD_IRQHandler+0xbc0>
 80086e2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80086e6:	b299      	uxth	r1, r3
 80086e8:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80086ec:	440b      	add	r3, r1
 80086ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80086f2:	f823 600c 	strh.w	r6, [r3, ip]
 80086f6:	e125      	b.n	8008944 <HAL_PCD_IRQHandler+0xb88>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086f8:	2a01      	cmp	r2, #1
 80086fa:	f040 813f 	bne.w	800897c <HAL_PCD_IRQHandler+0xbc0>
 80086fe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8008702:	b289      	uxth	r1, r1
 8008704:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8008708:	0112      	lsls	r2, r2, #4
 800870a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800870e:	440b      	add	r3, r1
 8008710:	52d6      	strh	r6, [r2, r3]
 8008712:	e133      	b.n	800897c <HAL_PCD_IRQHandler+0xbc0>
        else if (ep->xfer_len_db == 0U)
 8008714:	b938      	cbnz	r0, 8008726 <HAL_PCD_IRQHandler+0x96a>
          ep->xfer_fill_db = 0U;
 8008716:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800871a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800871e:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8008722:	460b      	mov	r3, r1
 8008724:	e7b8      	b.n	8008698 <HAL_PCD_IRQHandler+0x8dc>
          ep->xfer_len_db = 0U;
 8008726:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800872a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800872e:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8008730:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	4611      	mov	r1, r2
 8008738:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 800873c:	f1bc 0f00 	cmp.w	ip, #0
 8008740:	d116      	bne.n	8008770 <HAL_PCD_IRQHandler+0x9b4>
 8008742:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008746:	fa1f fc83 	uxth.w	ip, r3
 800874a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800874e:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8008752:	4463      	add	r3, ip
 8008754:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 8008758:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800875a:	2b3e      	cmp	r3, #62	; 0x3e
 800875c:	d818      	bhi.n	8008790 <HAL_PCD_IRQHandler+0x9d4>
 800875e:	085a      	lsrs	r2, r3, #1
 8008760:	f013 0f01 	tst.w	r3, #1
 8008764:	bf18      	it	ne
 8008766:	3201      	addne	r2, #1
 8008768:	0292      	lsls	r2, r2, #10
 800876a:	b292      	uxth	r2, r2
 800876c:	800a      	strh	r2, [r1, #0]
 800876e:	e003      	b.n	8008778 <HAL_PCD_IRQHandler+0x9bc>
          len = ep->xfer_len_db;
 8008770:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008772:	f1bc 0f01 	cmp.w	ip, #1
 8008776:	d018      	beq.n	80087aa <HAL_PCD_IRQHandler+0x9ee>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008778:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800877c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008780:	4611      	mov	r1, r2
 8008782:	b29b      	uxth	r3, r3
 8008784:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008786:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	f001 ff15 	bl	800a5b8 <USB_WritePMA>
 800878e:	e688      	b.n	80084a2 <HAL_PCD_IRQHandler+0x6e6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008790:	095a      	lsrs	r2, r3, #5
 8008792:	f013 0f1f 	tst.w	r3, #31
 8008796:	bf08      	it	eq
 8008798:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800879c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80087a0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80087a4:	b292      	uxth	r2, r2
 80087a6:	800a      	strh	r2, [r1, #0]
 80087a8:	e7e6      	b.n	8008778 <HAL_PCD_IRQHandler+0x9bc>
 80087aa:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80087ae:	b280      	uxth	r0, r0
 80087b0:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80087b4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80087b8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80087bc:	b299      	uxth	r1, r3
 80087be:	5211      	strh	r1, [r2, r0]
 80087c0:	e7da      	b.n	8008778 <HAL_PCD_IRQHandler+0x9bc>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80087c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80087d4:	4620      	mov	r0, r4
 80087d6:	f003 faae 	bl	800bd36 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80087da:	2100      	movs	r1, #0
 80087dc:	4620      	mov	r0, r4
 80087de:	f7ff fad9 	bl	8007d94 <HAL_PCD_SetAddress>
 80087e2:	f7ff bafd 	b.w	8007de0 <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	041b      	lsls	r3, r3, #16
 80087f2:	0c1b      	lsrs	r3, r3, #16
 80087f4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80087fe:	f023 0308 	bic.w	r3, r3, #8
 8008802:	041b      	lsls	r3, r3, #16
 8008804:	0c1b      	lsrs	r3, r3, #16
 8008806:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800880a:	4620      	mov	r0, r4
 800880c:	f003 fab6 	bl	800bd7c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008810:	6822      	ldr	r2, [r4, #0]
 8008812:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	0c1b      	lsrs	r3, r3, #16
 800881e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8008822:	f7ff bb02 	b.w	8007e2a <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800882c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008830:	041b      	lsls	r3, r3, #16
 8008832:	0c1b      	lsrs	r3, r3, #16
 8008834:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008838:	4620      	mov	r0, r4
 800883a:	f003 fa76 	bl	800bd2a <HAL_PCD_SOFCallback>
 800883e:	f7ff bb50 	b.w	8007ee2 <HAL_PCD_IRQHandler+0x126>
 8008842:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008846:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800884a:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800884c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8008850:	4620      	mov	r0, r4
 8008852:	f003 fa5f 	bl	800bd14 <HAL_PCD_DataInStageCallback>
 8008856:	f7ff bbb5 	b.w	8007fc4 <HAL_PCD_IRQHandler+0x208>
 800885a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800885e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8008862:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008864:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8008868:	2b00      	cmp	r3, #0
 800886a:	f47f ae2a 	bne.w	80084c2 <HAL_PCD_IRQHandler+0x706>
 800886e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008872:	b29b      	uxth	r3, r3
 8008874:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8008878:	441a      	add	r2, r3
 800887a:	0100      	lsls	r0, r0, #4
 800887c:	5a13      	ldrh	r3, [r2, r0]
 800887e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008882:	041b      	lsls	r3, r3, #16
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	5213      	strh	r3, [r2, r0]
 8008888:	5a13      	ldrh	r3, [r2, r0]
 800888a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008892:	b29b      	uxth	r3, r3
 8008894:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800889c:	2a00      	cmp	r2, #0
 800889e:	f47f ae1c 	bne.w	80084da <HAL_PCD_IRQHandler+0x71e>
 80088a2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80088a6:	b292      	uxth	r2, r2
 80088a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088ac:	4413      	add	r3, r2
 80088ae:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80088b2:	0109      	lsls	r1, r1, #4
 80088b4:	5a5a      	ldrh	r2, [r3, r1]
 80088b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80088ba:	0412      	lsls	r2, r2, #16
 80088bc:	0c12      	lsrs	r2, r2, #16
 80088be:	525a      	strh	r2, [r3, r1]
 80088c0:	5a5a      	ldrh	r2, [r3, r1]
 80088c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80088c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80088ca:	b292      	uxth	r2, r2
 80088cc:	525a      	strh	r2, [r3, r1]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80088ce:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80088d2:	4620      	mov	r0, r4
 80088d4:	f003 fa1e 	bl	800bd14 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80088d8:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80088dc:	f43f ade1 	beq.w	80084a2 <HAL_PCD_IRQHandler+0x6e6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80088e0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80088e4:	6822      	ldr	r2, [r4, #0]
 80088e6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f4:	ea48 0303 	orr.w	r3, r8, r3
 80088f8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80088fc:	e5d1      	b.n	80084a2 <HAL_PCD_IRQHandler+0x6e6>
 80088fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008902:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8008906:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008908:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 800890c:	2b00      	cmp	r3, #0
 800890e:	f47f aee5 	bne.w	80086dc <HAL_PCD_IRQHandler+0x920>
 8008912:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008916:	b29b      	uxth	r3, r3
 8008918:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800891c:	441a      	add	r2, r3
 800891e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008922:	f832 300c 	ldrh.w	r3, [r2, ip]
 8008926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	f822 300c 	strh.w	r3, [r2, ip]
 8008932:	f832 300c 	ldrh.w	r3, [r2, ip]
 8008936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893e:	b29b      	uxth	r3, r3
 8008940:	f822 300c 	strh.w	r3, [r2, ip]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800894a:	2a00      	cmp	r2, #0
 800894c:	f47f aed4 	bne.w	80086f8 <HAL_PCD_IRQHandler+0x93c>
 8008950:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008954:	b292      	uxth	r2, r2
 8008956:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800895a:	0109      	lsls	r1, r1, #4
 800895c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008960:	441a      	add	r2, r3
 8008962:	5a8b      	ldrh	r3, [r1, r2]
 8008964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008968:	041b      	lsls	r3, r3, #16
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	528b      	strh	r3, [r1, r2]
 800896e:	5a8b      	ldrh	r3, [r1, r2]
 8008970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008978:	b29b      	uxth	r3, r3
 800897a:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800897c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8008980:	4620      	mov	r0, r4
 8008982:	f003 f9c7 	bl	800bd14 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008986:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800898a:	f47f ad8a 	bne.w	80084a2 <HAL_PCD_IRQHandler+0x6e6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800898e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	ea48 0303 	orr.w	r3, r8, r3
 80089a6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80089aa:	e57a      	b.n	80084a2 <HAL_PCD_IRQHandler+0x6e6>
 80089ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80089b0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80089b4:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80089b8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089ca:	433b      	orrs	r3, r7
 80089cc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80089d0:	e493      	b.n	80082fa <HAL_PCD_IRQHandler+0x53e>
 80089d2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80089d6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80089da:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80089de:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089f0:	433b      	orrs	r3, r7
 80089f2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80089f6:	e4cb      	b.n	8008390 <HAL_PCD_IRQHandler+0x5d4>

080089f8 <HAL_PCD_EP_Open>:
{
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4605      	mov	r5, r0
 80089fc:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80089fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008a02:	d125      	bne.n	8008a50 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a04:	f001 0007 	and.w	r0, r1, #7
 8008a08:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008a0c:	eb05 06c1 	add.w	r6, r5, r1, lsl #3
 8008a10:	f506 71b4 	add.w	r1, r6, #360	; 0x168
    ep->is_in = 0U;
 8008a14:	4630      	mov	r0, r6
 8008a16:	2600      	movs	r6, #0
 8008a18:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a1c:	f004 0407 	and.w	r4, r4, #7
 8008a20:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8008a22:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8008a24:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008a26:	784a      	ldrb	r2, [r1, #1]
 8008a28:	b102      	cbz	r2, 8008a2c <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 8008a2a:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8008a2c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8008a2e:	bf04      	itt	eq
 8008a30:	2300      	moveq	r3, #0
 8008a32:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8008a34:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d013      	beq.n	8008a64 <HAL_PCD_EP_Open+0x6c>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a42:	6828      	ldr	r0, [r5, #0]
 8008a44:	f001 facb 	bl	8009fde <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a48:	2000      	movs	r0, #0
 8008a4a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a50:	f001 0007 	and.w	r0, r1, #7
 8008a54:	3001      	adds	r0, #1
 8008a56:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008a5a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8008a5e:	2601      	movs	r6, #1
 8008a60:	704e      	strb	r6, [r1, #1]
 8008a62:	e7db      	b.n	8008a1c <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8008a64:	2002      	movs	r0, #2
 8008a66:	e7f2      	b.n	8008a4e <HAL_PCD_EP_Open+0x56>

08008a68 <HAL_PCD_EP_Close>:
{
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008a6e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008a72:	d11f      	bne.n	8008ab4 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a74:	f001 0207 	and.w	r2, r1, #7
 8008a78:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008a7c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008a80:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8008a84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008a88:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008a98:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d013      	beq.n	8008ac8 <HAL_PCD_EP_Close+0x60>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008aa6:	6820      	ldr	r0, [r4, #0]
 8008aa8:	f001 fc16 	bl	800a2d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008aac:	2000      	movs	r0, #0
 8008aae:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008ab2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ab4:	f001 0207 	and.w	r2, r1, #7
 8008ab8:	3201      	adds	r2, #1
 8008aba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008abe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	7048      	strb	r0, [r1, #1]
 8008ac6:	e7e4      	b.n	8008a92 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8008ac8:	2002      	movs	r0, #2
 8008aca:	e7f2      	b.n	8008ab2 <HAL_PCD_EP_Close+0x4a>

08008acc <HAL_PCD_EP_Receive>:
{
 8008acc:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ace:	f001 0407 	and.w	r4, r1, #7
 8008ad2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8008ad6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008ada:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 8008ade:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8008ae2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008ae6:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8008aea:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8008af4:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008af8:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	f001 fd74 	bl	800a5ea <USB_EPStartXfer>
}
 8008b02:	2000      	movs	r0, #0
 8008b04:	bd38      	pop	{r3, r4, r5, pc}

08008b06 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008b06:	f001 0107 	and.w	r1, r1, #7
 8008b0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008b0e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8008b12:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8008b16:	4770      	bx	lr

08008b18 <HAL_PCD_EP_Transmit>:
{
 8008b18:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b1a:	f001 0407 	and.w	r4, r1, #7
 8008b1e:	1c61      	adds	r1, r4, #1
 8008b20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008b24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8008b28:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8008b2c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008b30:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 8008b32:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8008b34:	2201      	movs	r2, #1
 8008b36:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_len_db = len;
 8008b3a:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8008b40:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b44:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008b48:	6800      	ldr	r0, [r0, #0]
 8008b4a:	f001 fd4e 	bl	800a5ea <USB_EPStartXfer>
}
 8008b4e:	2000      	movs	r0, #0
 8008b50:	bd38      	pop	{r3, r4, r5, pc}

08008b52 <HAL_PCD_EP_SetStall>:
{
 8008b52:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008b54:	f001 0507 	and.w	r5, r1, #7
 8008b58:	6842      	ldr	r2, [r0, #4]
 8008b5a:	4295      	cmp	r5, r2
 8008b5c:	d831      	bhi.n	8008bc2 <HAL_PCD_EP_SetStall+0x70>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8008b62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008b66:	d11e      	bne.n	8008ba6 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8008b68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008b6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008b70:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8008b74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b78:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8008b82:	2301      	movs	r3, #1
 8008b84:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b86:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8008b88:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d01a      	beq.n	8008bc6 <HAL_PCD_EP_SetStall+0x74>
 8008b90:	2301      	movs	r3, #1
 8008b92:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	f001 fc88 	bl	800a4ac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b9c:	b15d      	cbz	r5, 8008bb6 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008ba4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ba6:	1c6b      	adds	r3, r5, #1
 8008ba8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008bac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	704a      	strb	r2, [r1, #1]
 8008bb4:	e7e5      	b.n	8008b82 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008bb6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	f001 fcfa 	bl	800a5b4 <USB_EP0_OutStart>
 8008bc0:	e7ed      	b.n	8008b9e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	e7ee      	b.n	8008ba4 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8008bc6:	2002      	movs	r0, #2
 8008bc8:	e7ec      	b.n	8008ba4 <HAL_PCD_EP_SetStall+0x52>

08008bca <HAL_PCD_EP_ClrStall>:
{
 8008bca:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008bcc:	f001 010f 	and.w	r1, r1, #15
 8008bd0:	6842      	ldr	r2, [r0, #4]
 8008bd2:	4291      	cmp	r1, r2
 8008bd4:	d830      	bhi.n	8008c38 <HAL_PCD_EP_ClrStall+0x6e>
{
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8008bda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008bde:	d121      	bne.n	8008c24 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008be0:	f003 0207 	and.w	r2, r3, #7
 8008be4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008be8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008bec:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8008bf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008bf4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8008bfe:	2200      	movs	r2, #0
 8008c00:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008c08:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d015      	beq.n	8008c3c <HAL_PCD_EP_ClrStall+0x72>
 8008c10:	2301      	movs	r3, #1
 8008c12:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c16:	6820      	ldr	r0, [r4, #0]
 8008c18:	f001 fc6d 	bl	800a4f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008c22:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c24:	f003 0207 	and.w	r2, r3, #7
 8008c28:	3201      	adds	r2, #1
 8008c2a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008c2e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8008c32:	2001      	movs	r0, #1
 8008c34:	7048      	strb	r0, [r1, #1]
 8008c36:	e7e2      	b.n	8008bfe <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8008c38:	2001      	movs	r0, #1
}
 8008c3a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8008c3c:	2002      	movs	r0, #2
 8008c3e:	e7f0      	b.n	8008c22 <HAL_PCD_EP_ClrStall+0x58>

08008c40 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008c40:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008c44:	d00b      	beq.n	8008c5e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c46:	f001 0107 	and.w	r1, r1, #7
 8008c4a:	3101      	adds	r1, #1
 8008c4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008c50:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008c54:	b952      	cbnz	r2, 8008c6c <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008c56:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008c58:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8008c5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008c62:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008c66:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008c6a:	e7f3      	b.n	8008c54 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008c70:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008c72:	0c1b      	lsrs	r3, r3, #16
 8008c74:	814b      	strh	r3, [r1, #10]
 8008c76:	e7f0      	b.n	8008c5a <HAL_PCDEx_PMAConfig+0x1a>

08008c78 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008c78:	4b01      	ldr	r3, [pc, #4]	; (8008c80 <HAL_PWR_EnableBkUpAccess+0x8>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	4770      	bx	lr
 8008c80:	420e0020 	.word	0x420e0020

08008c84 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f000 8201 	beq.w	800908c <HAL_RCC_OscConfig+0x408>
{
 8008c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c92:	6803      	ldr	r3, [r0, #0]
 8008c94:	f013 0f01 	tst.w	r3, #1
 8008c98:	d02c      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c9a:	4baa      	ldr	r3, [pc, #680]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f003 030c 	and.w	r3, r3, #12
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d01d      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008ca6:	4ba7      	ldr	r3, [pc, #668]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f003 030c 	and.w	r3, r3, #12
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d012      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cb2:	6863      	ldr	r3, [r4, #4]
 8008cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb8:	d041      	beq.n	8008d3e <HAL_RCC_OscConfig+0xba>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d155      	bne.n	8008d6a <HAL_RCC_OscConfig+0xe6>
 8008cbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cc2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	e037      	b.n	8008d48 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008cd8:	4b9a      	ldr	r3, [pc, #616]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008ce0:	d0e7      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ce2:	4b98      	ldr	r3, [pc, #608]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008cea:	d003      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x70>
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 81ce 	beq.w	8009090 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	f013 0f02 	tst.w	r3, #2
 8008cfa:	d075      	beq.n	8008de8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008cfc:	4b91      	ldr	r3, [pc, #580]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f013 0f0c 	tst.w	r3, #12
 8008d04:	d05f      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008d06:	4b8f      	ldr	r3, [pc, #572]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f003 030c 	and.w	r3, r3, #12
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d054      	beq.n	8008dbc <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 8089 	beq.w	8008e2c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d1a:	4b8b      	ldr	r3, [pc, #556]	; (8008f48 <HAL_RCC_OscConfig+0x2c4>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d20:	f7fe f8a2 	bl	8006e68 <HAL_GetTick>
 8008d24:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d26:	4e87      	ldr	r6, [pc, #540]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008d28:	6833      	ldr	r3, [r6, #0]
 8008d2a:	f013 0f02 	tst.w	r3, #2
 8008d2e:	d174      	bne.n	8008e1a <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d30:	f7fe f89a 	bl	8006e68 <HAL_GetTick>
 8008d34:	1b40      	subs	r0, r0, r5
 8008d36:	2802      	cmp	r0, #2
 8008d38:	d9f6      	bls.n	8008d28 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8008d3a:	2003      	movs	r0, #3
 8008d3c:	e1ad      	b.n	800909a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d3e:	4a81      	ldr	r2, [pc, #516]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008d40:	6813      	ldr	r3, [r2, #0]
 8008d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d46:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	b343      	cbz	r3, 8008d9e <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8008d4c:	f7fe f88c 	bl	8006e68 <HAL_GetTick>
 8008d50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d52:	4e7c      	ldr	r6, [pc, #496]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008d54:	6833      	ldr	r3, [r6, #0]
 8008d56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d5a:	d1cb      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d5c:	f7fe f884 	bl	8006e68 <HAL_GetTick>
 8008d60:	1b40      	subs	r0, r0, r5
 8008d62:	2864      	cmp	r0, #100	; 0x64
 8008d64:	d9f6      	bls.n	8008d54 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8008d66:	2003      	movs	r0, #3
 8008d68:	e197      	b.n	800909a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d6e:	d009      	beq.n	8008d84 <HAL_RCC_OscConfig+0x100>
 8008d70:	4b74      	ldr	r3, [pc, #464]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	e7e1      	b.n	8008d48 <HAL_RCC_OscConfig+0xc4>
 8008d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d88:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e7d4      	b.n	8008d48 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8008d9e:	f7fe f863 	bl	8006e68 <HAL_GetTick>
 8008da2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008da4:	4e67      	ldr	r6, [pc, #412]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008da6:	6833      	ldr	r3, [r6, #0]
 8008da8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008dac:	d0a2      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dae:	f7fe f85b 	bl	8006e68 <HAL_GetTick>
 8008db2:	1b40      	subs	r0, r0, r5
 8008db4:	2864      	cmp	r0, #100	; 0x64
 8008db6:	d9f6      	bls.n	8008da6 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8008db8:	2003      	movs	r0, #3
 8008dba:	e16e      	b.n	800909a <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008dbc:	4b61      	ldr	r3, [pc, #388]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008dc4:	d1a5      	bne.n	8008d12 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dc6:	4b5f      	ldr	r3, [pc, #380]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f013 0f02 	tst.w	r3, #2
 8008dce:	d003      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x154>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	f040 815e 	bne.w	8009094 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dd8:	4a5a      	ldr	r2, [pc, #360]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	6961      	ldr	r1, [r4, #20]
 8008dde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008de2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008de6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	f013 0f08 	tst.w	r3, #8
 8008dee:	d03c      	beq.n	8008e6a <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008df0:	69a3      	ldr	r3, [r4, #24]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d04f      	beq.n	8008e96 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008df6:	4b55      	ldr	r3, [pc, #340]	; (8008f4c <HAL_RCC_OscConfig+0x2c8>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dfc:	f7fe f834 	bl	8006e68 <HAL_GetTick>
 8008e00:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e02:	4e50      	ldr	r6, [pc, #320]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008e04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e06:	f013 0f02 	tst.w	r3, #2
 8008e0a:	d121      	bne.n	8008e50 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e0c:	f7fe f82c 	bl	8006e68 <HAL_GetTick>
 8008e10:	1b40      	subs	r0, r0, r5
 8008e12:	2802      	cmp	r0, #2
 8008e14:	d9f6      	bls.n	8008e04 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8008e16:	2003      	movs	r0, #3
 8008e18:	e13f      	b.n	800909a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e1a:	4a4a      	ldr	r2, [pc, #296]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008e1c:	6813      	ldr	r3, [r2, #0]
 8008e1e:	6961      	ldr	r1, [r4, #20]
 8008e20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	e7dd      	b.n	8008de8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8008e2c:	4b46      	ldr	r3, [pc, #280]	; (8008f48 <HAL_RCC_OscConfig+0x2c4>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e32:	f7fe f819 	bl	8006e68 <HAL_GetTick>
 8008e36:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e38:	4e42      	ldr	r6, [pc, #264]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008e3a:	6833      	ldr	r3, [r6, #0]
 8008e3c:	f013 0f02 	tst.w	r3, #2
 8008e40:	d0d2      	beq.n	8008de8 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e42:	f7fe f811 	bl	8006e68 <HAL_GetTick>
 8008e46:	1b40      	subs	r0, r0, r5
 8008e48:	2802      	cmp	r0, #2
 8008e4a:	d9f6      	bls.n	8008e3a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8008e4c:	2003      	movs	r0, #3
 8008e4e:	e124      	b.n	800909a <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008e50:	4b3f      	ldr	r3, [pc, #252]	; (8008f50 <HAL_RCC_OscConfig+0x2cc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a3f      	ldr	r2, [pc, #252]	; (8008f54 <HAL_RCC_OscConfig+0x2d0>)
 8008e56:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5a:	0a5b      	lsrs	r3, r3, #9
 8008e5c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008e5e:	bf00      	nop
  }
  while (Delay --);
 8008e60:	9b01      	ldr	r3, [sp, #4]
 8008e62:	1e5a      	subs	r2, r3, #1
 8008e64:	9201      	str	r2, [sp, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f9      	bne.n	8008e5e <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	f013 0f04 	tst.w	r3, #4
 8008e70:	f000 809c 	beq.w	8008fac <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e74:	4b33      	ldr	r3, [pc, #204]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008e7c:	d11d      	bne.n	8008eba <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7e:	4b31      	ldr	r3, [pc, #196]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008e80:	69da      	ldr	r2, [r3, #28]
 8008e82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008e86:	61da      	str	r2, [r3, #28]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8008e92:	2501      	movs	r5, #1
 8008e94:	e012      	b.n	8008ebc <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8008e96:	4b2d      	ldr	r3, [pc, #180]	; (8008f4c <HAL_RCC_OscConfig+0x2c8>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008e9c:	f7fd ffe4 	bl	8006e68 <HAL_GetTick>
 8008ea0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ea2:	4e28      	ldr	r6, [pc, #160]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008ea4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ea6:	f013 0f02 	tst.w	r3, #2
 8008eaa:	d0de      	beq.n	8008e6a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eac:	f7fd ffdc 	bl	8006e68 <HAL_GetTick>
 8008eb0:	1b40      	subs	r0, r0, r5
 8008eb2:	2802      	cmp	r0, #2
 8008eb4:	d9f6      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8008eb6:	2003      	movs	r0, #3
 8008eb8:	e0ef      	b.n	800909a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8008eba:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ebc:	4b26      	ldr	r3, [pc, #152]	; (8008f58 <HAL_RCC_OscConfig+0x2d4>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ec4:	d011      	beq.n	8008eea <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d022      	beq.n	8008f12 <HAL_RCC_OscConfig+0x28e>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d145      	bne.n	8008f5c <HAL_RCC_OscConfig+0x2d8>
 8008ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ed4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008ed8:	6a1a      	ldr	r2, [r3, #32]
 8008eda:	f022 0201 	bic.w	r2, r2, #1
 8008ede:	621a      	str	r2, [r3, #32]
 8008ee0:	6a1a      	ldr	r2, [r3, #32]
 8008ee2:	f022 0204 	bic.w	r2, r2, #4
 8008ee6:	621a      	str	r2, [r3, #32]
 8008ee8:	e018      	b.n	8008f1c <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eea:	4a1b      	ldr	r2, [pc, #108]	; (8008f58 <HAL_RCC_OscConfig+0x2d4>)
 8008eec:	6813      	ldr	r3, [r2, #0]
 8008eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008ef4:	f7fd ffb8 	bl	8006e68 <HAL_GetTick>
 8008ef8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008efa:	4f17      	ldr	r7, [pc, #92]	; (8008f58 <HAL_RCC_OscConfig+0x2d4>)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f02:	d1e0      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f04:	f7fd ffb0 	bl	8006e68 <HAL_GetTick>
 8008f08:	1b80      	subs	r0, r0, r6
 8008f0a:	2864      	cmp	r0, #100	; 0x64
 8008f0c:	d9f6      	bls.n	8008efc <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8008f0e:	2003      	movs	r0, #3
 8008f10:	e0c3      	b.n	800909a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f12:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
 8008f14:	6a13      	ldr	r3, [r2, #32]
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f1c:	68e3      	ldr	r3, [r4, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d032      	beq.n	8008f88 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8008f22:	f7fd ffa1 	bl	8006e68 <HAL_GetTick>
 8008f26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f28:	4f06      	ldr	r7, [pc, #24]	; (8008f44 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f2a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	f013 0f02 	tst.w	r3, #2
 8008f34:	d139      	bne.n	8008faa <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f36:	f7fd ff97 	bl	8006e68 <HAL_GetTick>
 8008f3a:	1b80      	subs	r0, r0, r6
 8008f3c:	4540      	cmp	r0, r8
 8008f3e:	d9f6      	bls.n	8008f2e <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8008f40:	2003      	movs	r0, #3
 8008f42:	e0aa      	b.n	800909a <HAL_RCC_OscConfig+0x416>
 8008f44:	40021000 	.word	0x40021000
 8008f48:	42420000 	.word	0x42420000
 8008f4c:	42420480 	.word	0x42420480
 8008f50:	20000000 	.word	0x20000000
 8008f54:	10624dd3 	.word	0x10624dd3
 8008f58:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f5c:	2b05      	cmp	r3, #5
 8008f5e:	d009      	beq.n	8008f74 <HAL_RCC_OscConfig+0x2f0>
 8008f60:	4b51      	ldr	r3, [pc, #324]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8008f62:	6a1a      	ldr	r2, [r3, #32]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	621a      	str	r2, [r3, #32]
 8008f6a:	6a1a      	ldr	r2, [r3, #32]
 8008f6c:	f022 0204 	bic.w	r2, r2, #4
 8008f70:	621a      	str	r2, [r3, #32]
 8008f72:	e7d3      	b.n	8008f1c <HAL_RCC_OscConfig+0x298>
 8008f74:	4b4c      	ldr	r3, [pc, #304]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8008f76:	6a1a      	ldr	r2, [r3, #32]
 8008f78:	f042 0204 	orr.w	r2, r2, #4
 8008f7c:	621a      	str	r2, [r3, #32]
 8008f7e:	6a1a      	ldr	r2, [r3, #32]
 8008f80:	f042 0201 	orr.w	r2, r2, #1
 8008f84:	621a      	str	r2, [r3, #32]
 8008f86:	e7c9      	b.n	8008f1c <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8008f88:	f7fd ff6e 	bl	8006e68 <HAL_GetTick>
 8008f8c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f8e:	4f46      	ldr	r7, [pc, #280]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f90:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	f013 0f02 	tst.w	r3, #2
 8008f9a:	d006      	beq.n	8008faa <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f9c:	f7fd ff64 	bl	8006e68 <HAL_GetTick>
 8008fa0:	1b80      	subs	r0, r0, r6
 8008fa2:	4540      	cmp	r0, r8
 8008fa4:	d9f6      	bls.n	8008f94 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8008fa6:	2003      	movs	r0, #3
 8008fa8:	e077      	b.n	800909a <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8008faa:	b9e5      	cbnz	r5, 8008fe6 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fac:	69e3      	ldr	r3, [r4, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d072      	beq.n	8009098 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fb2:	4a3d      	ldr	r2, [pc, #244]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8008fb4:	6852      	ldr	r2, [r2, #4]
 8008fb6:	f002 020c 	and.w	r2, r2, #12
 8008fba:	2a08      	cmp	r2, #8
 8008fbc:	d056      	beq.n	800906c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d017      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8008fc2:	4b3a      	ldr	r3, [pc, #232]	; (80090ac <HAL_RCC_OscConfig+0x428>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008fc8:	f7fd ff4e 	bl	8006e68 <HAL_GetTick>
 8008fcc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fce:	4d36      	ldr	r5, [pc, #216]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008fd6:	d047      	beq.n	8009068 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fd8:	f7fd ff46 	bl	8006e68 <HAL_GetTick>
 8008fdc:	1b00      	subs	r0, r0, r4
 8008fde:	2802      	cmp	r0, #2
 8008fe0:	d9f6      	bls.n	8008fd0 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8008fe2:	2003      	movs	r0, #3
 8008fe4:	e059      	b.n	800909a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fe6:	4a30      	ldr	r2, [pc, #192]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8008fe8:	69d3      	ldr	r3, [r2, #28]
 8008fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fee:	61d3      	str	r3, [r2, #28]
 8008ff0:	e7dc      	b.n	8008fac <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8008ff2:	4b2e      	ldr	r3, [pc, #184]	; (80090ac <HAL_RCC_OscConfig+0x428>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008ff8:	f7fd ff36 	bl	8006e68 <HAL_GetTick>
 8008ffc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ffe:	4e2a      	ldr	r6, [pc, #168]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009006:	d006      	beq.n	8009016 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009008:	f7fd ff2e 	bl	8006e68 <HAL_GetTick>
 800900c:	1b40      	subs	r0, r0, r5
 800900e:	2802      	cmp	r0, #2
 8009010:	d9f6      	bls.n	8009000 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8009012:	2003      	movs	r0, #3
 8009014:	e041      	b.n	800909a <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009016:	6a23      	ldr	r3, [r4, #32]
 8009018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901c:	d01a      	beq.n	8009054 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800901e:	4922      	ldr	r1, [pc, #136]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8009020:	684a      	ldr	r2, [r1, #4]
 8009022:	6a23      	ldr	r3, [r4, #32]
 8009024:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009026:	4303      	orrs	r3, r0
 8009028:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800902c:	4313      	orrs	r3, r2
 800902e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8009030:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <HAL_RCC_OscConfig+0x428>)
 8009032:	2201      	movs	r2, #1
 8009034:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009036:	f7fd ff17 	bl	8006e68 <HAL_GetTick>
 800903a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800903c:	4d1a      	ldr	r5, [pc, #104]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009044:	d10e      	bne.n	8009064 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009046:	f7fd ff0f 	bl	8006e68 <HAL_GetTick>
 800904a:	1b00      	subs	r0, r0, r4
 800904c:	2802      	cmp	r0, #2
 800904e:	d9f6      	bls.n	800903e <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8009050:	2003      	movs	r0, #3
 8009052:	e022      	b.n	800909a <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009054:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8009056:	6853      	ldr	r3, [r2, #4]
 8009058:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800905c:	68a1      	ldr	r1, [r4, #8]
 800905e:	430b      	orrs	r3, r1
 8009060:	6053      	str	r3, [r2, #4]
 8009062:	e7dc      	b.n	800901e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8009064:	2000      	movs	r0, #0
 8009066:	e018      	b.n	800909a <HAL_RCC_OscConfig+0x416>
 8009068:	2000      	movs	r0, #0
 800906a:	e016      	b.n	800909a <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800906c:	2b01      	cmp	r3, #1
 800906e:	d017      	beq.n	80090a0 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8009070:	4b0d      	ldr	r3, [pc, #52]	; (80090a8 <HAL_RCC_OscConfig+0x424>)
 8009072:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009074:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009078:	6a22      	ldr	r2, [r4, #32]
 800907a:	4291      	cmp	r1, r2
 800907c:	d112      	bne.n	80090a4 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800907e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009082:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8009084:	1a18      	subs	r0, r3, r0
 8009086:	bf18      	it	ne
 8009088:	2001      	movne	r0, #1
 800908a:	e006      	b.n	800909a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800908c:	2001      	movs	r0, #1
}
 800908e:	4770      	bx	lr
        return HAL_ERROR;
 8009090:	2001      	movs	r0, #1
 8009092:	e002      	b.n	800909a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8009094:	2001      	movs	r0, #1
 8009096:	e000      	b.n	800909a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8009098:	2000      	movs	r0, #0
}
 800909a:	b002      	add	sp, #8
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80090a0:	2001      	movs	r0, #1
 80090a2:	e7fa      	b.n	800909a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80090a4:	2001      	movs	r0, #1
 80090a6:	e7f8      	b.n	800909a <HAL_RCC_OscConfig+0x416>
 80090a8:	40021000 	.word	0x40021000
 80090ac:	42420060 	.word	0x42420060

080090b0 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80090b0:	4b01      	ldr	r3, [pc, #4]	; (80090b8 <HAL_RCC_EnableCSS+0x8>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
}
 80090b6:	4770      	bx	lr
 80090b8:	4242004c 	.word	0x4242004c

080090bc <HAL_RCC_GetSysClockFreq>:
{
 80090bc:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80090be:	4b16      	ldr	r3, [pc, #88]	; (8009118 <HAL_RCC_GetSysClockFreq+0x5c>)
 80090c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090c2:	f10d 0c18 	add.w	ip, sp, #24
 80090c6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80090ca:	f240 2301 	movw	r3, #513	; 0x201
 80090ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80090d2:	4b12      	ldr	r3, [pc, #72]	; (800911c <HAL_RCC_GetSysClockFreq+0x60>)
 80090d4:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80090d6:	f003 020c 	and.w	r2, r3, #12
 80090da:	2a08      	cmp	r2, #8
 80090dc:	d002      	beq.n	80090e4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80090de:	4810      	ldr	r0, [pc, #64]	; (8009120 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80090e0:	b006      	add	sp, #24
 80090e2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80090e4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80090e8:	4462      	add	r2, ip
 80090ea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80090ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80090f2:	d00c      	beq.n	800910e <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <HAL_RCC_GetSysClockFreq+0x60>)
 80090f6:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090f8:	4809      	ldr	r0, [pc, #36]	; (8009120 <HAL_RCC_GetSysClockFreq+0x64>)
 80090fa:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090fe:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8009102:	4463      	add	r3, ip
 8009104:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009108:	fbb0 f0f3 	udiv	r0, r0, r3
 800910c:	e7e8      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800910e:	4805      	ldr	r0, [pc, #20]	; (8009124 <HAL_RCC_GetSysClockFreq+0x68>)
 8009110:	fb00 f002 	mul.w	r0, r0, r2
 8009114:	e7e4      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x24>
 8009116:	bf00      	nop
 8009118:	0800cc14 	.word	0x0800cc14
 800911c:	40021000 	.word	0x40021000
 8009120:	007a1200 	.word	0x007a1200
 8009124:	003d0900 	.word	0x003d0900

08009128 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009128:	2800      	cmp	r0, #0
 800912a:	f000 80a2 	beq.w	8009272 <HAL_RCC_ClockConfig+0x14a>
{
 800912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	460d      	mov	r5, r1
 8009134:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009136:	4b53      	ldr	r3, [pc, #332]	; (8009284 <HAL_RCC_ClockConfig+0x15c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	428b      	cmp	r3, r1
 8009140:	d20b      	bcs.n	800915a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009142:	4a50      	ldr	r2, [pc, #320]	; (8009284 <HAL_RCC_ClockConfig+0x15c>)
 8009144:	6813      	ldr	r3, [r2, #0]
 8009146:	f023 0307 	bic.w	r3, r3, #7
 800914a:	430b      	orrs	r3, r1
 800914c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	428b      	cmp	r3, r1
 8009156:	f040 808e 	bne.w	8009276 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f013 0f02 	tst.w	r3, #2
 8009160:	d017      	beq.n	8009192 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009162:	f013 0f04 	tst.w	r3, #4
 8009166:	d004      	beq.n	8009172 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009168:	4a47      	ldr	r2, [pc, #284]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 800916a:	6853      	ldr	r3, [r2, #4]
 800916c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009170:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	f013 0f08 	tst.w	r3, #8
 8009178:	d004      	beq.n	8009184 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800917a:	4a43      	ldr	r2, [pc, #268]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 800917c:	6853      	ldr	r3, [r2, #4]
 800917e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009182:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009184:	4a40      	ldr	r2, [pc, #256]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 8009186:	6853      	ldr	r3, [r2, #4]
 8009188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800918c:	68a1      	ldr	r1, [r4, #8]
 800918e:	430b      	orrs	r3, r1
 8009190:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	f013 0f01 	tst.w	r3, #1
 8009198:	d031      	beq.n	80091fe <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800919a:	6862      	ldr	r2, [r4, #4]
 800919c:	2a01      	cmp	r2, #1
 800919e:	d020      	beq.n	80091e2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091a0:	2a02      	cmp	r2, #2
 80091a2:	d025      	beq.n	80091f0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a4:	4b38      	ldr	r3, [pc, #224]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f013 0f02 	tst.w	r3, #2
 80091ac:	d065      	beq.n	800927a <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091ae:	4936      	ldr	r1, [pc, #216]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 80091b0:	684b      	ldr	r3, [r1, #4]
 80091b2:	f023 0303 	bic.w	r3, r3, #3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80091ba:	f7fd fe55 	bl	8006e68 <HAL_GetTick>
 80091be:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091c0:	4f31      	ldr	r7, [pc, #196]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091c2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f003 030c 	and.w	r3, r3, #12
 80091cc:	6862      	ldr	r2, [r4, #4]
 80091ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80091d2:	d014      	beq.n	80091fe <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d4:	f7fd fe48 	bl	8006e68 <HAL_GetTick>
 80091d8:	1b80      	subs	r0, r0, r6
 80091da:	4540      	cmp	r0, r8
 80091dc:	d9f3      	bls.n	80091c6 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80091de:	2003      	movs	r0, #3
 80091e0:	e045      	b.n	800926e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091e2:	4b29      	ldr	r3, [pc, #164]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80091ea:	d1e0      	bne.n	80091ae <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80091ec:	2001      	movs	r0, #1
 80091ee:	e03e      	b.n	800926e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80091f8:	d1d9      	bne.n	80091ae <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80091fa:	2001      	movs	r0, #1
 80091fc:	e037      	b.n	800926e <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091fe:	4b21      	ldr	r3, [pc, #132]	; (8009284 <HAL_RCC_ClockConfig+0x15c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	42ab      	cmp	r3, r5
 8009208:	d90a      	bls.n	8009220 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800920a:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <HAL_RCC_ClockConfig+0x15c>)
 800920c:	6813      	ldr	r3, [r2, #0]
 800920e:	f023 0307 	bic.w	r3, r3, #7
 8009212:	432b      	orrs	r3, r5
 8009214:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009216:	6813      	ldr	r3, [r2, #0]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	42ab      	cmp	r3, r5
 800921e:	d12e      	bne.n	800927e <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	f013 0f04 	tst.w	r3, #4
 8009226:	d006      	beq.n	8009236 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009228:	4a17      	ldr	r2, [pc, #92]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 800922a:	6853      	ldr	r3, [r2, #4]
 800922c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009230:	68e1      	ldr	r1, [r4, #12]
 8009232:	430b      	orrs	r3, r1
 8009234:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f013 0f08 	tst.w	r3, #8
 800923c:	d007      	beq.n	800924e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800923e:	4a12      	ldr	r2, [pc, #72]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 8009240:	6853      	ldr	r3, [r2, #4]
 8009242:	6921      	ldr	r1, [r4, #16]
 8009244:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009248:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800924c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800924e:	f7ff ff35 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009252:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <HAL_RCC_ClockConfig+0x160>)
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800925a:	4a0c      	ldr	r2, [pc, #48]	; (800928c <HAL_RCC_ClockConfig+0x164>)
 800925c:	5cd3      	ldrb	r3, [r2, r3]
 800925e:	40d8      	lsrs	r0, r3
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <HAL_RCC_ClockConfig+0x168>)
 8009262:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <HAL_RCC_ClockConfig+0x16c>)
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	f7fd fdba 	bl	8006de0 <HAL_InitTick>
  return HAL_OK;
 800926c:	2000      	movs	r0, #0
}
 800926e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8009272:	2001      	movs	r0, #1
}
 8009274:	4770      	bx	lr
    return HAL_ERROR;
 8009276:	2001      	movs	r0, #1
 8009278:	e7f9      	b.n	800926e <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800927a:	2001      	movs	r0, #1
 800927c:	e7f7      	b.n	800926e <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800927e:	2001      	movs	r0, #1
 8009280:	e7f5      	b.n	800926e <HAL_RCC_ClockConfig+0x146>
 8009282:	bf00      	nop
 8009284:	40022000 	.word	0x40022000
 8009288:	40021000 	.word	0x40021000
 800928c:	0800cbfc 	.word	0x0800cbfc
 8009290:	20000000 	.word	0x20000000
 8009294:	20000008 	.word	0x20000008

08009298 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009298:	4b04      	ldr	r3, [pc, #16]	; (80092ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80092a0:	4a03      	ldr	r2, [pc, #12]	; (80092b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80092a2:	5cd3      	ldrb	r3, [r2, r3]
 80092a4:	4a03      	ldr	r2, [pc, #12]	; (80092b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80092a6:	6810      	ldr	r0, [r2, #0]
}
 80092a8:	40d8      	lsrs	r0, r3
 80092aa:	4770      	bx	lr
 80092ac:	40021000 	.word	0x40021000
 80092b0:	0800cc0c 	.word	0x0800cc0c
 80092b4:	20000000 	.word	0x20000000

080092b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80092c0:	4a03      	ldr	r2, [pc, #12]	; (80092d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80092c2:	5cd3      	ldrb	r3, [r2, r3]
 80092c4:	4a03      	ldr	r2, [pc, #12]	; (80092d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80092c6:	6810      	ldr	r0, [r2, #0]
}
 80092c8:	40d8      	lsrs	r0, r3
 80092ca:	4770      	bx	lr
 80092cc:	40021000 	.word	0x40021000
 80092d0:	0800cc0c 	.word	0x0800cc0c
 80092d4:	20000000 	.word	0x20000000

080092d8 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80092d8:	4770      	bx	lr
	...

080092dc <HAL_RCC_NMI_IRQHandler>:
{
 80092dc:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80092de:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092e6:	d100      	bne.n	80092ea <HAL_RCC_NMI_IRQHandler+0xe>
}
 80092e8:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80092ea:	f7ff fff5 	bl	80092d8 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80092ee:	4b03      	ldr	r3, [pc, #12]	; (80092fc <HAL_RCC_NMI_IRQHandler+0x20>)
 80092f0:	2280      	movs	r2, #128	; 0x80
 80092f2:	701a      	strb	r2, [r3, #0]
}
 80092f4:	e7f8      	b.n	80092e8 <HAL_RCC_NMI_IRQHandler+0xc>
 80092f6:	bf00      	nop
 80092f8:	40021000 	.word	0x40021000
 80092fc:	4002100a 	.word	0x4002100a

08009300 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009308:	6803      	ldr	r3, [r0, #0]
 800930a:	f013 0f01 	tst.w	r3, #1
 800930e:	d034      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009310:	4b3e      	ldr	r3, [pc, #248]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009318:	d147      	bne.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800931a:	4b3c      	ldr	r3, [pc, #240]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800931c:	69da      	ldr	r2, [r3, #28]
 800931e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009322:	61da      	str	r2, [r3, #28]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800932e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009330:	4b37      	ldr	r3, [pc, #220]	; (8009410 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009338:	d039      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800933a:	4b34      	ldr	r3, [pc, #208]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800933c:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800933e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009342:	d011      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009344:	6862      	ldr	r2, [r4, #4]
 8009346:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800934a:	429a      	cmp	r2, r3
 800934c:	d00c      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800934e:	4a2f      	ldr	r2, [pc, #188]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009350:	6a13      	ldr	r3, [r2, #32]
 8009352:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009356:	492f      	ldr	r1, [pc, #188]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8009358:	2601      	movs	r6, #1
 800935a:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800935c:	2600      	movs	r6, #0
 800935e:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009360:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009362:	f013 0f01 	tst.w	r3, #1
 8009366:	d136      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009368:	4a28      	ldr	r2, [pc, #160]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800936a:	6a13      	ldr	r3, [r2, #32]
 800936c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009370:	6861      	ldr	r1, [r4, #4]
 8009372:	430b      	orrs	r3, r1
 8009374:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009376:	2d00      	cmp	r5, #0
 8009378:	d13e      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f013 0f02 	tst.w	r3, #2
 8009380:	d006      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009382:	4a22      	ldr	r2, [pc, #136]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009384:	6853      	ldr	r3, [r2, #4]
 8009386:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800938a:	68a1      	ldr	r1, [r4, #8]
 800938c:	430b      	orrs	r3, r1
 800938e:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	f013 0f10 	tst.w	r3, #16
 8009396:	d034      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009398:	4a1c      	ldr	r2, [pc, #112]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800939a:	6853      	ldr	r3, [r2, #4]
 800939c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80093a0:	68e1      	ldr	r1, [r4, #12]
 80093a2:	430b      	orrs	r3, r1
 80093a4:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80093a6:	2000      	movs	r0, #0
 80093a8:	e02c      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus pwrclkchanged = RESET;
 80093aa:	2500      	movs	r5, #0
 80093ac:	e7c0      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093ae:	4a18      	ldr	r2, [pc, #96]	; (8009410 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80093b0:	6813      	ldr	r3, [r2, #0]
 80093b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80093b8:	f7fd fd56 	bl	8006e68 <HAL_GetTick>
 80093bc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093be:	4f14      	ldr	r7, [pc, #80]	; (8009410 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80093c6:	d1b8      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093c8:	f7fd fd4e 	bl	8006e68 <HAL_GetTick>
 80093cc:	1b80      	subs	r0, r0, r6
 80093ce:	2864      	cmp	r0, #100	; 0x64
 80093d0:	d9f6      	bls.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80093d2:	2003      	movs	r0, #3
 80093d4:	e016      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80093d6:	f7fd fd47 	bl	8006e68 <HAL_GetTick>
 80093da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093dc:	4f0b      	ldr	r7, [pc, #44]	; (800940c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093de:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	f013 0f02 	tst.w	r3, #2
 80093e8:	d1be      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ea:	f7fd fd3d 	bl	8006e68 <HAL_GetTick>
 80093ee:	1b80      	subs	r0, r0, r6
 80093f0:	4540      	cmp	r0, r8
 80093f2:	d9f6      	bls.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 80093f4:	2003      	movs	r0, #3
 80093f6:	e005      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 80093f8:	69d3      	ldr	r3, [r2, #28]
 80093fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093fe:	61d3      	str	r3, [r2, #28]
 8009400:	e7bb      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8009402:	2000      	movs	r0, #0
}
 8009404:	b002      	add	sp, #8
 8009406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940a:	bf00      	nop
 800940c:	40021000 	.word	0x40021000
 8009410:	40007000 	.word	0x40007000
 8009414:	42420440 	.word	0x42420440

08009418 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009418:	b510      	push	{r4, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800941e:	4b37      	ldr	r3, [pc, #220]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8009420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009422:	f10d 0c18 	add.w	ip, sp, #24
 8009426:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800942a:	f240 2301 	movw	r3, #513	; 0x201
 800942e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009432:	2c02      	cmp	r4, #2
 8009434:	d054      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8009436:	2c10      	cmp	r4, #16
 8009438:	d004      	beq.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 800943a:	2c01      	cmp	r4, #1
 800943c:	d02c      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800943e:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8009440:	b006      	add	sp, #24
 8009442:	bd10      	pop	{r4, pc}
      temp_reg = RCC->CFGR;
 8009444:	4b2e      	ldr	r3, [pc, #184]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8009446:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800944e:	d0f7      	beq.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009450:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8009454:	a906      	add	r1, sp, #24
 8009456:	440b      	add	r3, r1
 8009458:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800945c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009460:	d016      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009462:	4b27      	ldr	r3, [pc, #156]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800946a:	440b      	add	r3, r1
 800946c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009470:	4b24      	ldr	r3, [pc, #144]	; (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8009472:	fbb3 f3f2 	udiv	r3, r3, r2
 8009476:	fb00 f003 	mul.w	r0, r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800947a:	4b21      	ldr	r3, [pc, #132]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009482:	d1dd      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = (pllclk * 2) / 3;
 8009484:	0040      	lsls	r0, r0, #1
 8009486:	4b20      	ldr	r3, [pc, #128]	; (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8009488:	fba3 3000 	umull	r3, r0, r3, r0
 800948c:	0840      	lsrs	r0, r0, #1
 800948e:	e7d7      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009490:	4b1e      	ldr	r3, [pc, #120]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8009492:	fb03 f000 	mul.w	r0, r3, r0
 8009496:	e7f0      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      temp_reg = RCC->BDCR;
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800949a:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800949c:	f240 3202 	movw	r2, #770	; 0x302
 80094a0:	401a      	ands	r2, r3
 80094a2:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80094a6:	d026      	beq.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80094a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b0:	d004      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80094b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b6:	d00a      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  uint32_t temp_reg = 0U, frequency = 0U;
 80094b8:	2000      	movs	r0, #0
  return (frequency);
 80094ba:	e7c1      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80094bc:	4b10      	ldr	r3, [pc, #64]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 80094be:	6a58      	ldr	r0, [r3, #36]	; 0x24
        frequency = LSI_VALUE;
 80094c0:	f010 0002 	ands.w	r0, r0, #2
 80094c4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80094c8:	bf18      	it	ne
 80094ca:	4618      	movne	r0, r3
 80094cc:	e7b8      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80094ce:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 80094d0:	6818      	ldr	r0, [r3, #0]
        frequency = HSE_VALUE / 128U;
 80094d2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80094d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80094da:	bf18      	it	ne
 80094dc:	4618      	movne	r0, r3
 80094de:	e7af      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80094e0:	f7ff feea 	bl	80092b8 <HAL_RCC_GetPCLK2Freq>
 80094e4:	4b06      	ldr	r3, [pc, #24]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80094ec:	3301      	adds	r3, #1
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80094f4:	e7a4      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = LSE_VALUE;
 80094f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80094fa:	e7a1      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80094fc:	0800cc14 	.word	0x0800cc14
 8009500:	40021000 	.word	0x40021000
 8009504:	007a1200 	.word	0x007a1200
 8009508:	aaaaaaab 	.word	0xaaaaaaab
 800950c:	003d0900 	.word	0x003d0900

08009510 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8009510:	b430      	push	{r4, r5}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009512:	6802      	ldr	r2, [r0, #0]
 8009514:	6994      	ldr	r4, [r2, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8009516:	69d3      	ldr	r3, [r2, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009518:	6991      	ldr	r1, [r2, #24]

  if (high1 != high2)
 800951a:	b2a5      	uxth	r5, r4
 800951c:	b288      	uxth	r0, r1
 800951e:	4285      	cmp	r5, r0
 8009520:	d005      	beq.n	800952e <RTC_ReadTimeCounter+0x1e>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009522:	69d0      	ldr	r0, [r2, #28]
 8009524:	b280      	uxth	r0, r0
 8009526:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 800952a:	bc30      	pop	{r4, r5}
 800952c:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 800952e:	b298      	uxth	r0, r3
 8009530:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
  return timecounter;
 8009534:	e7f9      	b.n	800952a <RTC_ReadTimeCounter+0x1a>

08009536 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8009536:	6803      	ldr	r3, [r0, #0]
 8009538:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800953c:	b29b      	uxth	r3, r3
}
 800953e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009542:	4770      	bx	lr

08009544 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8009544:	0903      	lsrs	r3, r0, #4
 8009546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800954a:	f000 000f 	and.w	r0, r0, #15
 800954e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8009552:	b2c0      	uxtb	r0, r0
 8009554:	4770      	bx	lr
	...

08009558 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8009558:	b410      	push	{r4}
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 800955a:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 800955e:	2902      	cmp	r1, #2
 8009560:	d822      	bhi.n	80095a8 <RTC_WeekDayNum+0x50>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8009562:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8009566:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800956a:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 800956e:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <RTC_WeekDayNum+0x90>)
 8009570:	fba3 3101 	umull	r3, r1, r3, r1
 8009574:	3204      	adds	r2, #4
 8009576:	1913      	adds	r3, r2, r4
 8009578:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800957c:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8009580:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <RTC_WeekDayNum+0x94>)
 8009582:	fba2 2000 	umull	r2, r0, r2, r0
 8009586:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 800958a:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 800958e:	4818      	ldr	r0, [pc, #96]	; (80095f0 <RTC_WeekDayNum+0x98>)
 8009590:	fba0 2003 	umull	r2, r0, r0, r3
 8009594:	1a1a      	subs	r2, r3, r0
 8009596:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800959a:	0880      	lsrs	r0, r0, #2
 800959c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80095a0:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 80095a2:	b2c0      	uxtb	r0, r0
 80095a4:	bc10      	pop	{r4}
 80095a6:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80095a8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80095ac:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80095b0:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <RTC_WeekDayNum+0x90>)
 80095b2:	fba3 3101 	umull	r3, r1, r3, r1
 80095b6:	1c93      	adds	r3, r2, #2
 80095b8:	4423      	add	r3, r4
 80095ba:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80095be:	eb03 0394 	add.w	r3, r3, r4, lsr #2
 80095c2:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <RTC_WeekDayNum+0x94>)
 80095c4:	fba2 2404 	umull	r2, r4, r2, r4
 80095c8:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 80095cc:	eba3 1354 	sub.w	r3, r3, r4, lsr #5
 80095d0:	4807      	ldr	r0, [pc, #28]	; (80095f0 <RTC_WeekDayNum+0x98>)
 80095d2:	fba0 2003 	umull	r2, r0, r0, r3
 80095d6:	1a1a      	subs	r2, r3, r0
 80095d8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80095dc:	0880      	lsrs	r0, r0, #2
 80095de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80095e2:	1a18      	subs	r0, r3, r0
 80095e4:	e7dd      	b.n	80095a2 <RTC_WeekDayNum+0x4a>
 80095e6:	bf00      	nop
 80095e8:	38e38e39 	.word	0x38e38e39
 80095ec:	51eb851f 	.word	0x51eb851f
 80095f0:	24924925 	.word	0x24924925

080095f4 <RTC_EnterInitMode>:
{
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80095f8:	f7fd fc36 	bl	8006e68 <HAL_GetTick>
 80095fc:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	f012 0f20 	tst.w	r2, #32
 8009606:	d107      	bne.n	8009618 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009608:	f7fd fc2e 	bl	8006e68 <HAL_GetTick>
 800960c:	1b40      	subs	r0, r0, r5
 800960e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009612:	d9f4      	bls.n	80095fe <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8009614:	2003      	movs	r0, #3
 8009616:	e004      	b.n	8009622 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	f042 0210 	orr.w	r2, r2, #16
 800961e:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8009620:	2000      	movs	r0, #0
}
 8009622:	bd38      	pop	{r3, r4, r5, pc}

08009624 <RTC_ExitInitMode>:
{
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009628:	6802      	ldr	r2, [r0, #0]
 800962a:	6853      	ldr	r3, [r2, #4]
 800962c:	f023 0310 	bic.w	r3, r3, #16
 8009630:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8009632:	f7fd fc19 	bl	8006e68 <HAL_GetTick>
 8009636:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f013 0f20 	tst.w	r3, #32
 8009640:	d107      	bne.n	8009652 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009642:	f7fd fc11 	bl	8006e68 <HAL_GetTick>
 8009646:	1b40      	subs	r0, r0, r5
 8009648:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800964c:	d9f4      	bls.n	8009638 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800964e:	2003      	movs	r0, #3
 8009650:	e000      	b.n	8009654 <RTC_ExitInitMode+0x30>
  return HAL_OK;
 8009652:	2000      	movs	r0, #0
}
 8009654:	bd38      	pop	{r3, r4, r5, pc}

08009656 <RTC_WriteTimeCounter>:
{
 8009656:	b538      	push	{r3, r4, r5, lr}
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800965c:	f7ff ffca 	bl	80095f4 <RTC_EnterInitMode>
 8009660:	b108      	cbz	r0, 8009666 <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 8009662:	2001      	movs	r0, #1
}
 8009664:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	0c22      	lsrs	r2, r4, #16
 800966a:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b2a4      	uxth	r4, r4
 8009670:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009672:	4628      	mov	r0, r5
 8009674:	f7ff ffd6 	bl	8009624 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8009678:	3800      	subs	r0, #0
 800967a:	bf18      	it	ne
 800967c:	2001      	movne	r0, #1
 800967e:	e7f1      	b.n	8009664 <RTC_WriteTimeCounter+0xe>

08009680 <RTC_WriteAlarmCounter>:
{
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4605      	mov	r5, r0
 8009684:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009686:	f7ff ffb5 	bl	80095f4 <RTC_EnterInitMode>
 800968a:	b108      	cbz	r0, 8009690 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 800968c:	2001      	movs	r0, #1
}
 800968e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	0c22      	lsrs	r2, r4, #16
 8009694:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	b2a4      	uxth	r4, r4
 800969a:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff ffc1 	bl	8009624 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80096a2:	3800      	subs	r0, #0
 80096a4:	bf18      	it	ne
 80096a6:	2001      	movne	r0, #1
 80096a8:	e7f1      	b.n	800968e <RTC_WriteAlarmCounter+0xe>

080096aa <HAL_RTC_SetTime>:
{
 80096aa:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d057      	beq.n	8009760 <HAL_RTC_SetTime+0xb6>
 80096b0:	460c      	mov	r4, r1
 80096b2:	4605      	mov	r5, r0
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d055      	beq.n	8009764 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 80096b8:	7c03      	ldrb	r3, [r0, #16]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d054      	beq.n	8009768 <HAL_RTC_SetTime+0xbe>
 80096be:	2301      	movs	r3, #1
 80096c0:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096c2:	2302      	movs	r3, #2
 80096c4:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 80096c6:	b9ba      	cbnz	r2, 80096f8 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80096c8:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80096ca:	784b      	ldrb	r3, [r1, #1]
 80096cc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80096d0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80096d2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80096d6:	fb02 3300 	mla	r3, r2, r0, r3
                              ((uint32_t)sTime->Seconds));
 80096da:	788c      	ldrb	r4, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80096dc:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7ff ffb8 	bl	8009656 <RTC_WriteTimeCounter>
 80096e6:	4606      	mov	r6, r0
 80096e8:	b1c8      	cbz	r0, 800971e <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80096ea:	2304      	movs	r3, #4
 80096ec:	746b      	strb	r3, [r5, #17]
    __HAL_UNLOCK(hrtc);
 80096ee:	2300      	movs	r3, #0
 80096f0:	742b      	strb	r3, [r5, #16]
    return HAL_ERROR;
 80096f2:	2601      	movs	r6, #1
}
 80096f4:	4630      	mov	r0, r6
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80096f8:	7808      	ldrb	r0, [r1, #0]
 80096fa:	f7ff ff23 	bl	8009544 <RTC_Bcd2ToByte>
 80096fe:	4606      	mov	r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009700:	7860      	ldrb	r0, [r4, #1]
 8009702:	f7ff ff1f 	bl	8009544 <RTC_Bcd2ToByte>
 8009706:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 800970a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800970c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8009710:	fb00 3606 	mla	r6, r0, r6, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009714:	78a0      	ldrb	r0, [r4, #2]
 8009716:	f7ff ff15 	bl	8009544 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800971a:	1984      	adds	r4, r0, r6
 800971c:	e7df      	b.n	80096de <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800971e:	682a      	ldr	r2, [r5, #0]
 8009720:	6853      	ldr	r3, [r2, #4]
 8009722:	f023 0305 	bic.w	r3, r3, #5
 8009726:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009728:	4628      	mov	r0, r5
 800972a:	f7ff ff04 	bl	8009536 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800972e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009732:	d001      	beq.n	8009738 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 8009734:	4284      	cmp	r4, r0
 8009736:	d804      	bhi.n	8009742 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8009738:	2301      	movs	r3, #1
 800973a:	746b      	strb	r3, [r5, #17]
    __HAL_UNLOCK(hrtc);
 800973c:	2300      	movs	r3, #0
 800973e:	742b      	strb	r3, [r5, #16]
    return HAL_OK;
 8009740:	e7d8      	b.n	80096f4 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009742:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8009746:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800974a:	4628      	mov	r0, r5
 800974c:	f7ff ff98 	bl	8009680 <RTC_WriteAlarmCounter>
 8009750:	2800      	cmp	r0, #0
 8009752:	d0f1      	beq.n	8009738 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009754:	2304      	movs	r3, #4
 8009756:	746b      	strb	r3, [r5, #17]
          __HAL_UNLOCK(hrtc);
 8009758:	2300      	movs	r3, #0
 800975a:	742b      	strb	r3, [r5, #16]
          return HAL_ERROR;
 800975c:	2601      	movs	r6, #1
 800975e:	e7c9      	b.n	80096f4 <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8009760:	2601      	movs	r6, #1
 8009762:	e7c7      	b.n	80096f4 <HAL_RTC_SetTime+0x4a>
 8009764:	2601      	movs	r6, #1
 8009766:	e7c5      	b.n	80096f4 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 8009768:	2602      	movs	r6, #2
 800976a:	e7c3      	b.n	80096f4 <HAL_RTC_SetTime+0x4a>

0800976c <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 800976c:	2800      	cmp	r0, #0
 800976e:	d05a      	beq.n	8009826 <HAL_RTC_SetDate+0xba>
{
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	460d      	mov	r5, r1
 8009774:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 8009776:	2900      	cmp	r1, #0
 8009778:	d057      	beq.n	800982a <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 800977a:	7c03      	ldrb	r3, [r0, #16]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d056      	beq.n	800982e <HAL_RTC_SetDate+0xc2>
 8009780:	2301      	movs	r3, #1
 8009782:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009784:	2302      	movs	r3, #2
 8009786:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8009788:	b9ba      	cbnz	r2, 80097ba <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 800978a:	78cb      	ldrb	r3, [r1, #3]
 800978c:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800978e:	784b      	ldrb	r3, [r1, #1]
 8009790:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8009792:	788b      	ldrb	r3, [r1, #2]
 8009794:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8009796:	7ba2      	ldrb	r2, [r4, #14]
 8009798:	7b61      	ldrb	r1, [r4, #13]
 800979a:	7be0      	ldrb	r0, [r4, #15]
 800979c:	f7ff fedc 	bl	8009558 <RTC_WeekDayNum>
 80097a0:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80097a2:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7ff feb3 	bl	8009510 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80097aa:	4b22      	ldr	r3, [pc, #136]	; (8009834 <HAL_RTC_SetDate+0xc8>)
 80097ac:	4298      	cmp	r0, r3
 80097ae:	d811      	bhi.n	80097d4 <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 80097b0:	2301      	movs	r3, #1
 80097b2:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80097b4:	2000      	movs	r0, #0
 80097b6:	7420      	strb	r0, [r4, #16]
}
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80097ba:	78c8      	ldrb	r0, [r1, #3]
 80097bc:	f7ff fec2 	bl	8009544 <RTC_Bcd2ToByte>
 80097c0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80097c2:	7868      	ldrb	r0, [r5, #1]
 80097c4:	f7ff febe 	bl	8009544 <RTC_Bcd2ToByte>
 80097c8:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80097ca:	78a8      	ldrb	r0, [r5, #2]
 80097cc:	f7ff feba 	bl	8009544 <RTC_Bcd2ToByte>
 80097d0:	73a0      	strb	r0, [r4, #14]
 80097d2:	e7e0      	b.n	8009796 <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80097d4:	4d18      	ldr	r5, [pc, #96]	; (8009838 <HAL_RTC_SetDate+0xcc>)
 80097d6:	fba5 3500 	umull	r3, r5, r5, r0
 80097da:	0c2d      	lsrs	r5, r5, #16
 80097dc:	4b17      	ldr	r3, [pc, #92]	; (800983c <HAL_RTC_SetDate+0xd0>)
 80097de:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80097e2:	4629      	mov	r1, r5
 80097e4:	4620      	mov	r0, r4
 80097e6:	f7ff ff36 	bl	8009656 <RTC_WriteTimeCounter>
 80097ea:	b128      	cbz	r0, 80097f8 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80097ec:	2304      	movs	r3, #4
 80097ee:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80097f0:	2300      	movs	r3, #0
 80097f2:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 80097f4:	2001      	movs	r0, #1
 80097f6:	e7df      	b.n	80097b8 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff fe9c 	bl	8009536 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80097fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009802:	d0d5      	beq.n	80097b0 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 8009804:	4285      	cmp	r5, r0
 8009806:	d9d3      	bls.n	80097b0 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009808:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800980c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8009810:	4620      	mov	r0, r4
 8009812:	f7ff ff35 	bl	8009680 <RTC_WriteAlarmCounter>
 8009816:	2800      	cmp	r0, #0
 8009818:	d0ca      	beq.n	80097b0 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800981a:	2304      	movs	r3, #4
 800981c:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 800981e:	2300      	movs	r3, #0
 8009820:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8009822:	2001      	movs	r0, #1
 8009824:	e7c8      	b.n	80097b8 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8009826:	2001      	movs	r0, #1
}
 8009828:	4770      	bx	lr
    return HAL_ERROR;
 800982a:	2001      	movs	r0, #1
 800982c:	e7c4      	b.n	80097b8 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 800982e:	2002      	movs	r0, #2
 8009830:	e7c2      	b.n	80097b8 <HAL_RTC_SetDate+0x4c>
 8009832:	bf00      	nop
 8009834:	00015f8f 	.word	0x00015f8f
 8009838:	c22e4507 	.word	0xc22e4507
 800983c:	00015180 	.word	0x00015180

08009840 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 8009840:	b1c0      	cbz	r0, 8009874 <HAL_RTC_WaitForSynchro+0x34>
{
 8009842:	b538      	push	{r3, r4, r5, lr}
 8009844:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009846:	6802      	ldr	r2, [r0, #0]
 8009848:	6853      	ldr	r3, [r2, #4]
 800984a:	f023 0308 	bic.w	r3, r3, #8
 800984e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8009850:	f7fd fb0a 	bl	8006e68 <HAL_GetTick>
 8009854:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f013 0f08 	tst.w	r3, #8
 800985e:	d107      	bne.n	8009870 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009860:	f7fd fb02 	bl	8006e68 <HAL_GetTick>
 8009864:	1b00      	subs	r0, r0, r4
 8009866:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800986a:	d9f4      	bls.n	8009856 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800986c:	2003      	movs	r0, #3
 800986e:	e000      	b.n	8009872 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8009870:	2000      	movs	r0, #0
}
 8009872:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009874:	2001      	movs	r0, #1
}
 8009876:	4770      	bx	lr

08009878 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8009878:	2800      	cmp	r0, #0
 800987a:	d057      	beq.n	800992c <HAL_RTC_Init+0xb4>
{
 800987c:	b510      	push	{r4, lr}
 800987e:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009880:	7c43      	ldrb	r3, [r0, #17]
 8009882:	b14b      	cbz	r3, 8009898 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009884:	2302      	movs	r3, #2
 8009886:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009888:	4620      	mov	r0, r4
 800988a:	f7ff ffd9 	bl	8009840 <HAL_RTC_WaitForSynchro>
 800988e:	b138      	cbz	r0, 80098a0 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009890:	2304      	movs	r3, #4
 8009892:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8009894:	2001      	movs	r0, #1
}
 8009896:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8009898:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800989a:	f7fd f8d9 	bl	8006a50 <HAL_RTC_MspInit>
 800989e:	e7f1      	b.n	8009884 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7ff fea7 	bl	80095f4 <RTC_EnterInitMode>
 80098a6:	bb60      	cbnz	r0, 8009902 <HAL_RTC_Init+0x8a>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80098a8:	6822      	ldr	r2, [r4, #0]
 80098aa:	6853      	ldr	r3, [r2, #4]
 80098ac:	f023 0307 	bic.w	r3, r3, #7
 80098b0:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80098b2:	68a3      	ldr	r3, [r4, #8]
 80098b4:	b123      	cbz	r3, 80098c0 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80098b6:	4a1e      	ldr	r2, [pc, #120]	; (8009930 <HAL_RTC_Init+0xb8>)
 80098b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80098ba:	f023 0301 	bic.w	r3, r3, #1
 80098be:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80098c0:	4a1b      	ldr	r2, [pc, #108]	; (8009930 <HAL_RTC_Init+0xb8>)
 80098c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80098c4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80098c8:	68a1      	ldr	r1, [r4, #8]
 80098ca:	430b      	orrs	r3, r1
 80098cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80098ce:	6862      	ldr	r2, [r4, #4]
 80098d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098d4:	d019      	beq.n	800990a <HAL_RTC_Init+0x92>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80098d6:	6821      	ldr	r1, [r4, #0]
 80098d8:	688b      	ldr	r3, [r1, #8]
 80098da:	f023 030f 	bic.w	r3, r3, #15
 80098de:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80098e2:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	68cb      	ldr	r3, [r1, #12]
 80098e8:	0c1b      	lsrs	r3, r3, #16
 80098ea:	041b      	lsls	r3, r3, #16
 80098ec:	b292      	uxth	r2, r2
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60cb      	str	r3, [r1, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff fe96 	bl	8009624 <RTC_ExitInitMode>
 80098f8:	b188      	cbz	r0, 800991e <HAL_RTC_Init+0xa6>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80098fa:	2304      	movs	r3, #4
 80098fc:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 80098fe:	2001      	movs	r0, #1
 8009900:	e7c9      	b.n	8009896 <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009902:	2304      	movs	r3, #4
 8009904:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8009906:	2001      	movs	r0, #1
 8009908:	e7c5      	b.n	8009896 <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800990a:	2001      	movs	r0, #1
 800990c:	f7ff fd84 	bl	8009418 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8009910:	b108      	cbz	r0, 8009916 <HAL_RTC_Init+0x9e>
        prescaler = prescaler - 1U;
 8009912:	1e42      	subs	r2, r0, #1
 8009914:	e7df      	b.n	80098d6 <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009916:	2304      	movs	r3, #4
 8009918:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 800991a:	2001      	movs	r0, #1
 800991c:	e7bb      	b.n	8009896 <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 800991e:	2300      	movs	r3, #0
 8009920:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009922:	2301      	movs	r3, #1
 8009924:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009926:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8009928:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 800992a:	e7b4      	b.n	8009896 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 800992c:	2001      	movs	r0, #1
}
 800992e:	4770      	bx	lr
 8009930:	40006c00 	.word	0x40006c00

08009934 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009934:	2800      	cmp	r0, #0
 8009936:	d056      	beq.n	80099e6 <HAL_SPI_Init+0xb2>
{
 8009938:	b510      	push	{r4, lr}
 800993a:	4604      	mov	r4, r0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800993c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800993e:	b933      	cbnz	r3, 800994e <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009940:	6843      	ldr	r3, [r0, #4]
 8009942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009946:	d005      	beq.n	8009954 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009948:	2300      	movs	r3, #0
 800994a:	61c3      	str	r3, [r0, #28]
 800994c:	e002      	b.n	8009954 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800994e:	2300      	movs	r3, #0
 8009950:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009952:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009954:	2300      	movs	r3, #0
 8009956:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009958:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800995c:	2b00      	cmp	r3, #0
 800995e:	d03c      	beq.n	80099da <HAL_SPI_Init+0xa6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009960:	2302      	movs	r3, #2
 8009962:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	6813      	ldr	r3, [r2, #0]
 800996a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009970:	6822      	ldr	r2, [r4, #0]
 8009972:	6863      	ldr	r3, [r4, #4]
 8009974:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8009978:	68a1      	ldr	r1, [r4, #8]
 800997a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800997e:	430b      	orrs	r3, r1
 8009980:	68e1      	ldr	r1, [r4, #12]
 8009982:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8009986:	430b      	orrs	r3, r1
 8009988:	6921      	ldr	r1, [r4, #16]
 800998a:	f001 0102 	and.w	r1, r1, #2
 800998e:	430b      	orrs	r3, r1
 8009990:	6961      	ldr	r1, [r4, #20]
 8009992:	f001 0101 	and.w	r1, r1, #1
 8009996:	430b      	orrs	r3, r1
 8009998:	69a1      	ldr	r1, [r4, #24]
 800999a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800999e:	430b      	orrs	r3, r1
 80099a0:	69e1      	ldr	r1, [r4, #28]
 80099a2:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80099a6:	430b      	orrs	r3, r1
 80099a8:	6a21      	ldr	r1, [r4, #32]
 80099aa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80099b2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80099b6:	430b      	orrs	r3, r1
 80099b8:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80099ba:	6822      	ldr	r2, [r4, #0]
 80099bc:	8b63      	ldrh	r3, [r4, #26]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099c4:	6822      	ldr	r2, [r4, #0]
 80099c6:	69d3      	ldr	r3, [r2, #28]
 80099c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099cc:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099ce:	2000      	movs	r0, #0
 80099d0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80099d8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80099da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80099de:	4620      	mov	r0, r4
 80099e0:	f7fd f856 	bl	8006a90 <HAL_SPI_MspInit>
 80099e4:	e7bc      	b.n	8009960 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80099e6:	2001      	movs	r0, #1
}
 80099e8:	4770      	bx	lr

080099ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ea:	6802      	ldr	r2, [r0, #0]
 80099ec:	68d3      	ldr	r3, [r2, #12]
 80099ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099f2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f4:	6802      	ldr	r2, [r0, #0]
 80099f6:	6953      	ldr	r3, [r2, #20]
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d005      	beq.n	8009a10 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a04:	2320      	movs	r3, #32
 8009a06:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6303      	str	r3, [r0, #48]	; 0x30
}
 8009a0e:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a10:	6802      	ldr	r2, [r0, #0]
 8009a12:	68d3      	ldr	r3, [r2, #12]
 8009a14:	f023 0310 	bic.w	r3, r3, #16
 8009a18:	60d3      	str	r3, [r2, #12]
 8009a1a:	e7f3      	b.n	8009a04 <UART_EndRxTransfer+0x1a>

08009a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a20:	6802      	ldr	r2, [r0, #0]
 8009a22:	6913      	ldr	r3, [r2, #16]
 8009a24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009a28:	68c1      	ldr	r1, [r0, #12]
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8009a2e:	6801      	ldr	r1, [r0, #0]
 8009a30:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009a32:	6883      	ldr	r3, [r0, #8]
 8009a34:	6900      	ldr	r0, [r0, #16]
 8009a36:	4303      	orrs	r3, r0
 8009a38:	6960      	ldr	r0, [r4, #20]
 8009a3a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8009a3c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8009a40:	f022 020c 	bic.w	r2, r2, #12
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a48:	6822      	ldr	r2, [r4, #0]
 8009a4a:	6953      	ldr	r3, [r2, #20]
 8009a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a50:	69a1      	ldr	r1, [r4, #24]
 8009a52:	430b      	orrs	r3, r1
 8009a54:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <UART_SetConfig+0x80>)
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d01a      	beq.n	8009a94 <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a5e:	f7ff fc1b 	bl	8009298 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009a6a:	6863      	ldr	r3, [r4, #4]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a72:	6824      	ldr	r4, [r4, #0]
 8009a74:	480a      	ldr	r0, [pc, #40]	; (8009aa0 <UART_SetConfig+0x84>)
 8009a76:	fba0 2103 	umull	r2, r1, r0, r3
 8009a7a:	0949      	lsrs	r1, r1, #5
 8009a7c:	2264      	movs	r2, #100	; 0x64
 8009a7e:	fb02 3311 	mls	r3, r2, r1, r3
 8009a82:	011b      	lsls	r3, r3, #4
 8009a84:	3332      	adds	r3, #50	; 0x32
 8009a86:	fba0 2303 	umull	r2, r3, r0, r3
 8009a8a:	0109      	lsls	r1, r1, #4
 8009a8c:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8009a90:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8009a92:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a94:	f7ff fc10 	bl	80092b8 <HAL_RCC_GetPCLK2Freq>
 8009a98:	e7e3      	b.n	8009a62 <UART_SetConfig+0x46>
 8009a9a:	bf00      	nop
 8009a9c:	40013800 	.word	0x40013800
 8009aa0:	51eb851f 	.word	0x51eb851f

08009aa4 <HAL_UART_Init>:
  if (huart == NULL)
 8009aa4:	b358      	cbz	r0, 8009afe <HAL_UART_Init+0x5a>
{
 8009aa6:	b510      	push	{r4, lr}
 8009aa8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009aae:	b30b      	cbz	r3, 8009af4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8009ab0:	2324      	movs	r3, #36	; 0x24
 8009ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8009ab6:	6822      	ldr	r2, [r4, #0]
 8009ab8:	68d3      	ldr	r3, [r2, #12]
 8009aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009abe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f7ff ffab 	bl	8009a1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	6913      	ldr	r3, [r2, #16]
 8009aca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009ace:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	6953      	ldr	r3, [r2, #20]
 8009ad4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009ad8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8009ada:	6822      	ldr	r2, [r4, #0]
 8009adc:	68d3      	ldr	r3, [r2, #12]
 8009ade:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ae2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8009af2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009af4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8009af8:	f7fd f806 	bl	8006b08 <HAL_UART_MspInit>
 8009afc:	e7d8      	b.n	8009ab0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8009afe:	2001      	movs	r0, #1
}
 8009b00:	4770      	bx	lr
	...

08009b04 <HAL_UART_Transmit_DMA>:
{
 8009b04:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8009b06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d131      	bne.n	8009b74 <HAL_UART_Transmit_DMA+0x70>
 8009b10:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8009b12:	2900      	cmp	r1, #0
 8009b14:	d030      	beq.n	8009b78 <HAL_UART_Transmit_DMA+0x74>
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	d030      	beq.n	8009b7c <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 8009b1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d02e      	beq.n	8009b80 <HAL_UART_Transmit_DMA+0x7c>
 8009b22:	2301      	movs	r3, #1
 8009b24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8009b28:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8009b2a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b2c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2e:	2500      	movs	r5, #0
 8009b30:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b32:	2321      	movs	r3, #33	; 0x21
 8009b34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b3a:	4812      	ldr	r0, [pc, #72]	; (8009b84 <HAL_UART_Transmit_DMA+0x80>)
 8009b3c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b40:	4811      	ldr	r0, [pc, #68]	; (8009b88 <HAL_UART_Transmit_DMA+0x84>)
 8009b42:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b46:	4811      	ldr	r0, [pc, #68]	; (8009b8c <HAL_UART_Transmit_DMA+0x88>)
 8009b48:	6318      	str	r0, [r3, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8009b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b4c:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	1d02      	adds	r2, r0, #4
 8009b54:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009b56:	f7fd fd3d 	bl	80075d4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b60:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8009b62:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	6953      	ldr	r3, [r2, #20]
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b6e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8009b70:	4628      	mov	r0, r5
 8009b72:	e000      	b.n	8009b76 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 8009b74:	2002      	movs	r0, #2
}
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009b78:	2001      	movs	r0, #1
 8009b7a:	e7fc      	b.n	8009b76 <HAL_UART_Transmit_DMA+0x72>
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	e7fa      	b.n	8009b76 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8009b80:	2002      	movs	r0, #2
 8009b82:	e7f8      	b.n	8009b76 <HAL_UART_Transmit_DMA+0x72>
 8009b84:	08009b93 	.word	0x08009b93
 8009b88:	08009bc5 	.word	0x08009bc5
 8009b8c:	08009bd3 	.word	0x08009bd3

08009b90 <HAL_UART_TxCpltCallback>:
}
 8009b90:	4770      	bx	lr

08009b92 <UART_DMATransmitCplt>:
{
 8009b92:	b508      	push	{r3, lr}
 8009b94:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b96:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f013 0f20 	tst.w	r3, #32
 8009ba0:	d10c      	bne.n	8009bbc <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0x00U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ba6:	6802      	ldr	r2, [r0, #0]
 8009ba8:	6953      	ldr	r3, [r2, #20]
 8009baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bae:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bb0:	6802      	ldr	r2, [r0, #0]
 8009bb2:	68d3      	ldr	r3, [r2, #12]
 8009bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb8:	60d3      	str	r3, [r2, #12]
}
 8009bba:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8009bbc:	f7ff ffe8 	bl	8009b90 <HAL_UART_TxCpltCallback>
}
 8009bc0:	e7fb      	b.n	8009bba <UART_DMATransmitCplt+0x28>

08009bc2 <HAL_UART_TxHalfCpltCallback>:
}
 8009bc2:	4770      	bx	lr

08009bc4 <UART_DMATxHalfCplt>:
{
 8009bc4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8009bc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009bc8:	f7ff fffb 	bl	8009bc2 <HAL_UART_TxHalfCpltCallback>
}
 8009bcc:	bd08      	pop	{r3, pc}

08009bce <HAL_UART_RxCpltCallback>:
}
 8009bce:	4770      	bx	lr

08009bd0 <HAL_UART_ErrorCallback>:
}
 8009bd0:	4770      	bx	lr

08009bd2 <UART_DMAError>:
{
 8009bd2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bd4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009bda:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b21      	cmp	r3, #33	; 0x21
 8009be2:	d00e      	beq.n	8009c02 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009be8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b22      	cmp	r3, #34	; 0x22
 8009bf0:	d014      	beq.n	8009c1c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bf4:	f043 0310 	orr.w	r3, r3, #16
 8009bf8:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7ff ffe8 	bl	8009bd0 <HAL_UART_ErrorCallback>
}
 8009c00:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009c06:	d0ed      	beq.n	8009be4 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c0c:	68d3      	ldr	r3, [r2, #12]
 8009c0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c12:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009c14:	2320      	movs	r3, #32
 8009c16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009c1a:	e7e3      	b.n	8009be4 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c1c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009c20:	d0e7      	beq.n	8009bf2 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff fedf 	bl	80099ea <UART_EndRxTransfer>
 8009c2c:	e7e1      	b.n	8009bf2 <UART_DMAError+0x20>

08009c2e <UART_DMAAbortOnError>:
{
 8009c2e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c30:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c36:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8009c38:	f7ff ffca 	bl	8009bd0 <HAL_UART_ErrorCallback>
}
 8009c3c:	bd08      	pop	{r3, pc}

08009c3e <HAL_UARTEx_RxEventCallback>:
}
 8009c3e:	4770      	bx	lr

08009c40 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c40:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b22      	cmp	r3, #34	; 0x22
 8009c48:	d11e      	bne.n	8009c88 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c4a:	6883      	ldr	r3, [r0, #8]
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c50:	d006      	beq.n	8009c60 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c52:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c54:	b183      	cbz	r3, 8009c78 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c56:	6803      	ldr	r3, [r0, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5e:	e01b      	b.n	8009c98 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c60:	6903      	ldr	r3, [r0, #16]
 8009c62:	b9ab      	cbnz	r3, 8009c90 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c64:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c66:	6803      	ldr	r3, [r0, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8009c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009c72:	3302      	adds	r3, #2
 8009c74:	6283      	str	r3, [r0, #40]	; 0x28
 8009c76:	e013      	b.n	8009ca0 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c78:	6903      	ldr	r3, [r0, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1eb      	bne.n	8009c56 <UART_Receive_IT+0x16>
 8009c7e:	e008      	b.n	8009c92 <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 8009c80:	f7ff ffa5 	bl	8009bce <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8009c84:	2000      	movs	r0, #0
 8009c86:	e03f      	b.n	8009d08 <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 8009c88:	2002      	movs	r0, #2
 8009c8a:	4770      	bx	lr
    return HAL_OK;
 8009c8c:	2000      	movs	r0, #0
}
 8009c8e:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c90:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c92:	6803      	ldr	r3, [r0, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8009c9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8009ca0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1ef      	bne.n	8009c8c <UART_Receive_IT+0x4c>
{
 8009cac:	b500      	push	{lr}
 8009cae:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cb0:	6802      	ldr	r2, [r0, #0]
 8009cb2:	68d3      	ldr	r3, [r2, #12]
 8009cb4:	f023 0320 	bic.w	r3, r3, #32
 8009cb8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cba:	6802      	ldr	r2, [r0, #0]
 8009cbc:	68d3      	ldr	r3, [r2, #12]
 8009cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cc4:	6802      	ldr	r2, [r0, #0]
 8009cc6:	6953      	ldr	r3, [r2, #20]
 8009cc8:	f023 0301 	bic.w	r3, r3, #1
 8009ccc:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009cce:	2320      	movs	r3, #32
 8009cd0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d1d2      	bne.n	8009c80 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cde:	6802      	ldr	r2, [r0, #0]
 8009ce0:	68d3      	ldr	r3, [r2, #12]
 8009ce2:	f023 0310 	bic.w	r3, r3, #16
 8009ce6:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009ce8:	6803      	ldr	r3, [r0, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	f012 0f10 	tst.w	r2, #16
 8009cf0:	d006      	beq.n	8009d00 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	9201      	str	r2, [sp, #4]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	9201      	str	r2, [sp, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d00:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8009d02:	f7ff ff9c 	bl	8009c3e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8009d06:	2000      	movs	r0, #0
}
 8009d08:	b003      	add	sp, #12
 8009d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009d10 <HAL_UART_IRQHandler>:
{
 8009d10:	b530      	push	{r4, r5, lr}
 8009d12:	b083      	sub	sp, #12
 8009d14:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d16:	6802      	ldr	r2, [r0, #0]
 8009d18:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d1a:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d1c:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8009d1e:	f013 0f0f 	tst.w	r3, #15
 8009d22:	d109      	bne.n	8009d38 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d24:	f013 0f20 	tst.w	r3, #32
 8009d28:	d00c      	beq.n	8009d44 <HAL_UART_IRQHandler+0x34>
 8009d2a:	f011 0f20 	tst.w	r1, #32
 8009d2e:	d009      	beq.n	8009d44 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7ff ff85 	bl	8009c40 <UART_Receive_IT>
      return;
 8009d36:	e016      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d38:	f000 0001 	and.w	r0, r0, #1
 8009d3c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8009d40:	4305      	orrs	r5, r0
 8009d42:	d112      	bne.n	8009d6a <HAL_UART_IRQHandler+0x5a>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d44:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009d46:	2801      	cmp	r0, #1
 8009d48:	d078      	beq.n	8009e3c <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d4e:	d003      	beq.n	8009d58 <HAL_UART_IRQHandler+0x48>
 8009d50:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009d54:	f040 80da 	bne.w	8009f0c <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d5c:	d003      	beq.n	8009d66 <HAL_UART_IRQHandler+0x56>
 8009d5e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009d62:	f040 8100 	bne.w	8009f66 <HAL_UART_IRQHandler+0x256>
}
 8009d66:	b003      	add	sp, #12
 8009d68:	bd30      	pop	{r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d6a:	f013 0f01 	tst.w	r3, #1
 8009d6e:	d006      	beq.n	8009d7e <HAL_UART_IRQHandler+0x6e>
 8009d70:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009d74:	d003      	beq.n	8009d7e <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009d78:	f042 0201 	orr.w	r2, r2, #1
 8009d7c:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d7e:	f013 0f04 	tst.w	r3, #4
 8009d82:	d00b      	beq.n	8009d9c <HAL_UART_IRQHandler+0x8c>
 8009d84:	b190      	cbz	r0, 8009dac <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009d88:	f042 0202 	orr.w	r2, r2, #2
 8009d8c:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d8e:	f013 0f02 	tst.w	r3, #2
 8009d92:	d107      	bne.n	8009da4 <HAL_UART_IRQHandler+0x94>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d94:	f013 0f08 	tst.w	r3, #8
 8009d98:	d10f      	bne.n	8009dba <HAL_UART_IRQHandler+0xaa>
 8009d9a:	e012      	b.n	8009dc2 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d9c:	f013 0f02 	tst.w	r3, #2
 8009da0:	d004      	beq.n	8009dac <HAL_UART_IRQHandler+0x9c>
 8009da2:	b118      	cbz	r0, 8009dac <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009da4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009da6:	f042 0204 	orr.w	r2, r2, #4
 8009daa:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009dac:	f013 0f08 	tst.w	r3, #8
 8009db0:	d007      	beq.n	8009dc2 <HAL_UART_IRQHandler+0xb2>
 8009db2:	f001 0220 	and.w	r2, r1, #32
 8009db6:	4302      	orrs	r2, r0
 8009db8:	d003      	beq.n	8009dc2 <HAL_UART_IRQHandler+0xb2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009dbc:	f042 0208 	orr.w	r2, r2, #8
 8009dc0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009dc4:	2a00      	cmp	r2, #0
 8009dc6:	d0ce      	beq.n	8009d66 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dc8:	f013 0f20 	tst.w	r3, #32
 8009dcc:	d002      	beq.n	8009dd4 <HAL_UART_IRQHandler+0xc4>
 8009dce:	f011 0f20 	tst.w	r1, #32
 8009dd2:	d10e      	bne.n	8009df2 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dda:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	4313      	orrs	r3, r2
 8009de4:	d109      	bne.n	8009dfa <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fef2 	bl	8009bd0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dec:	2300      	movs	r3, #0
 8009dee:	6423      	str	r3, [r4, #64]	; 0x40
 8009df0:	e7b9      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7ff ff24 	bl	8009c40 <UART_Receive_IT>
 8009df8:	e7ec      	b.n	8009dd4 <HAL_UART_IRQHandler+0xc4>
        UART_EndRxTransfer(huart);
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f7ff fdf5 	bl	80099ea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	695a      	ldr	r2, [r3, #20]
 8009e04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009e08:	d014      	beq.n	8009e34 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e0a:	695a      	ldr	r2, [r3, #20]
 8009e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e10:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8009e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e14:	b153      	cbz	r3, 8009e2c <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e16:	4a59      	ldr	r2, [pc, #356]	; (8009f7c <HAL_UART_IRQHandler+0x26c>)
 8009e18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009e1c:	f7fd fc46 	bl	80076ac <HAL_DMA_Abort_IT>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d0a0      	beq.n	8009d66 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e28:	4798      	blx	r3
 8009e2a:	e79c      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
            HAL_UART_ErrorCallback(huart);
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f7ff fecf 	bl	8009bd0 <HAL_UART_ErrorCallback>
 8009e32:	e798      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8009e34:	4620      	mov	r0, r4
 8009e36:	f7ff fecb 	bl	8009bd0 <HAL_UART_ErrorCallback>
 8009e3a:	e794      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009e3c:	f013 0f10 	tst.w	r3, #16
 8009e40:	d083      	beq.n	8009d4a <HAL_UART_IRQHandler+0x3a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009e42:	f011 0f10 	tst.w	r1, #16
 8009e46:	d080      	beq.n	8009d4a <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e48:	2300      	movs	r3, #0
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	6813      	ldr	r3, [r2, #0]
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	6853      	ldr	r3, [r2, #4]
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e56:	6953      	ldr	r3, [r2, #20]
 8009e58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009e5c:	d032      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e60:	680b      	ldr	r3, [r1, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f43f af7d 	beq.w	8009d66 <HAL_UART_IRQHandler+0x56>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009e6c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8009e6e:	4298      	cmp	r0, r3
 8009e70:	f67f af79 	bls.w	8009d66 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8009e74:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e76:	698b      	ldr	r3, [r1, #24]
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d107      	bne.n	8009e8c <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e7c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8009e7e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8009e80:	1ac9      	subs	r1, r1, r3
 8009e82:	b289      	uxth	r1, r1
 8009e84:	4620      	mov	r0, r4
 8009e86:	f7ff feda 	bl	8009c3e <HAL_UARTEx_RxEventCallback>
 8009e8a:	e76c      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e8c:	68d3      	ldr	r3, [r2, #12]
 8009e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e92:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	6953      	ldr	r3, [r2, #20]
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	6953      	ldr	r3, [r2, #20]
 8009ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea6:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	68d3      	ldr	r3, [r2, #12]
 8009eb6:	f023 0310 	bic.w	r3, r3, #16
 8009eba:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ebc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009ebe:	f7fd fbd3 	bl	8007668 <HAL_DMA_Abort>
 8009ec2:	e7db      	b.n	8009e7c <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ec4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8009ec6:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8009ec8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f43f af4a 	beq.w	8009d66 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ed2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009ed4:	1a59      	subs	r1, r3, r1
 8009ed6:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	f43f af44 	beq.w	8009d66 <HAL_UART_IRQHandler+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ede:	68d3      	ldr	r3, [r2, #12]
 8009ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ee4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	6953      	ldr	r3, [r2, #20]
 8009eea:	f023 0301 	bic.w	r3, r3, #1
 8009eee:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8009ef0:	2320      	movs	r3, #32
 8009ef2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	68d3      	ldr	r3, [r2, #12]
 8009efe:	f023 0310 	bic.w	r3, r3, #16
 8009f02:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f04:	4620      	mov	r0, r4
 8009f06:	f7ff fe9a 	bl	8009c3e <HAL_UARTEx_RxEventCallback>
 8009f0a:	e72c      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b21      	cmp	r3, #33	; 0x21
 8009f14:	f47f af27 	bne.w	8009d66 <HAL_UART_IRQHandler+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f18:	68a3      	ldr	r3, [r4, #8]
 8009f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f1e:	d016      	beq.n	8009f4e <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f20:	6a23      	ldr	r3, [r4, #32]
 8009f22:	1c59      	adds	r1, r3, #1
 8009f24:	6221      	str	r1, [r4, #32]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8009f2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	84e3      	strh	r3, [r4, #38]	; 0x26
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f47f af17 	bne.w	8009d66 <HAL_UART_IRQHandler+0x56>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	68d3      	ldr	r3, [r2, #12]
 8009f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f40:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	68d3      	ldr	r3, [r2, #12]
 8009f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4a:	60d3      	str	r3, [r2, #12]
 8009f4c:	e70b      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f54:	6a23      	ldr	r3, [r4, #32]
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8009f5e:	6a23      	ldr	r3, [r4, #32]
 8009f60:	3302      	adds	r3, #2
 8009f62:	6223      	str	r3, [r4, #32]
 8009f64:	e7e1      	b.n	8009f2a <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f66:	68d3      	ldr	r3, [r2, #12]
 8009f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f6c:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009f6e:	2320      	movs	r3, #32
 8009f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7ff fe0b 	bl	8009b90 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8009f7a:	e6f4      	b.n	8009d66 <HAL_UART_IRQHandler+0x56>
 8009f7c:	08009c2f 	.word	0x08009c2f

08009f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009f80:	b084      	sub	sp, #16
 8009f82:	a801      	add	r0, sp, #4
 8009f84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8009f88:	2000      	movs	r0, #0
 8009f8a:	b004      	add	sp, #16
 8009f8c:	4770      	bx	lr

08009f8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009f8e:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009f90:	2000      	movs	r0, #0
 8009f92:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009f96:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8009f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8009f9e:	4770      	bx	lr

08009fa0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009fa0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8009fa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fa8:	045b      	lsls	r3, r3, #17
 8009faa:	0c5b      	lsrs	r3, r3, #17
 8009fac:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	4770      	bx	lr

08009fb4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	4770      	bx	lr

08009fb8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009fb8:	b084      	sub	sp, #16
 8009fba:	b410      	push	{r4}
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	a802      	add	r0, sp, #8
 8009fc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009fca:	2000      	movs	r0, #0
 8009fcc:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009fd0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009fd4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8009fd8:	bc10      	pop	{r4}
 8009fda:	b004      	add	sp, #16
 8009fdc:	4770      	bx	lr

08009fde <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fde:	b470      	push	{r4, r5, r6}
 8009fe0:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009fe2:	780d      	ldrb	r5, [r1, #0]
 8009fe4:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8009fe8:	b292      	uxth	r2, r2
 8009fea:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8009fee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ff2:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8009ff4:	78c8      	ldrb	r0, [r1, #3]
 8009ff6:	2803      	cmp	r0, #3
 8009ff8:	d85b      	bhi.n	800a0b2 <USB_ActivateEndpoint+0xd4>
 8009ffa:	e8df f000 	tbb	[pc, r0]
 8009ffe:	564f      	.short	0x564f
 800a000:	5202      	.short	0x5202
 800a002:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a004:	f248 0480 	movw	r4, #32896	; 0x8080
 800a008:	4322      	orrs	r2, r4
 800a00a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a00e:	780d      	ldrb	r5, [r1, #0]
 800a010:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800a014:	b292      	uxth	r2, r2
 800a016:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a01a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a01e:	432a      	orrs	r2, r5
 800a020:	4322      	orrs	r2, r4
 800a022:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 800a026:	7b0a      	ldrb	r2, [r1, #12]
 800a028:	2a00      	cmp	r2, #0
 800a02a:	f040 80a3 	bne.w	800a174 <USB_ActivateEndpoint+0x196>
  {
    if (ep->is_in != 0U)
 800a02e:	784a      	ldrb	r2, [r1, #1]
 800a030:	2a00      	cmp	r2, #0
 800a032:	d040      	beq.n	800a0b6 <USB_ActivateEndpoint+0xd8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a034:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a038:	b2ad      	uxth	r5, r5
 800a03a:	780a      	ldrb	r2, [r1, #0]
 800a03c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a044:	88cc      	ldrh	r4, [r1, #6]
 800a046:	0864      	lsrs	r4, r4, #1
 800a048:	0064      	lsls	r4, r4, #1
 800a04a:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a04c:	780c      	ldrb	r4, [r1, #0]
 800a04e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a052:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a056:	d00c      	beq.n	800a072 <USB_ActivateEndpoint+0x94>
 800a058:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a05c:	b292      	uxth	r2, r2
 800a05e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a062:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a06a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a06e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800a072:	78ca      	ldrb	r2, [r1, #3]
 800a074:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a076:	7809      	ldrb	r1, [r1, #0]
 800a078:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a07c:	b292      	uxth	r2, r2
 800a07e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a086:	bf18      	it	ne
 800a088:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a08c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a094:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800a098:	bc70      	pop	{r4, r5, r6}
 800a09a:	4770      	bx	lr
      wEpRegVal |= USB_EP_CONTROL;
 800a09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800a0a0:	e7b0      	b.n	800a004 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 800a0a2:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800a0a6:	2000      	movs	r0, #0
      break;
 800a0a8:	e7ac      	b.n	800a004 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a0aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800a0ae:	2000      	movs	r0, #0
      break;
 800a0b0:	e7a8      	b.n	800a004 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	e7a6      	b.n	800a004 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a0b6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a0ba:	b2ad      	uxth	r5, r5
 800a0bc:	780a      	ldrb	r2, [r1, #0]
 800a0be:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a0c2:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800a0c6:	88cc      	ldrh	r4, [r1, #6]
 800a0c8:	0864      	lsrs	r4, r4, #1
 800a0ca:	0064      	lsls	r4, r4, #1
 800a0cc:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a0ce:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a0d2:	b2ad      	uxth	r5, r5
 800a0d4:	780a      	ldrb	r2, [r1, #0]
 800a0d6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a0da:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800a0de:	690c      	ldr	r4, [r1, #16]
 800a0e0:	bb84      	cbnz	r4, 800a144 <USB_ActivateEndpoint+0x166>
 800a0e2:	5b54      	ldrh	r4, [r2, r5]
 800a0e4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800a0e8:	0424      	lsls	r4, r4, #16
 800a0ea:	0c24      	lsrs	r4, r4, #16
 800a0ec:	5354      	strh	r4, [r2, r5]
 800a0ee:	5b54      	ldrh	r4, [r2, r5]
 800a0f0:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800a0f4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800a0f8:	b2a4      	uxth	r4, r4
 800a0fa:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0fc:	780c      	ldrb	r4, [r1, #0]
 800a0fe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a102:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a106:	d00c      	beq.n	800a122 <USB_ActivateEndpoint+0x144>
 800a108:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a10c:	b292      	uxth	r2, r2
 800a10e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a116:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a11a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a11e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a122:	7809      	ldrb	r1, [r1, #0]
 800a124:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a128:	b292      	uxth	r2, r2
 800a12a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a12e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a132:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800a136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a13a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a13e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800a142:	e7a9      	b.n	800a098 <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a144:	2c3e      	cmp	r4, #62	; 0x3e
 800a146:	d808      	bhi.n	800a15a <USB_ActivateEndpoint+0x17c>
 800a148:	0866      	lsrs	r6, r4, #1
 800a14a:	f014 0f01 	tst.w	r4, #1
 800a14e:	bf18      	it	ne
 800a150:	3601      	addne	r6, #1
 800a152:	02b6      	lsls	r6, r6, #10
 800a154:	b2b6      	uxth	r6, r6
 800a156:	5356      	strh	r6, [r2, r5]
 800a158:	e7d0      	b.n	800a0fc <USB_ActivateEndpoint+0x11e>
 800a15a:	0966      	lsrs	r6, r4, #5
 800a15c:	f014 0f1f 	tst.w	r4, #31
 800a160:	bf08      	it	eq
 800a162:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a166:	ea6f 64c6 	mvn.w	r4, r6, lsl #27
 800a16a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800a16e:	b2a4      	uxth	r4, r4
 800a170:	5354      	strh	r4, [r2, r5]
 800a172:	e7c3      	b.n	800a0fc <USB_ActivateEndpoint+0x11e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a174:	780c      	ldrb	r4, [r1, #0]
 800a176:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a17a:	b292      	uxth	r2, r2
 800a17c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a180:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a184:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800a188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a18c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a190:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a194:	b2ad      	uxth	r5, r5
 800a196:	780a      	ldrb	r2, [r1, #0]
 800a198:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a19c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1a0:	890c      	ldrh	r4, [r1, #8]
 800a1a2:	0864      	lsrs	r4, r4, #1
 800a1a4:	0064      	lsls	r4, r4, #1
 800a1a6:	5354      	strh	r4, [r2, r5]
 800a1a8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800a1ac:	b2ad      	uxth	r5, r5
 800a1ae:	780a      	ldrb	r2, [r1, #0]
 800a1b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a1b4:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800a1b8:	894c      	ldrh	r4, [r1, #10]
 800a1ba:	0864      	lsrs	r4, r4, #1
 800a1bc:	0064      	lsls	r4, r4, #1
 800a1be:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 800a1c0:	784a      	ldrb	r2, [r1, #1]
 800a1c2:	2a00      	cmp	r2, #0
 800a1c4:	d140      	bne.n	800a248 <USB_ActivateEndpoint+0x26a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1c6:	780c      	ldrb	r4, [r1, #0]
 800a1c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a1cc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a1d0:	d00c      	beq.n	800a1ec <USB_ActivateEndpoint+0x20e>
 800a1d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a1dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a1e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a1e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1ec:	780c      	ldrb	r4, [r1, #0]
 800a1ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a1f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a1f6:	d00c      	beq.n	800a212 <USB_ActivateEndpoint+0x234>
 800a1f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a1fc:	b292      	uxth	r2, r2
 800a1fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a202:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a20a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a20e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a212:	780d      	ldrb	r5, [r1, #0]
 800a214:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800a218:	b292      	uxth	r2, r2
 800a21a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a21e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a222:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800a226:	f248 0480 	movw	r4, #32896	; 0x8080
 800a22a:	4322      	orrs	r2, r4
 800a22c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a230:	7809      	ldrb	r1, [r1, #0]
 800a232:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a236:	b292      	uxth	r2, r2
 800a238:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a23c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a240:	4322      	orrs	r2, r4
 800a242:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800a246:	e727      	b.n	800a098 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a248:	780c      	ldrb	r4, [r1, #0]
 800a24a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a24e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a252:	d00c      	beq.n	800a26e <USB_ActivateEndpoint+0x290>
 800a254:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a258:	b292      	uxth	r2, r2
 800a25a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a25e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a262:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a26a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a26e:	780c      	ldrb	r4, [r1, #0]
 800a270:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a274:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a278:	d00c      	beq.n	800a294 <USB_ActivateEndpoint+0x2b6>
 800a27a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a27e:	b292      	uxth	r2, r2
 800a280:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a28c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a290:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800a294:	78ca      	ldrb	r2, [r1, #3]
 800a296:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a298:	780c      	ldrb	r4, [r1, #0]
 800a29a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a29e:	b292      	uxth	r2, r2
 800a2a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a2a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a8:	bf18      	it	ne
 800a2aa:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2ba:	7809      	ldrb	r1, [r1, #0]
 800a2bc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a2c0:	b292      	uxth	r2, r2
 800a2c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a2c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a2ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2d2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800a2d6:	e6df      	b.n	800a098 <USB_ActivateEndpoint+0xba>

0800a2d8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a2d8:	7b0b      	ldrb	r3, [r1, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d146      	bne.n	800a36c <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800a2de:	784b      	ldrb	r3, [r1, #1]
 800a2e0:	b313      	cbz	r3, 800a328 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2e2:	780a      	ldrb	r2, [r1, #0]
 800a2e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a2e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a2ec:	d00c      	beq.n	800a308 <USB_DeactivateEndpoint+0x30>
 800a2ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a304:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a308:	780a      	ldrb	r2, [r1, #0]
 800a30a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a320:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800a324:	2000      	movs	r0, #0
 800a326:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a328:	780a      	ldrb	r2, [r1, #0]
 800a32a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a32e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a332:	d00c      	beq.n	800a34e <USB_DeactivateEndpoint+0x76>
 800a334:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a34e:	780a      	ldrb	r2, [r1, #0]
 800a350:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a354:	b29b      	uxth	r3, r3
 800a356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800a36a:	e7db      	b.n	800a324 <USB_DeactivateEndpoint+0x4c>
{
 800a36c:	b410      	push	{r4}
    if (ep->is_in == 0U)
 800a36e:	784b      	ldrb	r3, [r1, #1]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d14e      	bne.n	800a412 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a374:	780a      	ldrb	r2, [r1, #0]
 800a376:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a37a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a37e:	d00c      	beq.n	800a39a <USB_DeactivateEndpoint+0xc2>
 800a380:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a396:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a39a:	780a      	ldrb	r2, [r1, #0]
 800a39c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a3a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3a4:	d00c      	beq.n	800a3c0 <USB_DeactivateEndpoint+0xe8>
 800a3a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800a3c0:	780a      	ldrb	r2, [r1, #0]
 800a3c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3dc:	780c      	ldrb	r4, [r1, #0]
 800a3de:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ec:	f248 0280 	movw	r2, #32896	; 0x8080
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3f6:	7809      	ldrb	r1, [r1, #0]
 800a3f8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a406:	4313      	orrs	r3, r2
 800a408:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 800a40c:	2000      	movs	r0, #0
 800a40e:	bc10      	pop	{r4}
 800a410:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a412:	780a      	ldrb	r2, [r1, #0]
 800a414:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a418:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a41c:	d00c      	beq.n	800a438 <USB_DeactivateEndpoint+0x160>
 800a41e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a422:	b29b      	uxth	r3, r3
 800a424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a42c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a434:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a438:	780a      	ldrb	r2, [r1, #0]
 800a43a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a43e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a442:	d00c      	beq.n	800a45e <USB_DeactivateEndpoint+0x186>
 800a444:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a44e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a45a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800a45e:	780a      	ldrb	r2, [r1, #0]
 800a460:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a464:	b29b      	uxth	r3, r3
 800a466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a46e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a476:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a47a:	780c      	ldrb	r4, [r1, #0]
 800a47c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800a480:	b29b      	uxth	r3, r3
 800a482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a48a:	f248 0280 	movw	r2, #32896	; 0x8080
 800a48e:	4313      	orrs	r3, r2
 800a490:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a494:	7809      	ldrb	r1, [r1, #0]
 800a496:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800a4aa:	e7af      	b.n	800a40c <USB_DeactivateEndpoint+0x134>

0800a4ac <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800a4ac:	784b      	ldrb	r3, [r1, #1]
 800a4ae:	b18b      	cbz	r3, 800a4d4 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a4b0:	780a      	ldrb	r2, [r1, #0]
 800a4b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c0:	f083 0310 	eor.w	r3, r3, #16
 800a4c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a4d4:	780a      	ldrb	r2, [r1, #0]
 800a4d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a4e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800a4f4:	e7ec      	b.n	800a4d0 <USB_EPSetStall+0x24>

0800a4f6 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a4f6:	7b0b      	ldrb	r3, [r1, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d14b      	bne.n	800a594 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800a4fc:	784b      	ldrb	r3, [r1, #1]
 800a4fe:	b333      	cbz	r3, 800a54e <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a500:	780a      	ldrb	r2, [r1, #0]
 800a502:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a506:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a50a:	d00c      	beq.n	800a526 <USB_EPClearStall+0x30>
 800a50c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a510:	b29b      	uxth	r3, r3
 800a512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a51e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a522:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800a526:	78cb      	ldrb	r3, [r1, #3]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d033      	beq.n	800a594 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a52c:	780a      	ldrb	r2, [r1, #0]
 800a52e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a532:	b29b      	uxth	r3, r3
 800a534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a53c:	f083 0320 	eor.w	r3, r3, #32
 800a540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a548:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800a54c:	e022      	b.n	800a594 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a54e:	780a      	ldrb	r2, [r1, #0]
 800a550:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a554:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a558:	d00c      	beq.n	800a574 <USB_EPClearStall+0x7e>
 800a55a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a570:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a574:	780a      	ldrb	r2, [r1, #0]
 800a576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a584:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800a594:	2000      	movs	r0, #0
 800a596:	4770      	bx	lr

0800a598 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800a598:	b911      	cbnz	r1, 800a5a0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	4770      	bx	lr

0800a5ac <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a5ac:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800a5b0:	b280      	uxth	r0, r0
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	4770      	bx	lr

0800a5b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5b8:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a5ba:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5bc:	eb00 0442 	add.w	r4, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	d010      	beq.n	800a5e6 <USB_WritePMA+0x2e>
 800a5c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	3102      	adds	r1, #2
 800a5cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a5d0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 800a5d4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 800a5d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a5dc:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800a5e0:	3102      	adds	r1, #2
 800a5e2:	4294      	cmp	r4, r2
 800a5e4:	d1f4      	bne.n	800a5d0 <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800a5e6:	bc10      	pop	{r4}
 800a5e8:	4770      	bx	lr

0800a5ea <USB_EPStartXfer>:
{
 800a5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800a5f0:	784b      	ldrb	r3, [r1, #1]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d035      	beq.n	800a662 <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 800a5f6:	7b0a      	ldrb	r2, [r1, #12]
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	f040 82fe 	bne.w	800abfa <USB_EPStartXfer+0x610>
      if (ep->xfer_len > ep->maxpacket)
 800a5fe:	6989      	ldr	r1, [r1, #24]
 800a600:	6923      	ldr	r3, [r4, #16]
 800a602:	4299      	cmp	r1, r3
        ep->xfer_len -= len;
 800a604:	bf86      	itte	hi
 800a606:	1aca      	subhi	r2, r1, r3
        len = ep->maxpacket;
 800a608:	4619      	movhi	r1, r3
        ep->xfer_len = 0U;
 800a60a:	2200      	movls	r2, #0
 800a60c:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a60e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a612:	b29b      	uxth	r3, r3
 800a614:	7822      	ldrb	r2, [r4, #0]
 800a616:	0112      	lsls	r2, r2, #4
 800a618:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a61c:	4403      	add	r3, r0
 800a61e:	2900      	cmp	r1, #0
 800a620:	f040 82d3 	bne.w	800abca <USB_EPStartXfer+0x5e0>
 800a624:	5ad1      	ldrh	r1, [r2, r3]
 800a626:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800a62a:	0409      	lsls	r1, r1, #16
 800a62c:	0c09      	lsrs	r1, r1, #16
 800a62e:	52d1      	strh	r1, [r2, r3]
 800a630:	5ad1      	ldrh	r1, [r2, r3]
 800a632:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a636:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a63a:	b289      	uxth	r1, r1
 800a63c:	52d1      	strh	r1, [r2, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a63e:	7822      	ldrb	r2, [r4, #0]
 800a640:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a644:	b29b      	uxth	r3, r3
 800a646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a64e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a65a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800a65e:	2000      	movs	r0, #0
}
 800a660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 800a662:	690a      	ldr	r2, [r1, #16]
 800a664:	698e      	ldr	r6, [r1, #24]
 800a666:	4296      	cmp	r6, r2
 800a668:	bf28      	it	cs
 800a66a:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 800a66c:	7b0b      	ldrb	r3, [r1, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d036      	beq.n	800a6e0 <USB_EPStartXfer+0xf6>
      if (ep->type == EP_TYPE_BULK)
 800a672:	78cb      	ldrb	r3, [r1, #3]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d054      	beq.n	800a722 <USB_EPStartXfer+0x138>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800a678:	780a      	ldrb	r2, [r1, #0]
 800a67a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a690:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 800a694:	6a0b      	ldr	r3, [r1, #32]
 800a696:	1b9b      	subs	r3, r3, r6
 800a698:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a69a:	780b      	ldrb	r3, [r1, #0]
 800a69c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a6a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a6a4:	f000 820b 	beq.w	800aabe <USB_EPStartXfer+0x4d4>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6a8:	784a      	ldrb	r2, [r1, #1]
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	f040 81b1 	bne.w	800aa12 <USB_EPStartXfer+0x428>
 800a6b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a6b4:	b292      	uxth	r2, r2
 800a6b6:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 800a6ba:	440a      	add	r2, r1
 800a6bc:	011b      	lsls	r3, r3, #4
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	f040 818f 	bne.w	800a9e2 <USB_EPStartXfer+0x3f8>
 800a6c4:	5ad1      	ldrh	r1, [r2, r3]
 800a6c6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800a6ca:	0409      	lsls	r1, r1, #16
 800a6cc:	0c09      	lsrs	r1, r1, #16
 800a6ce:	52d1      	strh	r1, [r2, r3]
 800a6d0:	5ad1      	ldrh	r1, [r2, r3]
 800a6d2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a6d6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a6da:	b289      	uxth	r1, r1
 800a6dc:	52d1      	strh	r1, [r2, r3]
 800a6de:	e19a      	b.n	800aa16 <USB_EPStartXfer+0x42c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a6e0:	b2b6      	uxth	r6, r6
 800a6e2:	4633      	mov	r3, r6
 800a6e4:	88ca      	ldrh	r2, [r1, #6]
 800a6e6:	6949      	ldr	r1, [r1, #20]
 800a6e8:	f7ff ff66 	bl	800a5b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a6ec:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800a6f0:	b299      	uxth	r1, r3
 800a6f2:	7822      	ldrb	r2, [r4, #0]
 800a6f4:	0112      	lsls	r2, r2, #4
 800a6f6:	f205 4304 	addw	r3, r5, #1028	; 0x404
 800a6fa:	440b      	add	r3, r1
 800a6fc:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6fe:	7822      	ldrb	r2, [r4, #0]
 800a700:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800a704:	b29b      	uxth	r3, r3
 800a706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a70e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a71a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800a71e:	2000      	movs	r0, #0
 800a720:	e79e      	b.n	800a660 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 800a722:	6a0b      	ldr	r3, [r1, #32]
 800a724:	429a      	cmp	r2, r3
 800a726:	f080 813e 	bcs.w	800a9a6 <USB_EPStartXfer+0x3bc>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a72a:	780a      	ldrb	r2, [r1, #0]
 800a72c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a730:	b29b      	uxth	r3, r3
 800a732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a73e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a742:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800a746:	6a0b      	ldr	r3, [r1, #32]
 800a748:	1b9b      	subs	r3, r3, r6
 800a74a:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a74c:	780b      	ldrb	r3, [r1, #0]
 800a74e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a752:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a756:	f000 8093 	beq.w	800a880 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a75a:	784a      	ldrb	r2, [r1, #1]
 800a75c:	bb6a      	cbnz	r2, 800a7ba <USB_EPStartXfer+0x1d0>
 800a75e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a762:	b292      	uxth	r2, r2
 800a764:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 800a768:	4411      	add	r1, r2
 800a76a:	011b      	lsls	r3, r3, #4
 800a76c:	b96e      	cbnz	r6, 800a78a <USB_EPStartXfer+0x1a0>
 800a76e:	5aca      	ldrh	r2, [r1, r3]
 800a770:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a774:	0412      	lsls	r2, r2, #16
 800a776:	0c12      	lsrs	r2, r2, #16
 800a778:	52ca      	strh	r2, [r1, r3]
 800a77a:	5aca      	ldrh	r2, [r1, r3]
 800a77c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a780:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a784:	b292      	uxth	r2, r2
 800a786:	52ca      	strh	r2, [r1, r3]
 800a788:	e019      	b.n	800a7be <USB_EPStartXfer+0x1d4>
 800a78a:	2e3e      	cmp	r6, #62	; 0x3e
 800a78c:	d808      	bhi.n	800a7a0 <USB_EPStartXfer+0x1b6>
 800a78e:	0872      	lsrs	r2, r6, #1
 800a790:	f016 0f01 	tst.w	r6, #1
 800a794:	bf18      	it	ne
 800a796:	3201      	addne	r2, #1
 800a798:	0292      	lsls	r2, r2, #10
 800a79a:	b292      	uxth	r2, r2
 800a79c:	52ca      	strh	r2, [r1, r3]
 800a79e:	e00e      	b.n	800a7be <USB_EPStartXfer+0x1d4>
 800a7a0:	0972      	lsrs	r2, r6, #5
 800a7a2:	f016 0f1f 	tst.w	r6, #31
 800a7a6:	bf08      	it	eq
 800a7a8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a7ac:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800a7b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a7b4:	b292      	uxth	r2, r2
 800a7b6:	52ca      	strh	r2, [r1, r3]
 800a7b8:	e001      	b.n	800a7be <USB_EPStartXfer+0x1d4>
 800a7ba:	2a01      	cmp	r2, #1
 800a7bc:	d02a      	beq.n	800a814 <USB_EPStartXfer+0x22a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7be:	b2b3      	uxth	r3, r6
 800a7c0:	8962      	ldrh	r2, [r4, #10]
 800a7c2:	6961      	ldr	r1, [r4, #20]
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f7ff fef7 	bl	800a5b8 <USB_WritePMA>
            ep->xfer_buff += len;
 800a7ca:	6963      	ldr	r3, [r4, #20]
 800a7cc:	4433      	add	r3, r6
 800a7ce:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800a7d0:	6a23      	ldr	r3, [r4, #32]
 800a7d2:	6922      	ldr	r2, [r4, #16]
 800a7d4:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 800a7d6:	bf86      	itte	hi
 800a7d8:	1b9a      	subhi	r2, r3, r6
 800a7da:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800a7dc:	2200      	movls	r2, #0
 800a7de:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7e0:	7862      	ldrb	r2, [r4, #1]
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d138      	bne.n	800a858 <USB_EPStartXfer+0x26e>
 800a7e6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	7820      	ldrb	r0, [r4, #0]
 800a7ee:	0100      	lsls	r0, r0, #4
 800a7f0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800a7f4:	440a      	add	r2, r1
 800a7f6:	b9bb      	cbnz	r3, 800a828 <USB_EPStartXfer+0x23e>
 800a7f8:	5a81      	ldrh	r1, [r0, r2]
 800a7fa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800a7fe:	0409      	lsls	r1, r1, #16
 800a800:	0c09      	lsrs	r1, r1, #16
 800a802:	5281      	strh	r1, [r0, r2]
 800a804:	5a81      	ldrh	r1, [r0, r2]
 800a806:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a80a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a80e:	b289      	uxth	r1, r1
 800a810:	5281      	strh	r1, [r0, r2]
 800a812:	e023      	b.n	800a85c <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a814:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a818:	b291      	uxth	r1, r2
 800a81a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800a81e:	440a      	add	r2, r1
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	b2b1      	uxth	r1, r6
 800a824:	52d1      	strh	r1, [r2, r3]
 800a826:	e7ca      	b.n	800a7be <USB_EPStartXfer+0x1d4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a828:	2b3e      	cmp	r3, #62	; 0x3e
 800a82a:	d808      	bhi.n	800a83e <USB_EPStartXfer+0x254>
 800a82c:	0859      	lsrs	r1, r3, #1
 800a82e:	f013 0f01 	tst.w	r3, #1
 800a832:	bf18      	it	ne
 800a834:	3101      	addne	r1, #1
 800a836:	0289      	lsls	r1, r1, #10
 800a838:	b289      	uxth	r1, r1
 800a83a:	5281      	strh	r1, [r0, r2]
 800a83c:	e00e      	b.n	800a85c <USB_EPStartXfer+0x272>
 800a83e:	0959      	lsrs	r1, r3, #5
 800a840:	f013 0f1f 	tst.w	r3, #31
 800a844:	bf08      	it	eq
 800a846:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800a84a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800a84e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a852:	b289      	uxth	r1, r1
 800a854:	5281      	strh	r1, [r0, r2]
 800a856:	e001      	b.n	800a85c <USB_EPStartXfer+0x272>
 800a858:	2a01      	cmp	r2, #1
 800a85a:	d006      	beq.n	800a86a <USB_EPStartXfer+0x280>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	8922      	ldrh	r2, [r4, #8]
 800a860:	6961      	ldr	r1, [r4, #20]
 800a862:	4628      	mov	r0, r5
 800a864:	f7ff fea8 	bl	800a5b8 <USB_WritePMA>
 800a868:	e749      	b.n	800a6fe <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a86a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a86e:	b290      	uxth	r0, r2
 800a870:	7821      	ldrb	r1, [r4, #0]
 800a872:	0109      	lsls	r1, r1, #4
 800a874:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800a878:	4402      	add	r2, r0
 800a87a:	b298      	uxth	r0, r3
 800a87c:	5288      	strh	r0, [r1, r2]
 800a87e:	e7ed      	b.n	800a85c <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a880:	784a      	ldrb	r2, [r1, #1]
 800a882:	bb6a      	cbnz	r2, 800a8e0 <USB_EPStartXfer+0x2f6>
 800a884:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a888:	b292      	uxth	r2, r2
 800a88a:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800a88e:	4411      	add	r1, r2
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	b96e      	cbnz	r6, 800a8b0 <USB_EPStartXfer+0x2c6>
 800a894:	5aca      	ldrh	r2, [r1, r3]
 800a896:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a89a:	0412      	lsls	r2, r2, #16
 800a89c:	0c12      	lsrs	r2, r2, #16
 800a89e:	52ca      	strh	r2, [r1, r3]
 800a8a0:	5aca      	ldrh	r2, [r1, r3]
 800a8a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a8a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a8aa:	b292      	uxth	r2, r2
 800a8ac:	52ca      	strh	r2, [r1, r3]
 800a8ae:	e019      	b.n	800a8e4 <USB_EPStartXfer+0x2fa>
 800a8b0:	2e3e      	cmp	r6, #62	; 0x3e
 800a8b2:	d808      	bhi.n	800a8c6 <USB_EPStartXfer+0x2dc>
 800a8b4:	0872      	lsrs	r2, r6, #1
 800a8b6:	f016 0f01 	tst.w	r6, #1
 800a8ba:	bf18      	it	ne
 800a8bc:	3201      	addne	r2, #1
 800a8be:	0292      	lsls	r2, r2, #10
 800a8c0:	b292      	uxth	r2, r2
 800a8c2:	52ca      	strh	r2, [r1, r3]
 800a8c4:	e00e      	b.n	800a8e4 <USB_EPStartXfer+0x2fa>
 800a8c6:	0972      	lsrs	r2, r6, #5
 800a8c8:	f016 0f1f 	tst.w	r6, #31
 800a8cc:	bf08      	it	eq
 800a8ce:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a8d2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800a8d6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a8da:	b292      	uxth	r2, r2
 800a8dc:	52ca      	strh	r2, [r1, r3]
 800a8de:	e001      	b.n	800a8e4 <USB_EPStartXfer+0x2fa>
 800a8e0:	2a01      	cmp	r2, #1
 800a8e2:	d02a      	beq.n	800a93a <USB_EPStartXfer+0x350>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8e4:	b2b3      	uxth	r3, r6
 800a8e6:	8922      	ldrh	r2, [r4, #8]
 800a8e8:	6961      	ldr	r1, [r4, #20]
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f7ff fe64 	bl	800a5b8 <USB_WritePMA>
            ep->xfer_buff += len;
 800a8f0:	6963      	ldr	r3, [r4, #20]
 800a8f2:	4433      	add	r3, r6
 800a8f4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800a8f6:	6a23      	ldr	r3, [r4, #32]
 800a8f8:	6922      	ldr	r2, [r4, #16]
 800a8fa:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 800a8fc:	bf86      	itte	hi
 800a8fe:	1b9a      	subhi	r2, r3, r6
 800a900:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800a902:	2200      	movls	r2, #0
 800a904:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a906:	7862      	ldrb	r2, [r4, #1]
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d138      	bne.n	800a97e <USB_EPStartXfer+0x394>
 800a90c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a910:	b292      	uxth	r2, r2
 800a912:	7820      	ldrb	r0, [r4, #0]
 800a914:	0100      	lsls	r0, r0, #4
 800a916:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800a91a:	440a      	add	r2, r1
 800a91c:	b9bb      	cbnz	r3, 800a94e <USB_EPStartXfer+0x364>
 800a91e:	5a81      	ldrh	r1, [r0, r2]
 800a920:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800a924:	0409      	lsls	r1, r1, #16
 800a926:	0c09      	lsrs	r1, r1, #16
 800a928:	5281      	strh	r1, [r0, r2]
 800a92a:	5a81      	ldrh	r1, [r0, r2]
 800a92c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a930:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a934:	b289      	uxth	r1, r1
 800a936:	5281      	strh	r1, [r0, r2]
 800a938:	e023      	b.n	800a982 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a93a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a93e:	b291      	uxth	r1, r2
 800a940:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a944:	440a      	add	r2, r1
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	b2b1      	uxth	r1, r6
 800a94a:	52d1      	strh	r1, [r2, r3]
 800a94c:	e7ca      	b.n	800a8e4 <USB_EPStartXfer+0x2fa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a94e:	2b3e      	cmp	r3, #62	; 0x3e
 800a950:	d808      	bhi.n	800a964 <USB_EPStartXfer+0x37a>
 800a952:	0859      	lsrs	r1, r3, #1
 800a954:	f013 0f01 	tst.w	r3, #1
 800a958:	bf18      	it	ne
 800a95a:	3101      	addne	r1, #1
 800a95c:	0289      	lsls	r1, r1, #10
 800a95e:	b289      	uxth	r1, r1
 800a960:	5281      	strh	r1, [r0, r2]
 800a962:	e00e      	b.n	800a982 <USB_EPStartXfer+0x398>
 800a964:	0959      	lsrs	r1, r3, #5
 800a966:	f013 0f1f 	tst.w	r3, #31
 800a96a:	bf08      	it	eq
 800a96c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800a970:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800a974:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a978:	b289      	uxth	r1, r1
 800a97a:	5281      	strh	r1, [r0, r2]
 800a97c:	e001      	b.n	800a982 <USB_EPStartXfer+0x398>
 800a97e:	2a01      	cmp	r2, #1
 800a980:	d006      	beq.n	800a990 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a982:	b29b      	uxth	r3, r3
 800a984:	8962      	ldrh	r2, [r4, #10]
 800a986:	6961      	ldr	r1, [r4, #20]
 800a988:	4628      	mov	r0, r5
 800a98a:	f7ff fe15 	bl	800a5b8 <USB_WritePMA>
 800a98e:	e6b6      	b.n	800a6fe <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a990:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800a994:	b290      	uxth	r0, r2
 800a996:	7821      	ldrb	r1, [r4, #0]
 800a998:	0109      	lsls	r1, r1, #4
 800a99a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800a99e:	4402      	add	r2, r0
 800a9a0:	b298      	uxth	r0, r3
 800a9a2:	5288      	strh	r0, [r1, r2]
 800a9a4:	e7ed      	b.n	800a982 <USB_EPStartXfer+0x398>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a9a6:	7809      	ldrb	r1, [r1, #0]
 800a9a8:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800a9ac:	b292      	uxth	r2, r2
 800a9ae:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800a9b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a9b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9be:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a9c2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a9c6:	b290      	uxth	r0, r2
 800a9c8:	7821      	ldrb	r1, [r4, #0]
 800a9ca:	0109      	lsls	r1, r1, #4
 800a9cc:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800a9d0:	4402      	add	r2, r0
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9d6:	8922      	ldrh	r2, [r4, #8]
 800a9d8:	6961      	ldr	r1, [r4, #20]
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f7ff fdec 	bl	800a5b8 <USB_WritePMA>
 800a9e0:	e68d      	b.n	800a6fe <USB_EPStartXfer+0x114>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9e2:	2e3e      	cmp	r6, #62	; 0x3e
 800a9e4:	d808      	bhi.n	800a9f8 <USB_EPStartXfer+0x40e>
 800a9e6:	0871      	lsrs	r1, r6, #1
 800a9e8:	f016 0f01 	tst.w	r6, #1
 800a9ec:	bf18      	it	ne
 800a9ee:	3101      	addne	r1, #1
 800a9f0:	0289      	lsls	r1, r1, #10
 800a9f2:	b289      	uxth	r1, r1
 800a9f4:	52d1      	strh	r1, [r2, r3]
 800a9f6:	e00e      	b.n	800aa16 <USB_EPStartXfer+0x42c>
 800a9f8:	0971      	lsrs	r1, r6, #5
 800a9fa:	f016 0f1f 	tst.w	r6, #31
 800a9fe:	bf08      	it	eq
 800aa00:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800aa04:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800aa08:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800aa0c:	b289      	uxth	r1, r1
 800aa0e:	52d1      	strh	r1, [r2, r3]
 800aa10:	e001      	b.n	800aa16 <USB_EPStartXfer+0x42c>
 800aa12:	2a01      	cmp	r2, #1
 800aa14:	d028      	beq.n	800aa68 <USB_EPStartXfer+0x47e>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa16:	b2b3      	uxth	r3, r6
 800aa18:	8962      	ldrh	r2, [r4, #10]
 800aa1a:	6961      	ldr	r1, [r4, #20]
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff fdcb 	bl	800a5b8 <USB_WritePMA>
          ep->xfer_buff += len;
 800aa22:	6963      	ldr	r3, [r4, #20]
 800aa24:	4433      	add	r3, r6
 800aa26:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800aa28:	6a23      	ldr	r3, [r4, #32]
 800aa2a:	6922      	ldr	r2, [r4, #16]
 800aa2c:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 800aa2e:	bf86      	itte	hi
 800aa30:	1b9a      	subhi	r2, r3, r6
 800aa32:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 800aa34:	2200      	movls	r2, #0
 800aa36:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f43f ae60 	beq.w	800a6fe <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa3e:	7862      	ldrb	r2, [r4, #1]
 800aa40:	bb4a      	cbnz	r2, 800aa96 <USB_EPStartXfer+0x4ac>
 800aa42:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800aa46:	b28a      	uxth	r2, r1
 800aa48:	7820      	ldrb	r0, [r4, #0]
 800aa4a:	0100      	lsls	r0, r0, #4
 800aa4c:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800aa50:	4411      	add	r1, r2
 800aa52:	2b3e      	cmp	r3, #62	; 0x3e
 800aa54:	d812      	bhi.n	800aa7c <USB_EPStartXfer+0x492>
 800aa56:	085a      	lsrs	r2, r3, #1
 800aa58:	f013 0f01 	tst.w	r3, #1
 800aa5c:	bf18      	it	ne
 800aa5e:	3201      	addne	r2, #1
 800aa60:	0292      	lsls	r2, r2, #10
 800aa62:	b292      	uxth	r2, r2
 800aa64:	5242      	strh	r2, [r0, r1]
 800aa66:	e018      	b.n	800aa9a <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa68:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800aa6c:	b291      	uxth	r1, r2
 800aa6e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800aa72:	440a      	add	r2, r1
 800aa74:	011b      	lsls	r3, r3, #4
 800aa76:	b2b1      	uxth	r1, r6
 800aa78:	52d1      	strh	r1, [r2, r3]
 800aa7a:	e7cc      	b.n	800aa16 <USB_EPStartXfer+0x42c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa7c:	095a      	lsrs	r2, r3, #5
 800aa7e:	f013 0f1f 	tst.w	r3, #31
 800aa82:	bf08      	it	eq
 800aa84:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800aa88:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800aa8c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800aa90:	b292      	uxth	r2, r2
 800aa92:	5242      	strh	r2, [r0, r1]
 800aa94:	e001      	b.n	800aa9a <USB_EPStartXfer+0x4b0>
 800aa96:	2a01      	cmp	r2, #1
 800aa98:	d006      	beq.n	800aaa8 <USB_EPStartXfer+0x4be>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	8922      	ldrh	r2, [r4, #8]
 800aa9e:	6961      	ldr	r1, [r4, #20]
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7ff fd89 	bl	800a5b8 <USB_WritePMA>
 800aaa6:	e62a      	b.n	800a6fe <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aaa8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800aaac:	b290      	uxth	r0, r2
 800aaae:	7821      	ldrb	r1, [r4, #0]
 800aab0:	0109      	lsls	r1, r1, #4
 800aab2:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800aab6:	4402      	add	r2, r0
 800aab8:	b298      	uxth	r0, r3
 800aaba:	5288      	strh	r0, [r1, r2]
 800aabc:	e7ed      	b.n	800aa9a <USB_EPStartXfer+0x4b0>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aabe:	784a      	ldrb	r2, [r1, #1]
 800aac0:	bb6a      	cbnz	r2, 800ab1e <USB_EPStartXfer+0x534>
 800aac2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800aac6:	b292      	uxth	r2, r2
 800aac8:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800aacc:	440a      	add	r2, r1
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	b96e      	cbnz	r6, 800aaee <USB_EPStartXfer+0x504>
 800aad2:	5ad1      	ldrh	r1, [r2, r3]
 800aad4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800aad8:	0409      	lsls	r1, r1, #16
 800aada:	0c09      	lsrs	r1, r1, #16
 800aadc:	52d1      	strh	r1, [r2, r3]
 800aade:	5ad1      	ldrh	r1, [r2, r3]
 800aae0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800aae4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800aae8:	b289      	uxth	r1, r1
 800aaea:	52d1      	strh	r1, [r2, r3]
 800aaec:	e019      	b.n	800ab22 <USB_EPStartXfer+0x538>
 800aaee:	2e3e      	cmp	r6, #62	; 0x3e
 800aaf0:	d808      	bhi.n	800ab04 <USB_EPStartXfer+0x51a>
 800aaf2:	0871      	lsrs	r1, r6, #1
 800aaf4:	f016 0f01 	tst.w	r6, #1
 800aaf8:	bf18      	it	ne
 800aafa:	3101      	addne	r1, #1
 800aafc:	0289      	lsls	r1, r1, #10
 800aafe:	b289      	uxth	r1, r1
 800ab00:	52d1      	strh	r1, [r2, r3]
 800ab02:	e00e      	b.n	800ab22 <USB_EPStartXfer+0x538>
 800ab04:	0971      	lsrs	r1, r6, #5
 800ab06:	f016 0f1f 	tst.w	r6, #31
 800ab0a:	bf08      	it	eq
 800ab0c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800ab10:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800ab14:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800ab18:	b289      	uxth	r1, r1
 800ab1a:	52d1      	strh	r1, [r2, r3]
 800ab1c:	e001      	b.n	800ab22 <USB_EPStartXfer+0x538>
 800ab1e:	2a01      	cmp	r2, #1
 800ab20:	d028      	beq.n	800ab74 <USB_EPStartXfer+0x58a>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab22:	b2b3      	uxth	r3, r6
 800ab24:	8922      	ldrh	r2, [r4, #8]
 800ab26:	6961      	ldr	r1, [r4, #20]
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f7ff fd45 	bl	800a5b8 <USB_WritePMA>
          ep->xfer_buff += len;
 800ab2e:	6963      	ldr	r3, [r4, #20]
 800ab30:	4433      	add	r3, r6
 800ab32:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800ab34:	6a23      	ldr	r3, [r4, #32]
 800ab36:	6922      	ldr	r2, [r4, #16]
 800ab38:	4293      	cmp	r3, r2
            ep->xfer_len_db -= len;
 800ab3a:	bf86      	itte	hi
 800ab3c:	1b9a      	subhi	r2, r3, r6
 800ab3e:	4633      	movhi	r3, r6
            ep->xfer_len_db = 0U;
 800ab40:	2200      	movls	r2, #0
 800ab42:	6222      	str	r2, [r4, #32]
          if (len > 0U)
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f43f adda 	beq.w	800a6fe <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab4a:	7862      	ldrb	r2, [r4, #1]
 800ab4c:	bb4a      	cbnz	r2, 800aba2 <USB_EPStartXfer+0x5b8>
 800ab4e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800ab52:	b28a      	uxth	r2, r1
 800ab54:	7820      	ldrb	r0, [r4, #0]
 800ab56:	0100      	lsls	r0, r0, #4
 800ab58:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800ab5c:	4411      	add	r1, r2
 800ab5e:	2b3e      	cmp	r3, #62	; 0x3e
 800ab60:	d812      	bhi.n	800ab88 <USB_EPStartXfer+0x59e>
 800ab62:	085a      	lsrs	r2, r3, #1
 800ab64:	f013 0f01 	tst.w	r3, #1
 800ab68:	bf18      	it	ne
 800ab6a:	3201      	addne	r2, #1
 800ab6c:	0292      	lsls	r2, r2, #10
 800ab6e:	b292      	uxth	r2, r2
 800ab70:	5242      	strh	r2, [r0, r1]
 800ab72:	e018      	b.n	800aba6 <USB_EPStartXfer+0x5bc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab74:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800ab78:	b291      	uxth	r1, r2
 800ab7a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800ab7e:	440a      	add	r2, r1
 800ab80:	011b      	lsls	r3, r3, #4
 800ab82:	b2b1      	uxth	r1, r6
 800ab84:	52d1      	strh	r1, [r2, r3]
 800ab86:	e7cc      	b.n	800ab22 <USB_EPStartXfer+0x538>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab88:	095a      	lsrs	r2, r3, #5
 800ab8a:	f013 0f1f 	tst.w	r3, #31
 800ab8e:	bf08      	it	eq
 800ab90:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800ab94:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800ab98:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800ab9c:	b292      	uxth	r2, r2
 800ab9e:	5242      	strh	r2, [r0, r1]
 800aba0:	e001      	b.n	800aba6 <USB_EPStartXfer+0x5bc>
 800aba2:	2a01      	cmp	r2, #1
 800aba4:	d006      	beq.n	800abb4 <USB_EPStartXfer+0x5ca>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	8962      	ldrh	r2, [r4, #10]
 800abaa:	6961      	ldr	r1, [r4, #20]
 800abac:	4628      	mov	r0, r5
 800abae:	f7ff fd03 	bl	800a5b8 <USB_WritePMA>
 800abb2:	e5a4      	b.n	800a6fe <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abb4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800abb8:	b290      	uxth	r0, r2
 800abba:	7821      	ldrb	r1, [r4, #0]
 800abbc:	0109      	lsls	r1, r1, #4
 800abbe:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800abc2:	4402      	add	r2, r0
 800abc4:	b298      	uxth	r0, r3
 800abc6:	5288      	strh	r0, [r1, r2]
 800abc8:	e7ed      	b.n	800aba6 <USB_EPStartXfer+0x5bc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800abca:	293e      	cmp	r1, #62	; 0x3e
 800abcc:	d808      	bhi.n	800abe0 <USB_EPStartXfer+0x5f6>
 800abce:	0848      	lsrs	r0, r1, #1
 800abd0:	f011 0f01 	tst.w	r1, #1
 800abd4:	bf18      	it	ne
 800abd6:	3001      	addne	r0, #1
 800abd8:	0280      	lsls	r0, r0, #10
 800abda:	b280      	uxth	r0, r0
 800abdc:	52d0      	strh	r0, [r2, r3]
 800abde:	e52e      	b.n	800a63e <USB_EPStartXfer+0x54>
 800abe0:	0948      	lsrs	r0, r1, #5
 800abe2:	f011 0f1f 	tst.w	r1, #31
 800abe6:	bf08      	it	eq
 800abe8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800abec:	ea6f 60c0 	mvn.w	r0, r0, lsl #27
 800abf0:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800abf4:	b280      	uxth	r0, r0
 800abf6:	52d0      	strh	r0, [r2, r3]
 800abf8:	e521      	b.n	800a63e <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 800abfa:	78ca      	ldrb	r2, [r1, #3]
 800abfc:	2a02      	cmp	r2, #2
 800abfe:	d03f      	beq.n	800ac80 <USB_EPStartXfer+0x696>
      else if (ep->type == EP_TYPE_ISOC)
 800ac00:	2a01      	cmp	r2, #1
 800ac02:	f040 8118 	bne.w	800ae36 <USB_EPStartXfer+0x84c>
        if (ep->xfer_len > ep->maxpacket)
 800ac06:	698a      	ldr	r2, [r1, #24]
 800ac08:	6909      	ldr	r1, [r1, #16]
 800ac0a:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 800ac0c:	bf86      	itte	hi
 800ac0e:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 800ac10:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 800ac12:	2000      	movls	r0, #0
 800ac14:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f47f ad11 	bne.w	800a63e <USB_EPStartXfer+0x54>
 800ac1c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	7826      	ldrb	r6, [r4, #0]
 800ac24:	0136      	lsls	r6, r6, #4
 800ac26:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800ac2a:	4418      	add	r0, r3
 800ac2c:	2a00      	cmp	r2, #0
 800ac2e:	f040 80b7 	bne.w	800ada0 <USB_EPStartXfer+0x7b6>
 800ac32:	5a33      	ldrh	r3, [r6, r0]
 800ac34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac38:	041b      	lsls	r3, r3, #16
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	5233      	strh	r3, [r6, r0]
 800ac3e:	5a33      	ldrh	r3, [r6, r0]
 800ac40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	5233      	strh	r3, [r6, r0]
 800ac4c:	7863      	ldrb	r3, [r4, #1]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f040 80e3 	bne.w	800ae1a <USB_EPStartXfer+0x830>
 800ac54:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800ac58:	b293      	uxth	r3, r2
 800ac5a:	7821      	ldrb	r1, [r4, #0]
 800ac5c:	0109      	lsls	r1, r1, #4
 800ac5e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800ac62:	441a      	add	r2, r3
 800ac64:	5a8b      	ldrh	r3, [r1, r2]
 800ac66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac6a:	041b      	lsls	r3, r3, #16
 800ac6c:	0c1b      	lsrs	r3, r3, #16
 800ac6e:	528b      	strh	r3, [r1, r2]
 800ac70:	5a8b      	ldrh	r3, [r1, r2]
 800ac72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	528b      	strh	r3, [r1, r2]
 800ac7e:	e4de      	b.n	800a63e <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d132      	bne.n	800acea <USB_EPStartXfer+0x700>
 800ac84:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	780a      	ldrb	r2, [r1, #0]
 800ac8c:	0112      	lsls	r2, r2, #4
 800ac8e:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800ac92:	440b      	add	r3, r1
 800ac94:	6921      	ldr	r1, [r4, #16]
 800ac96:	2900      	cmp	r1, #0
 800ac98:	d145      	bne.n	800ad26 <USB_EPStartXfer+0x73c>
 800ac9a:	5ad1      	ldrh	r1, [r2, r3]
 800ac9c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800aca0:	0409      	lsls	r1, r1, #16
 800aca2:	0c09      	lsrs	r1, r1, #16
 800aca4:	52d1      	strh	r1, [r2, r3]
 800aca6:	5ad1      	ldrh	r1, [r2, r3]
 800aca8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800acac:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800acb0:	b289      	uxth	r1, r1
 800acb2:	52d1      	strh	r1, [r2, r3]
 800acb4:	7863      	ldrb	r3, [r4, #1]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d165      	bne.n	800ad86 <USB_EPStartXfer+0x79c>
 800acba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	7822      	ldrb	r2, [r4, #0]
 800acc2:	0112      	lsls	r2, r2, #4
 800acc4:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800acc8:	440b      	add	r3, r1
 800acca:	6921      	ldr	r1, [r4, #16]
 800accc:	2900      	cmp	r1, #0
 800acce:	d142      	bne.n	800ad56 <USB_EPStartXfer+0x76c>
 800acd0:	5ad1      	ldrh	r1, [r2, r3]
 800acd2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800acd6:	0409      	lsls	r1, r1, #16
 800acd8:	0c09      	lsrs	r1, r1, #16
 800acda:	52d1      	strh	r1, [r2, r3]
 800acdc:	5ad1      	ldrh	r1, [r2, r3]
 800acde:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800ace2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800ace6:	b289      	uxth	r1, r1
 800ace8:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 800acea:	69e3      	ldr	r3, [r4, #28]
 800acec:	2b00      	cmp	r3, #0
 800acee:	f43f aca6 	beq.w	800a63e <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800acf2:	7822      	ldrb	r2, [r4, #0]
 800acf4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800acf8:	f244 0340 	movw	r3, #16448	; 0x4040
 800acfc:	ea03 0001 	and.w	r0, r3, r1
 800ad00:	438b      	bics	r3, r1
 800ad02:	d002      	beq.n	800ad0a <USB_EPStartXfer+0x720>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	f47f ac9a 	bne.w	800a63e <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ad0a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad20:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800ad24:	e48b      	b.n	800a63e <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ad26:	293e      	cmp	r1, #62	; 0x3e
 800ad28:	d808      	bhi.n	800ad3c <USB_EPStartXfer+0x752>
 800ad2a:	0848      	lsrs	r0, r1, #1
 800ad2c:	f011 0f01 	tst.w	r1, #1
 800ad30:	bf18      	it	ne
 800ad32:	3001      	addne	r0, #1
 800ad34:	0281      	lsls	r1, r0, #10
 800ad36:	b289      	uxth	r1, r1
 800ad38:	52d1      	strh	r1, [r2, r3]
 800ad3a:	e7bb      	b.n	800acb4 <USB_EPStartXfer+0x6ca>
 800ad3c:	0948      	lsrs	r0, r1, #5
 800ad3e:	f011 0f1f 	tst.w	r1, #31
 800ad42:	bf08      	it	eq
 800ad44:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800ad48:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 800ad4c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800ad50:	b289      	uxth	r1, r1
 800ad52:	52d1      	strh	r1, [r2, r3]
 800ad54:	e7ae      	b.n	800acb4 <USB_EPStartXfer+0x6ca>
 800ad56:	293e      	cmp	r1, #62	; 0x3e
 800ad58:	d808      	bhi.n	800ad6c <USB_EPStartXfer+0x782>
 800ad5a:	0848      	lsrs	r0, r1, #1
 800ad5c:	f011 0f01 	tst.w	r1, #1
 800ad60:	bf18      	it	ne
 800ad62:	3001      	addne	r0, #1
 800ad64:	0281      	lsls	r1, r0, #10
 800ad66:	b289      	uxth	r1, r1
 800ad68:	52d1      	strh	r1, [r2, r3]
 800ad6a:	e7be      	b.n	800acea <USB_EPStartXfer+0x700>
 800ad6c:	0948      	lsrs	r0, r1, #5
 800ad6e:	f011 0f1f 	tst.w	r1, #31
 800ad72:	bf08      	it	eq
 800ad74:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800ad78:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 800ad7c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800ad80:	b289      	uxth	r1, r1
 800ad82:	52d1      	strh	r1, [r2, r3]
 800ad84:	e7b1      	b.n	800acea <USB_EPStartXfer+0x700>
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d1af      	bne.n	800acea <USB_EPStartXfer+0x700>
 800ad8a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800ad8e:	b299      	uxth	r1, r3
 800ad90:	7822      	ldrb	r2, [r4, #0]
 800ad92:	0112      	lsls	r2, r2, #4
 800ad94:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 800ad98:	440b      	add	r3, r1
 800ad9a:	8a21      	ldrh	r1, [r4, #16]
 800ad9c:	52d1      	strh	r1, [r2, r3]
 800ad9e:	e7a4      	b.n	800acea <USB_EPStartXfer+0x700>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ada0:	2a3e      	cmp	r2, #62	; 0x3e
 800ada2:	d817      	bhi.n	800add4 <USB_EPStartXfer+0x7ea>
 800ada4:	0851      	lsrs	r1, r2, #1
 800ada6:	f012 0701 	ands.w	r7, r2, #1
 800adaa:	bf14      	ite	ne
 800adac:	1c4b      	addne	r3, r1, #1
 800adae:	460b      	moveq	r3, r1
 800adb0:	029b      	lsls	r3, r3, #10
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	5233      	strh	r3, [r6, r0]
 800adb6:	7863      	ldrb	r3, [r4, #1]
 800adb8:	bb7b      	cbnz	r3, 800ae1a <USB_EPStartXfer+0x830>
 800adba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 800adc4:	4413      	add	r3, r2
 800adc6:	7822      	ldrb	r2, [r4, #0]
 800adc8:	0112      	lsls	r2, r2, #4
 800adca:	bb17      	cbnz	r7, 800ae12 <USB_EPStartXfer+0x828>
 800adcc:	0289      	lsls	r1, r1, #10
 800adce:	b289      	uxth	r1, r1
 800add0:	5299      	strh	r1, [r3, r2]
 800add2:	e434      	b.n	800a63e <USB_EPStartXfer+0x54>
 800add4:	0951      	lsrs	r1, r2, #5
 800add6:	f012 071f 	ands.w	r7, r2, #31
 800adda:	bf0c      	ite	eq
 800addc:	f101 33ff 	addeq.w	r3, r1, #4294967295
 800ade0:	460b      	movne	r3, r1
 800ade2:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 800ade6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adea:	b29b      	uxth	r3, r3
 800adec:	5233      	strh	r3, [r6, r0]
 800adee:	7863      	ldrb	r3, [r4, #1]
 800adf0:	b99b      	cbnz	r3, 800ae1a <USB_EPStartXfer+0x830>
 800adf2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	7822      	ldrb	r2, [r4, #0]
 800adfa:	0112      	lsls	r2, r2, #4
 800adfc:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800ae00:	4418      	add	r0, r3
 800ae02:	b147      	cbz	r7, 800ae16 <USB_EPStartXfer+0x82c>
 800ae04:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800ae08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	5213      	strh	r3, [r2, r0]
 800ae10:	e415      	b.n	800a63e <USB_EPStartXfer+0x54>
 800ae12:	3101      	adds	r1, #1
 800ae14:	e7da      	b.n	800adcc <USB_EPStartXfer+0x7e2>
 800ae16:	3901      	subs	r1, #1
 800ae18:	e7f4      	b.n	800ae04 <USB_EPStartXfer+0x81a>
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	f47f ac0f 	bne.w	800a63e <USB_EPStartXfer+0x54>
 800ae20:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800ae24:	b289      	uxth	r1, r1
 800ae26:	7823      	ldrb	r3, [r4, #0]
 800ae28:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 800ae2c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ae30:	b293      	uxth	r3, r2
 800ae32:	526b      	strh	r3, [r5, r1]
 800ae34:	e403      	b.n	800a63e <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 800ae36:	2001      	movs	r0, #1
 800ae38:	e412      	b.n	800a660 <USB_EPStartXfer+0x76>

0800ae3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae3a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800ae40:	f500 6680 	add.w	r6, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800ae44:	085f      	lsrs	r7, r3, #1
 800ae46:	d011      	beq.n	800ae6c <USB_ReadPMA+0x32>
 800ae48:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae4a:	4635      	mov	r5, r6
  for (i = n; i != 0U; i--)
 800ae4c:	463c      	mov	r4, r7
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ae4e:	f835 2b04 	ldrh.w	r2, [r5], #4
 800ae52:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae54:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ae58:	0a12      	lsrs	r2, r2, #8
 800ae5a:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 800ae5e:	3002      	adds	r0, #2
 800ae60:	3c01      	subs	r4, #1
 800ae62:	d1f4      	bne.n	800ae4e <USB_ReadPMA+0x14>
 800ae64:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800ae68:	eb06 0687 	add.w	r6, r6, r7, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ae6c:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 800ae70:	bf1c      	itt	ne
 800ae72:	8833      	ldrhne	r3, [r6, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae74:	700b      	strbne	r3, [r1, #0]
  }
}
 800ae76:	bcf0      	pop	{r4, r5, r6, r7}
 800ae78:	4770      	bx	lr

0800ae7a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae7a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800ae7e:	b183      	cbz	r3, 800aea2 <USBD_CDC_EP0_RxReady+0x28>
{
 800ae80:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae82:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae86:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800ae8a:	28ff      	cmp	r0, #255	; 0xff
 800ae8c:	d007      	beq.n	800ae9e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800ae94:	4621      	mov	r1, r4
 800ae96:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800ae98:	23ff      	movs	r3, #255	; 0xff
 800ae9a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800ae9e:	2000      	movs	r0, #0
 800aea0:	bd10      	pop	{r4, pc}
 800aea2:	2000      	movs	r0, #0
 800aea4:	4770      	bx	lr
	...

0800aea8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aea8:	2343      	movs	r3, #67	; 0x43
 800aeaa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800aeac:	4800      	ldr	r0, [pc, #0]	; (800aeb0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800aeae:	4770      	bx	lr
 800aeb0:	20000044 	.word	0x20000044

0800aeb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800aeb4:	2343      	movs	r3, #67	; 0x43
 800aeb6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800aeb8:	4800      	ldr	r0, [pc, #0]	; (800aebc <USBD_CDC_GetHSCfgDesc+0x8>)
 800aeba:	4770      	bx	lr
 800aebc:	20000088 	.word	0x20000088

0800aec0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aec0:	2343      	movs	r3, #67	; 0x43
 800aec2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800aec4:	4800      	ldr	r0, [pc, #0]	; (800aec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800aec6:	4770      	bx	lr
 800aec8:	200000d8 	.word	0x200000d8

0800aecc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aecc:	230a      	movs	r3, #10
 800aece:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800aed0:	4800      	ldr	r0, [pc, #0]	; (800aed4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800aed2:	4770      	bx	lr
 800aed4:	200000cc 	.word	0x200000cc

0800aed8 <USBD_CDC_DataOut>:
{
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aedc:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aee0:	f000 ffee 	bl	800bec0 <USBD_LL_GetRxDataSize>
 800aee4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800aee8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800aeec:	b14b      	cbz	r3, 800af02 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aeee:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800aef8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800aefc:	4798      	blx	r3
    return USBD_OK;
 800aefe:	2000      	movs	r0, #0
}
 800af00:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800af02:	2002      	movs	r0, #2
 800af04:	e7fc      	b.n	800af00 <USBD_CDC_DataOut+0x28>

0800af06 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af06:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800af0a:	b312      	cbz	r2, 800af52 <USBD_CDC_DataIn+0x4c>
{
 800af0c:	b538      	push	{r3, r4, r5, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af0e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800af12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	b15b      	cbz	r3, 800af32 <USBD_CDC_DataIn+0x2c>
 800af1a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 800af1e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800af22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af26:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800af28:	fbb3 f4f5 	udiv	r4, r3, r5
 800af2c:	fb05 3314 	mls	r3, r5, r4, r3
 800af30:	b11b      	cbz	r3, 800af3a <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800af32:	2000      	movs	r0, #0
 800af34:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800af38:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800af3a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800af3e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800af42:	2400      	movs	r4, #0
 800af44:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af46:	4623      	mov	r3, r4
 800af48:	4622      	mov	r2, r4
 800af4a:	f000 ffa9 	bl	800bea0 <USBD_LL_Transmit>
    return USBD_OK;
 800af4e:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af50:	e7f2      	b.n	800af38 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 800af52:	2002      	movs	r0, #2
}
 800af54:	4770      	bx	lr

0800af56 <USBD_CDC_Setup>:
{
 800af56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af58:	b083      	sub	sp, #12
 800af5a:	4606      	mov	r6, r0
 800af5c:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af5e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800af68:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af6c:	780b      	ldrb	r3, [r1, #0]
 800af6e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800af72:	d027      	beq.n	800afc4 <USBD_CDC_Setup+0x6e>
 800af74:	2d20      	cmp	r5, #32
 800af76:	d153      	bne.n	800b020 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 800af78:	88ca      	ldrh	r2, [r1, #6]
 800af7a:	b1da      	cbz	r2, 800afb4 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 800af7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af80:	d00c      	beq.n	800af9c <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af82:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	4639      	mov	r1, r7
 800af8a:	7860      	ldrb	r0, [r4, #1]
 800af8c:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af8e:	88e2      	ldrh	r2, [r4, #6]
 800af90:	4639      	mov	r1, r7
 800af92:	4630      	mov	r0, r6
 800af94:	f000 fd63 	bl	800ba5e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800af98:	2500      	movs	r5, #0
 800af9a:	e044      	b.n	800b026 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 800af9c:	784b      	ldrb	r3, [r1, #1]
 800af9e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800afa2:	88cb      	ldrh	r3, [r1, #6]
 800afa4:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800afa8:	88ca      	ldrh	r2, [r1, #6]
 800afaa:	4639      	mov	r1, r7
 800afac:	f000 fd6c 	bl	800ba88 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800afb0:	2500      	movs	r5, #0
 800afb2:	e038      	b.n	800b026 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afb4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2200      	movs	r2, #0
 800afbc:	7848      	ldrb	r0, [r1, #1]
 800afbe:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800afc0:	2500      	movs	r5, #0
 800afc2:	e030      	b.n	800b026 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 800afc4:	784f      	ldrb	r7, [r1, #1]
 800afc6:	2f0a      	cmp	r7, #10
 800afc8:	d014      	beq.n	800aff4 <USBD_CDC_Setup+0x9e>
 800afca:	2f0b      	cmp	r7, #11
 800afcc:	d020      	beq.n	800b010 <USBD_CDC_Setup+0xba>
 800afce:	b11f      	cbz	r7, 800afd8 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 800afd0:	f000 fa58 	bl	800b484 <USBD_CtlError>
          ret = USBD_FAIL;
 800afd4:	2502      	movs	r5, #2
          break;
 800afd6:	e026      	b.n	800b026 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d003      	beq.n	800afe8 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 800afe0:	f000 fa50 	bl	800b484 <USBD_CtlError>
            ret = USBD_FAIL;
 800afe4:	2502      	movs	r5, #2
 800afe6:	e01e      	b.n	800b026 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800afe8:	2202      	movs	r2, #2
 800afea:	a901      	add	r1, sp, #4
 800afec:	f000 fd37 	bl	800ba5e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800aff0:	463d      	mov	r5, r7
 800aff2:	e018      	b.n	800b026 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d003      	beq.n	800b004 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 800affc:	f000 fa42 	bl	800b484 <USBD_CtlError>
            ret = USBD_FAIL;
 800b000:	2502      	movs	r5, #2
 800b002:	e010      	b.n	800b026 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b004:	2201      	movs	r2, #1
 800b006:	f10d 0107 	add.w	r1, sp, #7
 800b00a:	f000 fd28 	bl	800ba5e <USBD_CtlSendData>
 800b00e:	e00a      	b.n	800b026 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b010:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b014:	2b03      	cmp	r3, #3
 800b016:	d006      	beq.n	800b026 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 800b018:	f000 fa34 	bl	800b484 <USBD_CtlError>
            ret = USBD_FAIL;
 800b01c:	2502      	movs	r5, #2
 800b01e:	e002      	b.n	800b026 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 800b020:	f000 fa30 	bl	800b484 <USBD_CtlError>
      ret = USBD_FAIL;
 800b024:	2502      	movs	r5, #2
}
 800b026:	4628      	mov	r0, r5
 800b028:	b003      	add	sp, #12
 800b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b02c <USBD_CDC_DeInit>:
{
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b030:	2181      	movs	r1, #129	; 0x81
 800b032:	f000 fefe 	bl	800be32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b036:	2500      	movs	r5, #0
 800b038:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b03a:	2101      	movs	r1, #1
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 fef8 	bl	800be32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b042:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b046:	2182      	movs	r1, #130	; 0x82
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fef2 	bl	800be32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b04e:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800b050:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b054:	b14b      	cbz	r3, 800b06a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b056:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b05e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800b062:	f000 ff37 	bl	800bed4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b066:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800b06a:	2000      	movs	r0, #0
 800b06c:	bd38      	pop	{r3, r4, r5, pc}

0800b06e <USBD_CDC_Init>:
{
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b072:	7c03      	ldrb	r3, [r0, #16]
 800b074:	bbab      	cbnz	r3, 800b0e2 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b07a:	2202      	movs	r2, #2
 800b07c:	2181      	movs	r1, #129	; 0x81
 800b07e:	f000 fecd 	bl	800be1c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b082:	2501      	movs	r5, #1
 800b084:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b08a:	2202      	movs	r2, #2
 800b08c:	4629      	mov	r1, r5
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fec4 	bl	800be1c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b094:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b098:	2308      	movs	r3, #8
 800b09a:	2203      	movs	r2, #3
 800b09c:	2182      	movs	r1, #130	; 0x82
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 febc 	bl	800be1c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0ac:	f000 ff0e 	bl	800becc <USBD_static_malloc>
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800b0b6:	b368      	cbz	r0, 800b114 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0b8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4798      	blx	r3
    hcdc->TxState = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800b0c6:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ca:	7c26      	ldrb	r6, [r4, #16]
 800b0cc:	b9ce      	cbnz	r6, 800b102 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0d2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fee9 	bl	800beb0 <USBD_LL_PrepareReceive>
}
 800b0de:	4630      	mov	r0, r6
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0e2:	2340      	movs	r3, #64	; 0x40
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	2181      	movs	r1, #129	; 0x81
 800b0e8:	f000 fe98 	bl	800be1c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0ec:	2501      	movs	r5, #1
 800b0ee:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0f0:	2340      	movs	r3, #64	; 0x40
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 fe90 	bl	800be1c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0fc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 800b100:	e7ca      	b.n	800b098 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b108:	2101      	movs	r1, #1
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 fed0 	bl	800beb0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800b110:	2600      	movs	r6, #0
 800b112:	e7e4      	b.n	800b0de <USBD_CDC_Init+0x70>
    ret = 1U;
 800b114:	2601      	movs	r6, #1
 800b116:	e7e2      	b.n	800b0de <USBD_CDC_Init+0x70>

0800b118 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800b118:	b119      	cbz	r1, 800b122 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800b11a:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800b11e:	2000      	movs	r0, #0
 800b120:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b122:	2002      	movs	r0, #2
  }

  return ret;
}
 800b124:	4770      	bx	lr

0800b126 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b126:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 800b12a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b12e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 800b132:	2000      	movs	r0, #0
 800b134:	4770      	bx	lr

0800b136 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b136:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 800b13a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 800b13e:	2000      	movs	r0, #0
 800b140:	4770      	bx	lr

0800b142 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b142:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 800b146:	b1a2      	cbz	r2, 800b172 <USBD_CDC_TransmitPacket+0x30>
{
 800b148:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 800b14a:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800b14e:	b10b      	cbz	r3, 800b154 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800b150:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b152:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 800b154:	2301      	movs	r3, #1
 800b156:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b15a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800b15e:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b160:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800b164:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b168:	2181      	movs	r1, #129	; 0x81
 800b16a:	f000 fe99 	bl	800bea0 <USBD_LL_Transmit>
      return USBD_OK;
 800b16e:	2000      	movs	r0, #0
 800b170:	e7ef      	b.n	800b152 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 800b172:	2002      	movs	r0, #2
}
 800b174:	4770      	bx	lr

0800b176 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b176:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b178:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b17c:	b192      	cbz	r2, 800b1a4 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b17e:	7c04      	ldrb	r4, [r0, #16]
 800b180:	b944      	cbnz	r4, 800b194 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b182:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b186:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b18a:	2101      	movs	r1, #1
 800b18c:	f000 fe90 	bl	800beb0 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800b190:	4620      	mov	r0, r4
 800b192:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800b194:	2340      	movs	r3, #64	; 0x40
 800b196:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b19a:	2101      	movs	r1, #1
 800b19c:	f000 fe88 	bl	800beb0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800b1a0:	2400      	movs	r4, #0
 800b1a2:	e7f5      	b.n	800b190 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800b1a4:	2402      	movs	r4, #2
 800b1a6:	e7f3      	b.n	800b190 <USBD_CDC_ReceivePacket+0x1a>

0800b1a8 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1a8:	b198      	cbz	r0, 800b1d2 <USBD_Init+0x2a>
{
 800b1aa:	b508      	push	{r3, lr}
 800b1ac:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b1ae:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800b1b2:	b110      	cbz	r0, 800b1ba <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1ba:	b109      	cbz	r1, 800b1c0 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800b1bc:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800b1c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 fddd 	bl	800bd88 <USBD_LL_Init>

  return USBD_OK;
 800b1ce:	2000      	movs	r0, #0
}
 800b1d0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b1d2:	2002      	movs	r0, #2
}
 800b1d4:	4770      	bx	lr

0800b1d6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800b1d6:	b119      	cbz	r1, 800b1e0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b1d8:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800b1dc:	2000      	movs	r0, #0
 800b1de:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b1e0:	2002      	movs	r0, #2
  }

  return status;
}
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1e4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b1e6:	f000 fe11 	bl	800be0c <USBD_LL_Start>

  return USBD_OK;
}
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	bd08      	pop	{r3, pc}

0800b1ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1ee:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800b1f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b1f4:	b12b      	cbz	r3, 800b202 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	bf18      	it	ne
 800b1fe:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800b200:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b202:	2002      	movs	r0, #2
 800b204:	e7fc      	b.n	800b200 <USBD_SetClassConfig+0x12>

0800b206 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b206:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b208:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	4798      	blx	r3

  return USBD_OK;
}
 800b210:	2000      	movs	r0, #0
 800b212:	bd08      	pop	{r3, pc}

0800b214 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b218:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 f91d 	bl	800b45c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b222:	2301      	movs	r3, #1
 800b224:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b228:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800b22c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b230:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 800b234:	f001 031f 	and.w	r3, r1, #31
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d00e      	beq.n	800b25a <USBD_LL_SetupStage+0x46>
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d011      	beq.n	800b264 <USBD_LL_SetupStage+0x50>
 800b240:	b12b      	cbz	r3, 800b24e <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b242:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b246:	4620      	mov	r0, r4
 800b248:	f000 fdfb 	bl	800be42 <USBD_LL_StallEP>
      break;
 800b24c:	e003      	b.n	800b256 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800b24e:	4629      	mov	r1, r5
 800b250:	4620      	mov	r0, r4
 800b252:	f000 f921 	bl	800b498 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800b256:	2000      	movs	r0, #0
 800b258:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800b25a:	4629      	mov	r1, r5
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fad5 	bl	800b80c <USBD_StdItfReq>
      break;
 800b262:	e7f8      	b.n	800b256 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800b264:	4629      	mov	r1, r5
 800b266:	4620      	mov	r0, r4
 800b268:	f000 fb00 	bl	800b86c <USBD_StdEPReq>
      break;
 800b26c:	e7f3      	b.n	800b256 <USBD_LL_SetupStage+0x42>

0800b26e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b26e:	b538      	push	{r3, r4, r5, lr}
 800b270:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b272:	460d      	mov	r5, r1
 800b274:	bb81      	cbnz	r1, 800b2d8 <USBD_LL_DataOutStage+0x6a>
 800b276:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b278:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b27c:	2a03      	cmp	r2, #3
 800b27e:	d003      	beq.n	800b288 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b280:	2a05      	cmp	r2, #5
 800b282:	d022      	beq.n	800b2ca <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b284:	4608      	mov	r0, r1
 800b286:	e031      	b.n	800b2ec <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 800b288:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 800b28c:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800b290:	4291      	cmp	r1, r2
 800b292:	d90b      	bls.n	800b2ac <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 800b294:	1a89      	subs	r1, r1, r2
 800b296:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800b29a:	428a      	cmp	r2, r1
 800b29c:	bf8c      	ite	hi
 800b29e:	b28a      	uxthhi	r2, r1
 800b2a0:	b292      	uxthls	r2, r2
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f000 fbff 	bl	800baa6 <USBD_CtlContinueRx>
  return USBD_OK;
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	e01f      	b.n	800b2ec <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	b11b      	cbz	r3, 800b2bc <USBD_LL_DataOutStage+0x4e>
 800b2b4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b2b8:	2a03      	cmp	r2, #3
 800b2ba:	d004      	beq.n	800b2c6 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 fbfa 	bl	800bab6 <USBD_CtlSendStatus>
  return USBD_OK;
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	e012      	b.n	800b2ec <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 800b2c6:	4798      	blx	r3
 800b2c8:	e7f8      	b.n	800b2bc <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b2d0:	f000 fdb7 	bl	800be42 <USBD_LL_StallEP>
  return USBD_OK;
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	e009      	b.n	800b2ec <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800b2d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	b133      	cbz	r3, 800b2ee <USBD_LL_DataOutStage+0x80>
 800b2e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b2e4:	2a03      	cmp	r2, #3
 800b2e6:	d104      	bne.n	800b2f2 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 800b2e8:	4798      	blx	r3
  return USBD_OK;
 800b2ea:	2000      	movs	r0, #0
}
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b2ee:	2002      	movs	r0, #2
 800b2f0:	e7fc      	b.n	800b2ec <USBD_LL_DataOutStage+0x7e>
 800b2f2:	2002      	movs	r0, #2
 800b2f4:	e7fa      	b.n	800b2ec <USBD_LL_DataOutStage+0x7e>

0800b2f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2f6:	b538      	push	{r3, r4, r5, lr}
 800b2f8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	2900      	cmp	r1, #0
 800b2fe:	d152      	bne.n	800b3a6 <USBD_LL_DataInStage+0xb0>
 800b300:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b302:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b306:	2a02      	cmp	r2, #2
 800b308:	d00b      	beq.n	800b322 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b30a:	f032 0304 	bics.w	r3, r2, #4
 800b30e:	d102      	bne.n	800b316 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b310:	2180      	movs	r1, #128	; 0x80
 800b312:	f000 fd96 	bl	800be42 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b316:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d03e      	beq.n	800b39c <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800b31e:	4628      	mov	r0, r5
}
 800b320:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800b322:	6a01      	ldr	r1, [r0, #32]
 800b324:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b326:	4291      	cmp	r1, r2
 800b328:	d81b      	bhi.n	800b362 <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b32a:	69c1      	ldr	r1, [r0, #28]
 800b32c:	fbb1 f3f2 	udiv	r3, r1, r2
 800b330:	fb02 1313 	mls	r3, r2, r3, r1
 800b334:	b92b      	cbnz	r3, 800b342 <USBD_LL_DataInStage+0x4c>
 800b336:	428a      	cmp	r2, r1
 800b338:	d803      	bhi.n	800b342 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 800b33a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800b33e:	4299      	cmp	r1, r3
 800b340:	d31c      	bcc.n	800b37c <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b342:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	b11b      	cbz	r3, 800b352 <USBD_LL_DataInStage+0x5c>
 800b34a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800b34e:	2a03      	cmp	r2, #3
 800b350:	d021      	beq.n	800b396 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 800b352:	2180      	movs	r1, #128	; 0x80
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fd74 	bl	800be42 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fbb6 	bl	800bacc <USBD_CtlReceiveStatus>
 800b360:	e7d9      	b.n	800b316 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 800b362:	1a8a      	subs	r2, r1, r2
 800b364:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b366:	b292      	uxth	r2, r2
 800b368:	4619      	mov	r1, r3
 800b36a:	f000 fb85 	bl	800ba78 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b36e:	2300      	movs	r3, #0
 800b370:	461a      	mov	r2, r3
 800b372:	4619      	mov	r1, r3
 800b374:	4620      	mov	r0, r4
 800b376:	f000 fd9b 	bl	800beb0 <USBD_LL_PrepareReceive>
 800b37a:	e7cc      	b.n	800b316 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b37c:	2200      	movs	r2, #0
 800b37e:	4611      	mov	r1, r2
 800b380:	f000 fb7a 	bl	800ba78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b384:	2100      	movs	r1, #0
 800b386:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b38a:	460b      	mov	r3, r1
 800b38c:	460a      	mov	r2, r1
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fd8e 	bl	800beb0 <USBD_LL_PrepareReceive>
 800b394:	e7bf      	b.n	800b316 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 800b396:	4620      	mov	r0, r4
 800b398:	4798      	blx	r3
 800b39a:	e7da      	b.n	800b352 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	e7bc      	b.n	800b320 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 800b3a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b3aa:	695b      	ldr	r3, [r3, #20]
 800b3ac:	b133      	cbz	r3, 800b3bc <USBD_LL_DataInStage+0xc6>
 800b3ae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b3b2:	2a03      	cmp	r2, #3
 800b3b4:	d104      	bne.n	800b3c0 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 800b3b6:	4798      	blx	r3
  return USBD_OK;
 800b3b8:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800b3ba:	e7b1      	b.n	800b320 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 800b3bc:	2002      	movs	r0, #2
 800b3be:	e7af      	b.n	800b320 <USBD_LL_DataInStage+0x2a>
 800b3c0:	2002      	movs	r0, #2
 800b3c2:	e7ad      	b.n	800b320 <USBD_LL_DataInStage+0x2a>

0800b3c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	f000 fd25 	bl	800be1c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3d2:	2501      	movs	r5, #1
 800b3d4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3d8:	2640      	movs	r6, #64	; 0x40
 800b3da:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3de:	4633      	mov	r3, r6
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2180      	movs	r1, #128	; 0x80
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 fd19 	bl	800be1c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3ea:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3ec:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3ee:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800b3f8:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3fa:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 800b3fe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b402:	b12b      	cbz	r3, 800b410 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b404:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	2100      	movs	r1, #0
 800b40c:	4620      	mov	r0, r4
 800b40e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b410:	2000      	movs	r0, #0
 800b412:	bd70      	pop	{r4, r5, r6, pc}

0800b414 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b414:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800b416:	2000      	movs	r0, #0
 800b418:	4770      	bx	lr

0800b41a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800b41a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b41e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b422:	2304      	movs	r3, #4
 800b424:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800b428:	2000      	movs	r0, #0
 800b42a:	4770      	bx	lr

0800b42c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b42c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b430:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800b432:	bf04      	itt	eq
 800b434:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800b438:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800b43c:	2000      	movs	r0, #0
 800b43e:	4770      	bx	lr

0800b440 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b440:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b442:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b446:	2b03      	cmp	r3, #3
 800b448:	d001      	beq.n	800b44e <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800b44a:	2000      	movs	r0, #0
 800b44c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800b44e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b452:	69db      	ldr	r3, [r3, #28]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0f8      	beq.n	800b44a <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800b458:	4798      	blx	r3
 800b45a:	e7f6      	b.n	800b44a <USBD_LL_SOF+0xa>

0800b45c <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 800b45c:	780b      	ldrb	r3, [r1, #0]
 800b45e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b460:	784b      	ldrb	r3, [r1, #1]
 800b462:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b464:	78ca      	ldrb	r2, [r1, #3]
 800b466:	788b      	ldrb	r3, [r1, #2]
 800b468:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b46c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b46e:	794a      	ldrb	r2, [r1, #5]
 800b470:	790b      	ldrb	r3, [r1, #4]
 800b472:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b476:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b478:	79ca      	ldrb	r2, [r1, #7]
 800b47a:	798b      	ldrb	r3, [r1, #6]
 800b47c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b480:	80c3      	strh	r3, [r0, #6]

}
 800b482:	4770      	bx	lr

0800b484 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b484:	b510      	push	{r4, lr}
 800b486:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800b488:	2180      	movs	r1, #128	; 0x80
 800b48a:	f000 fcda 	bl	800be42 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b48e:	2100      	movs	r1, #0
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fcd6 	bl	800be42 <USBD_LL_StallEP>
}
 800b496:	bd10      	pop	{r4, pc}

0800b498 <USBD_StdDevReq>:
{
 800b498:	b530      	push	{r4, r5, lr}
 800b49a:	b083      	sub	sp, #12
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4a0:	780b      	ldrb	r3, [r1, #0]
 800b4a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	d005      	beq.n	800b4b6 <USBD_StdDevReq+0x1e>
 800b4aa:	2b40      	cmp	r3, #64	; 0x40
 800b4ac:	d003      	beq.n	800b4b6 <USBD_StdDevReq+0x1e>
 800b4ae:	b15b      	cbz	r3, 800b4c8 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 800b4b0:	f7ff ffe8 	bl	800b484 <USBD_CtlError>
      break;
 800b4b4:	e005      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800b4b6:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	4798      	blx	r3
}
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	b003      	add	sp, #12
 800b4c6:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800b4c8:	784b      	ldrb	r3, [r1, #1]
 800b4ca:	2b09      	cmp	r3, #9
 800b4cc:	f200 8198 	bhi.w	800b800 <USBD_StdDevReq+0x368>
 800b4d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b4d4:	0184015f 	.word	0x0184015f
 800b4d8:	017b0196 	.word	0x017b0196
 800b4dc:	00c90196 	.word	0x00c90196
 800b4e0:	0196000a 	.word	0x0196000a
 800b4e4:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800b4ee:	884a      	ldrh	r2, [r1, #2]
 800b4f0:	0a13      	lsrs	r3, r2, #8
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	2b06      	cmp	r3, #6
 800b4f6:	f200 80a4 	bhi.w	800b642 <USBD_StdDevReq+0x1aa>
 800b4fa:	e8df f003 	tbb	[pc, r3]
 800b4fe:	1804      	.short	0x1804
 800b500:	86a2a22c 	.word	0x86a2a22c
 800b504:	93          	.byte	0x93
 800b505:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b506:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f10d 0106 	add.w	r1, sp, #6
 800b510:	7c00      	ldrb	r0, [r0, #16]
 800b512:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800b514:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b518:	2a00      	cmp	r2, #0
 800b51a:	f000 809f 	beq.w	800b65c <USBD_StdDevReq+0x1c4>
 800b51e:	88e3      	ldrh	r3, [r4, #6]
 800b520:	2b00      	cmp	r3, #0
 800b522:	f040 8092 	bne.w	800b64a <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 800b526:	4628      	mov	r0, r5
 800b528:	f000 fac5 	bl	800bab6 <USBD_CtlSendStatus>
 800b52c:	e7c9      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b52e:	7c03      	ldrb	r3, [r0, #16]
 800b530:	b943      	cbnz	r3, 800b544 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b532:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	f10d 0006 	add.w	r0, sp, #6
 800b53c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b53e:	2302      	movs	r3, #2
 800b540:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b542:	e7e7      	b.n	800b514 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b544:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	f10d 0006 	add.w	r0, sp, #6
 800b54e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b550:	2302      	movs	r3, #2
 800b552:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b554:	e7de      	b.n	800b514 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	2a05      	cmp	r2, #5
 800b55a:	d852      	bhi.n	800b602 <USBD_StdDevReq+0x16a>
 800b55c:	e8df f002 	tbb	[pc, r2]
 800b560:	2a1d1003 	.word	0x2a1d1003
 800b564:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b566:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	b123      	cbz	r3, 800b578 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b56e:	f10d 0106 	add.w	r1, sp, #6
 800b572:	7c00      	ldrb	r0, [r0, #16]
 800b574:	4798      	blx	r3
  if (err != 0U)
 800b576:	e7cd      	b.n	800b514 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800b578:	4621      	mov	r1, r4
 800b57a:	f7ff ff83 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b57e:	e7a0      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b580:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	b123      	cbz	r3, 800b592 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b588:	f10d 0106 	add.w	r1, sp, #6
 800b58c:	7c00      	ldrb	r0, [r0, #16]
 800b58e:	4798      	blx	r3
  if (err != 0U)
 800b590:	e7c0      	b.n	800b514 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800b592:	4621      	mov	r1, r4
 800b594:	f7ff ff76 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b598:	e793      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b59a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	b123      	cbz	r3, 800b5ac <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5a2:	f10d 0106 	add.w	r1, sp, #6
 800b5a6:	7c00      	ldrb	r0, [r0, #16]
 800b5a8:	4798      	blx	r3
  if (err != 0U)
 800b5aa:	e7b3      	b.n	800b514 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f7ff ff69 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b5b2:	e786      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	b123      	cbz	r3, 800b5c6 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5bc:	f10d 0106 	add.w	r1, sp, #6
 800b5c0:	7c00      	ldrb	r0, [r0, #16]
 800b5c2:	4798      	blx	r3
  if (err != 0U)
 800b5c4:	e7a6      	b.n	800b514 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f7ff ff5c 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b5cc:	e779      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5ce:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	b123      	cbz	r3, 800b5e0 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5d6:	f10d 0106 	add.w	r1, sp, #6
 800b5da:	7c00      	ldrb	r0, [r0, #16]
 800b5dc:	4798      	blx	r3
  if (err != 0U)
 800b5de:	e799      	b.n	800b514 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	f7ff ff4f 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b5e6:	e76c      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	b123      	cbz	r3, 800b5fa <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5f0:	f10d 0106 	add.w	r1, sp, #6
 800b5f4:	7c00      	ldrb	r0, [r0, #16]
 800b5f6:	4798      	blx	r3
  if (err != 0U)
 800b5f8:	e78c      	b.n	800b514 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	f7ff ff42 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b600:	e75f      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800b602:	4621      	mov	r1, r4
 800b604:	f7ff ff3e 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b608:	e75b      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b60a:	7c03      	ldrb	r3, [r0, #16]
 800b60c:	b933      	cbnz	r3, 800b61c <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b60e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b614:	f10d 0006 	add.w	r0, sp, #6
 800b618:	4798      	blx	r3
  if (err != 0U)
 800b61a:	e77b      	b.n	800b514 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 800b61c:	4621      	mov	r1, r4
 800b61e:	f7ff ff31 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b622:	e74e      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b624:	7c03      	ldrb	r3, [r0, #16]
 800b626:	b943      	cbnz	r3, 800b63a <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b628:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62e:	f10d 0006 	add.w	r0, sp, #6
 800b632:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b634:	2307      	movs	r3, #7
 800b636:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b638:	e76c      	b.n	800b514 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 800b63a:	4621      	mov	r1, r4
 800b63c:	f7ff ff22 	bl	800b484 <USBD_CtlError>
  if (err != 0U)
 800b640:	e73f      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800b642:	4621      	mov	r1, r4
 800b644:	f7ff ff1e 	bl	800b484 <USBD_CtlError>
    return;
 800b648:	e73b      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 800b64a:	429a      	cmp	r2, r3
 800b64c:	bf28      	it	cs
 800b64e:	461a      	movcs	r2, r3
 800b650:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b654:	4601      	mov	r1, r0
 800b656:	4628      	mov	r0, r5
 800b658:	f000 fa01 	bl	800ba5e <USBD_CtlSendData>
    if (req->wLength == 0U)
 800b65c:	88e3      	ldrh	r3, [r4, #6]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f47f af2f 	bne.w	800b4c2 <USBD_StdDevReq+0x2a>
 800b664:	e75f      	b.n	800b526 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b666:	888b      	ldrh	r3, [r1, #4]
 800b668:	b9eb      	cbnz	r3, 800b6a6 <USBD_StdDevReq+0x20e>
 800b66a:	88cb      	ldrh	r3, [r1, #6]
 800b66c:	b9db      	cbnz	r3, 800b6a6 <USBD_StdDevReq+0x20e>
 800b66e:	884b      	ldrh	r3, [r1, #2]
 800b670:	2b7f      	cmp	r3, #127	; 0x7f
 800b672:	d818      	bhi.n	800b6a6 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b674:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b678:	2a03      	cmp	r2, #3
 800b67a:	d00d      	beq.n	800b698 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b67c:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 800b67e:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b682:	4621      	mov	r1, r4
 800b684:	f000 fc04 	bl	800be90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 fa14 	bl	800bab6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800b68e:	b134      	cbz	r4, 800b69e <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b690:	2302      	movs	r3, #2
 800b692:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800b696:	e714      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800b698:	f7ff fef4 	bl	800b484 <USBD_CtlError>
 800b69c:	e711      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800b6a4:	e70d      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f7ff feeb 	bl	800b484 <USBD_CtlError>
 800b6ae:	e708      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 800b6b0:	788b      	ldrb	r3, [r1, #2]
 800b6b2:	4a55      	ldr	r2, [pc, #340]	; (800b808 <USBD_StdDevReq+0x370>)
 800b6b4:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d80d      	bhi.n	800b6d6 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 800b6ba:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b6be:	2a02      	cmp	r2, #2
 800b6c0:	d00c      	beq.n	800b6dc <USBD_StdDevReq+0x244>
 800b6c2:	2a03      	cmp	r2, #3
 800b6c4:	d020      	beq.n	800b708 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 800b6c6:	f7ff fedd 	bl	800b484 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b6ca:	4b4f      	ldr	r3, [pc, #316]	; (800b808 <USBD_StdDevReq+0x370>)
 800b6cc:	7819      	ldrb	r1, [r3, #0]
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7ff fd99 	bl	800b206 <USBD_ClrClassConfig>
        break;
 800b6d4:	e6f5      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800b6d6:	f7ff fed5 	bl	800b484 <USBD_CtlError>
 800b6da:	e6f2      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 800b6dc:	b18b      	cbz	r3, 800b702 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 800b6de:	2101      	movs	r1, #1
 800b6e0:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b6e8:	f7ff fd81 	bl	800b1ee <USBD_SetClassConfig>
 800b6ec:	2802      	cmp	r0, #2
 800b6ee:	d003      	beq.n	800b6f8 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f000 f9e0 	bl	800bab6 <USBD_CtlSendStatus>
 800b6f6:	e6e4      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f7ff fec2 	bl	800b484 <USBD_CtlError>
            return;
 800b700:	e6df      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 800b702:	f000 f9d8 	bl	800bab6 <USBD_CtlSendStatus>
 800b706:	e6dc      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 800b708:	b18b      	cbz	r3, 800b72e <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 800b70a:	6841      	ldr	r1, [r0, #4]
 800b70c:	2901      	cmp	r1, #1
 800b70e:	d01e      	beq.n	800b74e <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b710:	b2c9      	uxtb	r1, r1
 800b712:	f7ff fd78 	bl	800b206 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b716:	4b3c      	ldr	r3, [pc, #240]	; (800b808 <USBD_StdDevReq+0x370>)
 800b718:	7819      	ldrb	r1, [r3, #0]
 800b71a:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b71c:	4628      	mov	r0, r5
 800b71e:	f7ff fd66 	bl	800b1ee <USBD_SetClassConfig>
 800b722:	2802      	cmp	r0, #2
 800b724:	d00e      	beq.n	800b744 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 800b726:	4628      	mov	r0, r5
 800b728:	f000 f9c5 	bl	800bab6 <USBD_CtlSendStatus>
 800b72c:	e6c9      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b72e:	2302      	movs	r3, #2
 800b730:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b734:	2100      	movs	r1, #0
 800b736:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b738:	f7ff fd65 	bl	800b206 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b73c:	4628      	mov	r0, r5
 800b73e:	f000 f9ba 	bl	800bab6 <USBD_CtlSendStatus>
 800b742:	e6be      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f7ff fe9c 	bl	800b484 <USBD_CtlError>
            return;
 800b74c:	e6b9      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 800b74e:	f000 f9b2 	bl	800bab6 <USBD_CtlSendStatus>
 800b752:	e6b6      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 800b754:	88cb      	ldrh	r3, [r1, #6]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d109      	bne.n	800b76e <USBD_StdDevReq+0x2d6>
    switch (pdev->dev_state)
 800b75a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d808      	bhi.n	800b774 <USBD_StdDevReq+0x2dc>
 800b762:	b973      	cbnz	r3, 800b782 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 800b764:	4621      	mov	r1, r4
 800b766:	4628      	mov	r0, r5
 800b768:	f7ff fe8c 	bl	800b484 <USBD_CtlError>
        break;
 800b76c:	e6a9      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800b76e:	f7ff fe89 	bl	800b484 <USBD_CtlError>
 800b772:	e6a6      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800b774:	2b03      	cmp	r3, #3
 800b776:	d1f5      	bne.n	800b764 <USBD_StdDevReq+0x2cc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b778:	2201      	movs	r2, #1
 800b77a:	1d01      	adds	r1, r0, #4
 800b77c:	f000 f96f 	bl	800ba5e <USBD_CtlSendData>
        break;
 800b780:	e69f      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 800b782:	4601      	mov	r1, r0
 800b784:	2300      	movs	r3, #0
 800b786:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b78a:	2201      	movs	r2, #1
 800b78c:	f000 f967 	bl	800ba5e <USBD_CtlSendData>
        break;
 800b790:	e697      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800b792:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b796:	3b01      	subs	r3, #1
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d813      	bhi.n	800b7c4 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 800b79c:	88cb      	ldrh	r3, [r1, #6]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d10d      	bne.n	800b7be <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800b7a6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800b7aa:	b10b      	cbz	r3, 800b7b0 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	f105 010c 	add.w	r1, r5, #12
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f000 f951 	bl	800ba5e <USBD_CtlSendData>
      break;
 800b7bc:	e681      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 800b7be:	f7ff fe61 	bl	800b484 <USBD_CtlError>
        break;
 800b7c2:	e67e      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800b7c4:	f7ff fe5e 	bl	800b484 <USBD_CtlError>
      break;
 800b7c8:	e67b      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7ca:	884b      	ldrh	r3, [r1, #2]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	f47f ae78 	bne.w	800b4c2 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800b7d2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b7d6:	f000 f96e 	bl	800bab6 <USBD_CtlSendStatus>
 800b7da:	e672      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800b7dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d809      	bhi.n	800b7fa <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7e6:	884b      	ldrh	r3, [r1, #2]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	f47f ae6a 	bne.w	800b4c2 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b7f4:	f000 f95f 	bl	800bab6 <USBD_CtlSendStatus>
 800b7f8:	e663      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800b7fa:	f7ff fe43 	bl	800b484 <USBD_CtlError>
      break;
 800b7fe:	e660      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800b800:	f7ff fe40 	bl	800b484 <USBD_CtlError>
          break;
 800b804:	e65d      	b.n	800b4c2 <USBD_StdDevReq+0x2a>
 800b806:	bf00      	nop
 800b808:	20000204 	.word	0x20000204

0800b80c <USBD_StdItfReq>:
{
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4605      	mov	r5, r0
 800b810:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b812:	780b      	ldrb	r3, [r1, #0]
 800b814:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800b818:	2a40      	cmp	r2, #64	; 0x40
 800b81a:	d006      	beq.n	800b82a <USBD_StdItfReq+0x1e>
 800b81c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b820:	d003      	beq.n	800b82a <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 800b822:	f7ff fe2f 	bl	800b484 <USBD_CtlError>
}
 800b826:	2000      	movs	r0, #0
 800b828:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800b82a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800b82e:	3b01      	subs	r3, #1
 800b830:	2b02      	cmp	r3, #2
 800b832:	d816      	bhi.n	800b862 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b834:	7923      	ldrb	r3, [r4, #4]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d80e      	bhi.n	800b858 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b83a:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	4621      	mov	r1, r4
 800b842:	4628      	mov	r0, r5
 800b844:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b846:	88e3      	ldrh	r3, [r4, #6]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1ec      	bne.n	800b826 <USBD_StdItfReq+0x1a>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d1ea      	bne.n	800b826 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 800b850:	4628      	mov	r0, r5
 800b852:	f000 f930 	bl	800bab6 <USBD_CtlSendStatus>
 800b856:	e7e6      	b.n	800b826 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f7ff fe12 	bl	800b484 <USBD_CtlError>
 800b860:	e7e1      	b.n	800b826 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800b862:	4621      	mov	r1, r4
 800b864:	4628      	mov	r0, r5
 800b866:	f7ff fe0d 	bl	800b484 <USBD_CtlError>
          break;
 800b86a:	e7dc      	b.n	800b826 <USBD_StdItfReq+0x1a>

0800b86c <USBD_StdEPReq>:
{
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b870:	780b      	ldrb	r3, [r1, #0]
 800b872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b876:	2b20      	cmp	r3, #32
 800b878:	d005      	beq.n	800b886 <USBD_StdEPReq+0x1a>
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d003      	beq.n	800b886 <USBD_StdEPReq+0x1a>
 800b87e:	b14b      	cbz	r3, 800b894 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 800b880:	f7ff fe00 	bl	800b484 <USBD_CtlError>
      break;
 800b884:	e004      	b.n	800b890 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 800b886:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	4620      	mov	r0, r4
 800b88e:	4798      	blx	r3
}
 800b890:	2000      	movs	r0, #0
 800b892:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 800b894:	888a      	ldrh	r2, [r1, #4]
 800b896:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 800b898:	784b      	ldrb	r3, [r1, #1]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d031      	beq.n	800b902 <USBD_StdEPReq+0x96>
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d005      	beq.n	800b8ae <USBD_StdEPReq+0x42>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d056      	beq.n	800b954 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f7ff fdec 	bl	800b484 <USBD_CtlError>
          break;
 800b8ac:	e7f0      	b.n	800b890 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800b8ae:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d005      	beq.n	800b8c2 <USBD_StdEPReq+0x56>
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d013      	beq.n	800b8e2 <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f7ff fde2 	bl	800b484 <USBD_CtlError>
              break;
 800b8c0:	e7e6      	b.n	800b890 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8c2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800b8c6:	d008      	beq.n	800b8da <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fab9 	bl	800be42 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8d0:	2180      	movs	r1, #128	; 0x80
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fab5 	bl	800be42 <USBD_LL_StallEP>
 800b8d8:	e7da      	b.n	800b890 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7ff fdd2 	bl	800b484 <USBD_CtlError>
 800b8e0:	e7d6      	b.n	800b890 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8e2:	884b      	ldrh	r3, [r1, #2]
 800b8e4:	b923      	cbnz	r3, 800b8f0 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 800b8e6:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800b8ea:	d001      	beq.n	800b8f0 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8ec:	88cb      	ldrh	r3, [r1, #6]
 800b8ee:	b11b      	cbz	r3, 800b8f8 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 f8e0 	bl	800bab6 <USBD_CtlSendStatus>
              break;
 800b8f6:	e7cb      	b.n	800b890 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 faa1 	bl	800be42 <USBD_LL_StallEP>
 800b900:	e7f6      	b.n	800b8f0 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 800b902:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b906:	2b02      	cmp	r3, #2
 800b908:	d005      	beq.n	800b916 <USBD_StdEPReq+0xaa>
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	d013      	beq.n	800b936 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff fdb8 	bl	800b484 <USBD_CtlError>
              break;
 800b914:	e7bc      	b.n	800b890 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b916:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800b91a:	d008      	beq.n	800b92e <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 800b91c:	4601      	mov	r1, r0
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 fa8f 	bl	800be42 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b924:	2180      	movs	r1, #128	; 0x80
 800b926:	4620      	mov	r0, r4
 800b928:	f000 fa8b 	bl	800be42 <USBD_LL_StallEP>
 800b92c:	e7b0      	b.n	800b890 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 800b92e:	4620      	mov	r0, r4
 800b930:	f7ff fda8 	bl	800b484 <USBD_CtlError>
 800b934:	e7ac      	b.n	800b890 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b936:	884b      	ldrh	r3, [r1, #2]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1a9      	bne.n	800b890 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 800b93c:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800b940:	d103      	bne.n	800b94a <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f8b7 	bl	800bab6 <USBD_CtlSendStatus>
 800b948:	e7a2      	b.n	800b890 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b94a:	4601      	mov	r1, r0
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 fa80 	bl	800be52 <USBD_LL_ClearStallEP>
 800b952:	e7f6      	b.n	800b942 <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 800b954:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d005      	beq.n	800b968 <USBD_StdEPReq+0xfc>
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d018      	beq.n	800b992 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff fd8f 	bl	800b484 <USBD_CtlError>
              break;
 800b966:	e793      	b.n	800b890 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b968:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800b96c:	d003      	beq.n	800b976 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 800b96e:	4620      	mov	r0, r4
 800b970:	f7ff fd88 	bl	800b484 <USBD_CtlError>
                break;
 800b974:	e78c      	b.n	800b890 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b976:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b97a:	bf14      	ite	ne
 800b97c:	f104 0114 	addne.w	r1, r4, #20
 800b980:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800b984:	2300      	movs	r3, #0
 800b986:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b988:	2202      	movs	r2, #2
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f867 	bl	800ba5e <USBD_CtlSendData>
              break;
 800b990:	e77e      	b.n	800b890 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 800b992:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b996:	d11b      	bne.n	800b9d0 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b998:	f000 030f 	and.w	r3, r0, #15
 800b99c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b9a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b9a8:	b333      	cbz	r3, 800b9f8 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9aa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b9b2:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800b9b6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9ba:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800b9be:	d11f      	bne.n	800ba00 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 f848 	bl	800ba5e <USBD_CtlSendData>
              break;
 800b9ce:	e75f      	b.n	800b890 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9d0:	f000 030f 	and.w	r3, r0, #15
 800b9d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b9d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	b13b      	cbz	r3, 800b9f0 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9e0:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b9ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b9ee:	e7e4      	b.n	800b9ba <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7ff fd47 	bl	800b484 <USBD_CtlError>
                  break;
 800b9f6:	e74b      	b.n	800b890 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f7ff fd43 	bl	800b484 <USBD_CtlError>
                  break;
 800b9fe:	e747      	b.n	800b890 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ba00:	4601      	mov	r1, r0
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fa2d 	bl	800be62 <USBD_LL_IsStallEP>
 800ba08:	b110      	cbz	r0, 800ba10 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	602b      	str	r3, [r5, #0]
 800ba0e:	e7d9      	b.n	800b9c4 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	602b      	str	r3, [r5, #0]
 800ba14:	e7d6      	b.n	800b9c4 <USBD_StdEPReq+0x158>

0800ba16 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800ba16:	b308      	cbz	r0, 800ba5c <USBD_GetString+0x46>
{
 800ba18:	b470      	push	{r4, r5, r6}
 800ba1a:	4604      	mov	r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800ba1c:	7803      	ldrb	r3, [r0, #0]
 800ba1e:	b13b      	cbz	r3, 800ba30 <USBD_GetString+0x1a>
 800ba20:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 800ba24:	1983      	adds	r3, r0, r6
 800ba26:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 800ba28:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ba2c:	2d00      	cmp	r5, #0
 800ba2e:	d1f9      	bne.n	800ba24 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba30:	3301      	adds	r3, #1
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba36:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800ba3c:	7820      	ldrb	r0, [r4, #0]
 800ba3e:	b158      	cbz	r0, 800ba58 <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba40:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800ba42:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800ba50:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d1f5      	bne.n	800ba44 <USBD_GetString+0x2e>
}
 800ba58:	bc70      	pop	{r4, r5, r6}
 800ba5a:	4770      	bx	lr
 800ba5c:	4770      	bx	lr

0800ba5e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba62:	2202      	movs	r2, #2
 800ba64:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba68:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800ba6a:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba6c:	460a      	mov	r2, r1
 800ba6e:	2100      	movs	r1, #0
 800ba70:	f000 fa16 	bl	800bea0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ba74:	2000      	movs	r0, #0
 800ba76:	bd10      	pop	{r4, pc}

0800ba78 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ba78:	b508      	push	{r3, lr}
 800ba7a:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba7c:	460a      	mov	r2, r1
 800ba7e:	2100      	movs	r1, #0
 800ba80:	f000 fa0e 	bl	800bea0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ba84:	2000      	movs	r0, #0
 800ba86:	bd08      	pop	{r3, pc}

0800ba88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba8c:	2203      	movs	r2, #3
 800ba8e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba92:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ba96:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba9a:	460a      	mov	r2, r1
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f000 fa07 	bl	800beb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800baa2:	2000      	movs	r0, #0
 800baa4:	bd10      	pop	{r4, pc}

0800baa6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800baa6:	b508      	push	{r3, lr}
 800baa8:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800baaa:	460a      	mov	r2, r1
 800baac:	2100      	movs	r1, #0
 800baae:	f000 f9ff 	bl	800beb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bab2:	2000      	movs	r0, #0
 800bab4:	bd08      	pop	{r3, pc}

0800bab6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bab6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bab8:	2304      	movs	r3, #4
 800baba:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800babe:	2300      	movs	r3, #0
 800bac0:	461a      	mov	r2, r3
 800bac2:	4619      	mov	r1, r3
 800bac4:	f000 f9ec 	bl	800bea0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800bac8:	2000      	movs	r0, #0
 800baca:	bd08      	pop	{r3, pc}

0800bacc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bacc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bace:	2305      	movs	r3, #5
 800bad0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bad4:	2300      	movs	r3, #0
 800bad6:	461a      	mov	r2, r3
 800bad8:	4619      	mov	r1, r3
 800bada:	f000 f9e9 	bl	800beb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bade:	2000      	movs	r0, #0
 800bae0:	bd08      	pop	{r3, pc}
	...

0800bae4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bae4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bae6:	2200      	movs	r2, #0
 800bae8:	490f      	ldr	r1, [pc, #60]	; (800bb28 <MX_USB_DEVICE_Init+0x44>)
 800baea:	4810      	ldr	r0, [pc, #64]	; (800bb2c <MX_USB_DEVICE_Init+0x48>)
 800baec:	f7ff fb5c 	bl	800b1a8 <USBD_Init>
 800baf0:	b970      	cbnz	r0, 800bb10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800baf2:	490f      	ldr	r1, [pc, #60]	; (800bb30 <MX_USB_DEVICE_Init+0x4c>)
 800baf4:	480d      	ldr	r0, [pc, #52]	; (800bb2c <MX_USB_DEVICE_Init+0x48>)
 800baf6:	f7ff fb6e 	bl	800b1d6 <USBD_RegisterClass>
 800bafa:	b960      	cbnz	r0, 800bb16 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bafc:	490d      	ldr	r1, [pc, #52]	; (800bb34 <MX_USB_DEVICE_Init+0x50>)
 800bafe:	480b      	ldr	r0, [pc, #44]	; (800bb2c <MX_USB_DEVICE_Init+0x48>)
 800bb00:	f7ff fb0a 	bl	800b118 <USBD_CDC_RegisterInterface>
 800bb04:	b950      	cbnz	r0, 800bb1c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb06:	4809      	ldr	r0, [pc, #36]	; (800bb2c <MX_USB_DEVICE_Init+0x48>)
 800bb08:	f7ff fb6c 	bl	800b1e4 <USBD_Start>
 800bb0c:	b948      	cbnz	r0, 800bb22 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb0e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800bb10:	f7fa fefc 	bl	800690c <Error_Handler>
 800bb14:	e7ed      	b.n	800baf2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800bb16:	f7fa fef9 	bl	800690c <Error_Handler>
 800bb1a:	e7ef      	b.n	800bafc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800bb1c:	f7fa fef6 	bl	800690c <Error_Handler>
 800bb20:	e7f1      	b.n	800bb06 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800bb22:	f7fa fef3 	bl	800690c <Error_Handler>
}
 800bb26:	e7f2      	b.n	800bb0e <MX_USB_DEVICE_Init+0x2a>
 800bb28:	2000012c 	.word	0x2000012c
 800bb2c:	200006f8 	.word	0x200006f8
 800bb30:	2000000c 	.word	0x2000000c
 800bb34:	2000011c 	.word	0x2000011c

0800bb38 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800bb38:	2000      	movs	r0, #0
 800bb3a:	4770      	bx	lr

0800bb3c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	4770      	bx	lr

0800bb40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb40:	b510      	push	{r4, lr}
 800bb42:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb44:	4c04      	ldr	r4, [pc, #16]	; (800bb58 <CDC_Receive_FS+0x18>)
 800bb46:	4620      	mov	r0, r4
 800bb48:	f7ff faf5 	bl	800b136 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7ff fb12 	bl	800b176 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800bb52:	2000      	movs	r0, #0
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	bf00      	nop
 800bb58:	200006f8 	.word	0x200006f8

0800bb5c <CDC_Init_FS>:
{
 800bb5c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb5e:	4c06      	ldr	r4, [pc, #24]	; (800bb78 <CDC_Init_FS+0x1c>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	4906      	ldr	r1, [pc, #24]	; (800bb7c <CDC_Init_FS+0x20>)
 800bb64:	4620      	mov	r0, r4
 800bb66:	f7ff fade 	bl	800b126 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb6a:	4905      	ldr	r1, [pc, #20]	; (800bb80 <CDC_Init_FS+0x24>)
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f7ff fae2 	bl	800b136 <USBD_CDC_SetRxBuffer>
}
 800bb72:	2000      	movs	r0, #0
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	bf00      	nop
 800bb78:	200006f8 	.word	0x200006f8
 800bb7c:	20000da4 	.word	0x20000da4
 800bb80:	200009bc 	.word	0x200009bc

0800bb84 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bb84:	4b09      	ldr	r3, [pc, #36]	; (800bbac <CDC_Transmit_FS+0x28>)
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800bb8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb8e:	b10b      	cbz	r3, 800bb94 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800bb90:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800bb92:	4770      	bx	lr
{
 800bb94:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bb96:	4c05      	ldr	r4, [pc, #20]	; (800bbac <CDC_Transmit_FS+0x28>)
 800bb98:	460a      	mov	r2, r1
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f7ff fac2 	bl	800b126 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bba2:	4620      	mov	r0, r4
 800bba4:	f7ff facd 	bl	800b142 <USBD_CDC_TransmitPacket>
}
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	bf00      	nop
 800bbac:	200006f8 	.word	0x200006f8

0800bbb0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbb0:	2312      	movs	r3, #18
 800bbb2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800bbb4:	4800      	ldr	r0, [pc, #0]	; (800bbb8 <USBD_FS_DeviceDescriptor+0x8>)
 800bbb6:	4770      	bx	lr
 800bbb8:	20000148 	.word	0x20000148

0800bbbc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbbc:	2304      	movs	r3, #4
 800bbbe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800bbc0:	4800      	ldr	r0, [pc, #0]	; (800bbc4 <USBD_FS_LangIDStrDescriptor+0x8>)
 800bbc2:	4770      	bx	lr
 800bbc4:	2000015c 	.word	0x2000015c

0800bbc8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800bbc8:	b1aa      	cbz	r2, 800bbf6 <IntToUnicode+0x2e>
{
 800bbca:	b470      	push	{r4, r5, r6}
 800bbcc:	4614      	mov	r4, r2
  for (idx = 0; idx < len; idx++)
 800bbce:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800bbd0:	1c4e      	adds	r6, r1, #1
 800bbd2:	461d      	mov	r5, r3
    if (((value >> 28)) < 0xA)
 800bbd4:	0f02      	lsrs	r2, r0, #28
 800bbd6:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbda:	bf34      	ite	cc
 800bbdc:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbde:	3237      	addcs	r2, #55	; 0x37
 800bbe0:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    value = value << 4;
 800bbe4:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800bbe6:	f806 5013 	strb.w	r5, [r6, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800bbea:	3301      	adds	r3, #1
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	42a2      	cmp	r2, r4
 800bbf0:	d3f0      	bcc.n	800bbd4 <IntToUnicode+0xc>
  }
}
 800bbf2:	bc70      	pop	{r4, r5, r6}
 800bbf4:	4770      	bx	lr
 800bbf6:	4770      	bx	lr

0800bbf8 <USBD_FS_SerialStrDescriptor>:
{
 800bbf8:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800bbfa:	231a      	movs	r3, #26
 800bbfc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbfe:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <USBD_FS_SerialStrDescriptor+0x34>)
 800bc00:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc02:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800bc04:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800bc06:	18c0      	adds	r0, r0, r3
 800bc08:	d101      	bne.n	800bc0e <USBD_FS_SerialStrDescriptor+0x16>
}
 800bc0a:	4809      	ldr	r0, [pc, #36]	; (800bc30 <USBD_FS_SerialStrDescriptor+0x38>)
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc0e:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <USBD_FS_SerialStrDescriptor+0x3c>)
 800bc10:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc12:	4c07      	ldr	r4, [pc, #28]	; (800bc30 <USBD_FS_SerialStrDescriptor+0x38>)
 800bc14:	2208      	movs	r2, #8
 800bc16:	1ca1      	adds	r1, r4, #2
 800bc18:	f7ff ffd6 	bl	800bbc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc1c:	2204      	movs	r2, #4
 800bc1e:	f104 0112 	add.w	r1, r4, #18
 800bc22:	4628      	mov	r0, r5
 800bc24:	f7ff ffd0 	bl	800bbc8 <IntToUnicode>
 800bc28:	e7ef      	b.n	800bc0a <USBD_FS_SerialStrDescriptor+0x12>
 800bc2a:	bf00      	nop
 800bc2c:	1ffff7e8 	.word	0x1ffff7e8
 800bc30:	20000160 	.word	0x20000160
 800bc34:	1ffff7ec 	.word	0x1ffff7ec

0800bc38 <USBD_FS_ProductStrDescriptor>:
{
 800bc38:	b508      	push	{r3, lr}
 800bc3a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc3c:	4902      	ldr	r1, [pc, #8]	; (800bc48 <USBD_FS_ProductStrDescriptor+0x10>)
 800bc3e:	4803      	ldr	r0, [pc, #12]	; (800bc4c <USBD_FS_ProductStrDescriptor+0x14>)
 800bc40:	f7ff fee9 	bl	800ba16 <USBD_GetString>
}
 800bc44:	4800      	ldr	r0, [pc, #0]	; (800bc48 <USBD_FS_ProductStrDescriptor+0x10>)
 800bc46:	bd08      	pop	{r3, pc}
 800bc48:	2000118c 	.word	0x2000118c
 800bc4c:	0800cc28 	.word	0x0800cc28

0800bc50 <USBD_FS_ManufacturerStrDescriptor>:
{
 800bc50:	b510      	push	{r4, lr}
 800bc52:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc54:	4c03      	ldr	r4, [pc, #12]	; (800bc64 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800bc56:	4621      	mov	r1, r4
 800bc58:	4803      	ldr	r0, [pc, #12]	; (800bc68 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800bc5a:	f7ff fedc 	bl	800ba16 <USBD_GetString>
}
 800bc5e:	4620      	mov	r0, r4
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop
 800bc64:	2000118c 	.word	0x2000118c
 800bc68:	0800cc40 	.word	0x0800cc40

0800bc6c <USBD_FS_ConfigStrDescriptor>:
{
 800bc6c:	b508      	push	{r3, lr}
 800bc6e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc70:	4902      	ldr	r1, [pc, #8]	; (800bc7c <USBD_FS_ConfigStrDescriptor+0x10>)
 800bc72:	4803      	ldr	r0, [pc, #12]	; (800bc80 <USBD_FS_ConfigStrDescriptor+0x14>)
 800bc74:	f7ff fecf 	bl	800ba16 <USBD_GetString>
}
 800bc78:	4800      	ldr	r0, [pc, #0]	; (800bc7c <USBD_FS_ConfigStrDescriptor+0x10>)
 800bc7a:	bd08      	pop	{r3, pc}
 800bc7c:	2000118c 	.word	0x2000118c
 800bc80:	0800cc54 	.word	0x0800cc54

0800bc84 <USBD_FS_InterfaceStrDescriptor>:
{
 800bc84:	b508      	push	{r3, lr}
 800bc86:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc88:	4902      	ldr	r1, [pc, #8]	; (800bc94 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800bc8a:	4803      	ldr	r0, [pc, #12]	; (800bc98 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800bc8c:	f7ff fec3 	bl	800ba16 <USBD_GetString>
}
 800bc90:	4800      	ldr	r0, [pc, #0]	; (800bc94 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800bc92:	bd08      	pop	{r3, pc}
 800bc94:	2000118c 	.word	0x2000118c
 800bc98:	0800cc60 	.word	0x0800cc60

0800bc9c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800bc9c:	b120      	cbz	r0, 800bca8 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc9e:	2802      	cmp	r0, #2
 800bca0:	bf14      	ite	ne
 800bca2:	2002      	movne	r0, #2
 800bca4:	2001      	moveq	r0, #1
 800bca6:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800bca8:	4770      	bx	lr
	...

0800bcac <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800bcac:	6802      	ldr	r2, [r0, #0]
 800bcae:	4b0e      	ldr	r3, [pc, #56]	; (800bce8 <HAL_PCD_MspInit+0x3c>)
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d000      	beq.n	800bcb6 <HAL_PCD_MspInit+0xa>
 800bcb4:	4770      	bx	lr
{
 800bcb6:	b500      	push	{lr}
 800bcb8:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800bcba:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800bcbe:	69da      	ldr	r2, [r3, #28]
 800bcc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bcc4:	61da      	str	r2, [r3, #28]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	2014      	movs	r0, #20
 800bcd6:	f7fb fbf1 	bl	80074bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bcda:	2014      	movs	r0, #20
 800bcdc:	f7fb fc20 	bl	8007520 <HAL_NVIC_EnableIRQ>
}
 800bce0:	b003      	add	sp, #12
 800bce2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bce6:	bf00      	nop
 800bce8:	40005c00 	.word	0x40005c00

0800bcec <HAL_PCD_SetupStageCallback>:
{
 800bcec:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcee:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800bcf2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800bcf6:	f7ff fa8d 	bl	800b214 <USBD_LL_SetupStage>
}
 800bcfa:	bd08      	pop	{r3, pc}

0800bcfc <HAL_PCD_DataOutStageCallback>:
{
 800bcfc:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcfe:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800bd02:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bd06:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800bd0a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800bd0e:	f7ff faae 	bl	800b26e <USBD_LL_DataOutStage>
}
 800bd12:	bd08      	pop	{r3, pc}

0800bd14 <HAL_PCD_DataInStageCallback>:
{
 800bd14:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd16:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800bd1a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bd1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd20:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800bd24:	f7ff fae7 	bl	800b2f6 <USBD_LL_DataInStage>
}
 800bd28:	bd08      	pop	{r3, pc}

0800bd2a <HAL_PCD_SOFCallback>:
{
 800bd2a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd2c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800bd30:	f7ff fb86 	bl	800b440 <USBD_LL_SOF>
}
 800bd34:	bd08      	pop	{r3, pc}

0800bd36 <HAL_PCD_ResetCallback>:
{
 800bd36:	b510      	push	{r4, lr}
 800bd38:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bd3a:	6883      	ldr	r3, [r0, #8]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d109      	bne.n	800bd54 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd40:	2101      	movs	r1, #1
 800bd42:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800bd46:	f7ff fb65 	bl	800b414 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd4a:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800bd4e:	f7ff fb39 	bl	800b3c4 <USBD_LL_Reset>
}
 800bd52:	bd10      	pop	{r4, pc}
    Error_Handler();
 800bd54:	f7fa fdda 	bl	800690c <Error_Handler>
 800bd58:	e7f2      	b.n	800bd40 <HAL_PCD_ResetCallback+0xa>
	...

0800bd5c <HAL_PCD_SuspendCallback>:
{
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd60:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800bd64:	f7ff fb59 	bl	800b41a <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800bd68:	69a3      	ldr	r3, [r4, #24]
 800bd6a:	b123      	cbz	r3, 800bd76 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd6c:	4a02      	ldr	r2, [pc, #8]	; (800bd78 <HAL_PCD_SuspendCallback+0x1c>)
 800bd6e:	6913      	ldr	r3, [r2, #16]
 800bd70:	f043 0306 	orr.w	r3, r3, #6
 800bd74:	6113      	str	r3, [r2, #16]
}
 800bd76:	bd10      	pop	{r4, pc}
 800bd78:	e000ed00 	.word	0xe000ed00

0800bd7c <HAL_PCD_ResumeCallback>:
{
 800bd7c:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd7e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800bd82:	f7ff fb53 	bl	800b42c <USBD_LL_Resume>
}
 800bd86:	bd08      	pop	{r3, pc}

0800bd88 <USBD_LL_Init>:
{
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800bd8c:	481d      	ldr	r0, [pc, #116]	; (800be04 <USBD_LL_Init+0x7c>)
 800bd8e:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bd92:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800bd96:	4b1c      	ldr	r3, [pc, #112]	; (800be08 <USBD_LL_Init+0x80>)
 800bd98:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bd9a:	2308      	movs	r3, #8
 800bd9c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bd9e:	2302      	movs	r3, #2
 800bda0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bda2:	2300      	movs	r3, #0
 800bda4:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bda6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bda8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bdaa:	f7fb ff59 	bl	8007c60 <HAL_PCD_Init>
 800bdae:	bb30      	cbnz	r0, 800bdfe <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bdb0:	2318      	movs	r3, #24
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800bdba:	f7fc ff41 	bl	8008c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bdbe:	2358      	movs	r3, #88	; 0x58
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2180      	movs	r1, #128	; 0x80
 800bdc4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800bdc8:	f7fc ff3a 	bl	8008c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bdcc:	23c0      	movs	r3, #192	; 0xc0
 800bdce:	2200      	movs	r2, #0
 800bdd0:	2181      	movs	r1, #129	; 0x81
 800bdd2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800bdd6:	f7fc ff33 	bl	8008c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bdda:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bdde:	2200      	movs	r2, #0
 800bde0:	2101      	movs	r1, #1
 800bde2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800bde6:	f7fc ff2b 	bl	8008c40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bdea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2182      	movs	r1, #130	; 0x82
 800bdf2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800bdf6:	f7fc ff23 	bl	8008c40 <HAL_PCDEx_PMAConfig>
}
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800bdfe:	f7fa fd85 	bl	800690c <Error_Handler>
 800be02:	e7d5      	b.n	800bdb0 <USBD_LL_Init+0x28>
 800be04:	2000138c 	.word	0x2000138c
 800be08:	40005c00 	.word	0x40005c00

0800be0c <USBD_LL_Start>:
{
 800be0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800be0e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800be12:	f7fb ffa6 	bl	8007d62 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800be16:	f7ff ff41 	bl	800bc9c <USBD_Get_USB_Status>
}
 800be1a:	bd08      	pop	{r3, pc}

0800be1c <USBD_LL_OpenEP>:
{
 800be1c:	b510      	push	{r4, lr}
 800be1e:	4614      	mov	r4, r2
 800be20:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be22:	4623      	mov	r3, r4
 800be24:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800be28:	f7fc fde6 	bl	80089f8 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800be2c:	f7ff ff36 	bl	800bc9c <USBD_Get_USB_Status>
}
 800be30:	bd10      	pop	{r4, pc}

0800be32 <USBD_LL_CloseEP>:
{
 800be32:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be34:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800be38:	f7fc fe16 	bl	8008a68 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800be3c:	f7ff ff2e 	bl	800bc9c <USBD_Get_USB_Status>
}
 800be40:	bd08      	pop	{r3, pc}

0800be42 <USBD_LL_StallEP>:
{
 800be42:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be44:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800be48:	f7fc fe83 	bl	8008b52 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800be4c:	f7ff ff26 	bl	800bc9c <USBD_Get_USB_Status>
}
 800be50:	bd08      	pop	{r3, pc}

0800be52 <USBD_LL_ClearStallEP>:
{
 800be52:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be54:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800be58:	f7fc feb7 	bl	8008bca <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800be5c:	f7ff ff1e 	bl	800bc9c <USBD_Get_USB_Status>
}
 800be60:	bd08      	pop	{r3, pc}

0800be62 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be62:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800be66:	f011 0f80 	tst.w	r1, #128	; 0x80
 800be6a:	d108      	bne.n	800be7e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be6c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800be70:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be74:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800be78:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800be7c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be7e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800be82:	3101      	adds	r1, #1
 800be84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be88:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800be8c:	7888      	ldrb	r0, [r1, #2]
 800be8e:	4770      	bx	lr

0800be90 <USBD_LL_SetUSBAddress>:
{
 800be90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be92:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800be96:	f7fb ff7d 	bl	8007d94 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800be9a:	f7ff feff 	bl	800bc9c <USBD_Get_USB_Status>
}
 800be9e:	bd08      	pop	{r3, pc}

0800bea0 <USBD_LL_Transmit>:
{
 800bea0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bea2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800bea6:	f7fc fe37 	bl	8008b18 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800beaa:	f7ff fef7 	bl	800bc9c <USBD_Get_USB_Status>
}
 800beae:	bd08      	pop	{r3, pc}

0800beb0 <USBD_LL_PrepareReceive>:
{
 800beb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800beb2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800beb6:	f7fc fe09 	bl	8008acc <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800beba:	f7ff feef 	bl	800bc9c <USBD_Get_USB_Status>
}
 800bebe:	bd08      	pop	{r3, pc}

0800bec0 <USBD_LL_GetRxDataSize>:
{
 800bec0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bec2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800bec6:	f7fc fe1e 	bl	8008b06 <HAL_PCD_EP_GetRxCount>
}
 800beca:	bd08      	pop	{r3, pc}

0800becc <USBD_static_malloc>:
}
 800becc:	4800      	ldr	r0, [pc, #0]	; (800bed0 <USBD_static_malloc+0x4>)
 800bece:	4770      	bx	lr
 800bed0:	20000208 	.word	0x20000208

0800bed4 <USBD_static_free>:
}
 800bed4:	4770      	bx	lr

0800bed6 <HAL_PCDEx_SetConnectionState>:
}
 800bed6:	4770      	bx	lr

0800bed8 <__errno>:
 800bed8:	4b01      	ldr	r3, [pc, #4]	; (800bee0 <__errno+0x8>)
 800beda:	6818      	ldr	r0, [r3, #0]
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	2000017c 	.word	0x2000017c

0800bee4 <__libc_init_array>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	2600      	movs	r6, #0
 800bee8:	4d0c      	ldr	r5, [pc, #48]	; (800bf1c <__libc_init_array+0x38>)
 800beea:	4c0d      	ldr	r4, [pc, #52]	; (800bf20 <__libc_init_array+0x3c>)
 800beec:	1b64      	subs	r4, r4, r5
 800beee:	10a4      	asrs	r4, r4, #2
 800bef0:	42a6      	cmp	r6, r4
 800bef2:	d109      	bne.n	800bf08 <__libc_init_array+0x24>
 800bef4:	f000 fe48 	bl	800cb88 <_init>
 800bef8:	2600      	movs	r6, #0
 800befa:	4d0a      	ldr	r5, [pc, #40]	; (800bf24 <__libc_init_array+0x40>)
 800befc:	4c0a      	ldr	r4, [pc, #40]	; (800bf28 <__libc_init_array+0x44>)
 800befe:	1b64      	subs	r4, r4, r5
 800bf00:	10a4      	asrs	r4, r4, #2
 800bf02:	42a6      	cmp	r6, r4
 800bf04:	d105      	bne.n	800bf12 <__libc_init_array+0x2e>
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf0c:	4798      	blx	r3
 800bf0e:	3601      	adds	r6, #1
 800bf10:	e7ee      	b.n	800bef0 <__libc_init_array+0xc>
 800bf12:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf16:	4798      	blx	r3
 800bf18:	3601      	adds	r6, #1
 800bf1a:	e7f2      	b.n	800bf02 <__libc_init_array+0x1e>
 800bf1c:	0800cca4 	.word	0x0800cca4
 800bf20:	0800cca4 	.word	0x0800cca4
 800bf24:	0800cca4 	.word	0x0800cca4
 800bf28:	0800cca8 	.word	0x0800cca8

0800bf2c <siprintf>:
 800bf2c:	b40e      	push	{r1, r2, r3}
 800bf2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf32:	b500      	push	{lr}
 800bf34:	b09c      	sub	sp, #112	; 0x70
 800bf36:	ab1d      	add	r3, sp, #116	; 0x74
 800bf38:	9002      	str	r0, [sp, #8]
 800bf3a:	9006      	str	r0, [sp, #24]
 800bf3c:	9107      	str	r1, [sp, #28]
 800bf3e:	9104      	str	r1, [sp, #16]
 800bf40:	4808      	ldr	r0, [pc, #32]	; (800bf64 <siprintf+0x38>)
 800bf42:	4909      	ldr	r1, [pc, #36]	; (800bf68 <siprintf+0x3c>)
 800bf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf48:	9105      	str	r1, [sp, #20]
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	a902      	add	r1, sp, #8
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	f000 f868 	bl	800c024 <_svfiprintf_r>
 800bf54:	2200      	movs	r2, #0
 800bf56:	9b02      	ldr	r3, [sp, #8]
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	b01c      	add	sp, #112	; 0x70
 800bf5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf60:	b003      	add	sp, #12
 800bf62:	4770      	bx	lr
 800bf64:	2000017c 	.word	0x2000017c
 800bf68:	ffff0208 	.word	0xffff0208

0800bf6c <__ssputs_r>:
 800bf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf70:	688e      	ldr	r6, [r1, #8]
 800bf72:	4682      	mov	sl, r0
 800bf74:	429e      	cmp	r6, r3
 800bf76:	460c      	mov	r4, r1
 800bf78:	4690      	mov	r8, r2
 800bf7a:	461f      	mov	r7, r3
 800bf7c:	d838      	bhi.n	800bff0 <__ssputs_r+0x84>
 800bf7e:	898a      	ldrh	r2, [r1, #12]
 800bf80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf84:	d032      	beq.n	800bfec <__ssputs_r+0x80>
 800bf86:	6825      	ldr	r5, [r4, #0]
 800bf88:	6909      	ldr	r1, [r1, #16]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	eba5 0901 	sub.w	r9, r5, r1
 800bf90:	6965      	ldr	r5, [r4, #20]
 800bf92:	444b      	add	r3, r9
 800bf94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf9c:	106d      	asrs	r5, r5, #1
 800bf9e:	429d      	cmp	r5, r3
 800bfa0:	bf38      	it	cc
 800bfa2:	461d      	movcc	r5, r3
 800bfa4:	0553      	lsls	r3, r2, #21
 800bfa6:	d531      	bpl.n	800c00c <__ssputs_r+0xa0>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	f000 fb53 	bl	800c654 <_malloc_r>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	b950      	cbnz	r0, 800bfc8 <__ssputs_r+0x5c>
 800bfb2:	230c      	movs	r3, #12
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb8:	f8ca 3000 	str.w	r3, [sl]
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc2:	81a3      	strh	r3, [r4, #12]
 800bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc8:	464a      	mov	r2, r9
 800bfca:	6921      	ldr	r1, [r4, #16]
 800bfcc:	f000 face 	bl	800c56c <memcpy>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	6126      	str	r6, [r4, #16]
 800bfde:	444e      	add	r6, r9
 800bfe0:	6026      	str	r6, [r4, #0]
 800bfe2:	463e      	mov	r6, r7
 800bfe4:	6165      	str	r5, [r4, #20]
 800bfe6:	eba5 0509 	sub.w	r5, r5, r9
 800bfea:	60a5      	str	r5, [r4, #8]
 800bfec:	42be      	cmp	r6, r7
 800bfee:	d900      	bls.n	800bff2 <__ssputs_r+0x86>
 800bff0:	463e      	mov	r6, r7
 800bff2:	4632      	mov	r2, r6
 800bff4:	4641      	mov	r1, r8
 800bff6:	6820      	ldr	r0, [r4, #0]
 800bff8:	f000 fac6 	bl	800c588 <memmove>
 800bffc:	68a3      	ldr	r3, [r4, #8]
 800bffe:	6822      	ldr	r2, [r4, #0]
 800c000:	1b9b      	subs	r3, r3, r6
 800c002:	4432      	add	r2, r6
 800c004:	2000      	movs	r0, #0
 800c006:	60a3      	str	r3, [r4, #8]
 800c008:	6022      	str	r2, [r4, #0]
 800c00a:	e7db      	b.n	800bfc4 <__ssputs_r+0x58>
 800c00c:	462a      	mov	r2, r5
 800c00e:	f000 fb7b 	bl	800c708 <_realloc_r>
 800c012:	4606      	mov	r6, r0
 800c014:	2800      	cmp	r0, #0
 800c016:	d1e1      	bne.n	800bfdc <__ssputs_r+0x70>
 800c018:	4650      	mov	r0, sl
 800c01a:	6921      	ldr	r1, [r4, #16]
 800c01c:	f000 face 	bl	800c5bc <_free_r>
 800c020:	e7c7      	b.n	800bfb2 <__ssputs_r+0x46>
	...

0800c024 <_svfiprintf_r>:
 800c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	4698      	mov	r8, r3
 800c02a:	898b      	ldrh	r3, [r1, #12]
 800c02c:	4607      	mov	r7, r0
 800c02e:	061b      	lsls	r3, r3, #24
 800c030:	460d      	mov	r5, r1
 800c032:	4614      	mov	r4, r2
 800c034:	b09d      	sub	sp, #116	; 0x74
 800c036:	d50e      	bpl.n	800c056 <_svfiprintf_r+0x32>
 800c038:	690b      	ldr	r3, [r1, #16]
 800c03a:	b963      	cbnz	r3, 800c056 <_svfiprintf_r+0x32>
 800c03c:	2140      	movs	r1, #64	; 0x40
 800c03e:	f000 fb09 	bl	800c654 <_malloc_r>
 800c042:	6028      	str	r0, [r5, #0]
 800c044:	6128      	str	r0, [r5, #16]
 800c046:	b920      	cbnz	r0, 800c052 <_svfiprintf_r+0x2e>
 800c048:	230c      	movs	r3, #12
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	e0d1      	b.n	800c1f6 <_svfiprintf_r+0x1d2>
 800c052:	2340      	movs	r3, #64	; 0x40
 800c054:	616b      	str	r3, [r5, #20]
 800c056:	2300      	movs	r3, #0
 800c058:	9309      	str	r3, [sp, #36]	; 0x24
 800c05a:	2320      	movs	r3, #32
 800c05c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c060:	2330      	movs	r3, #48	; 0x30
 800c062:	f04f 0901 	mov.w	r9, #1
 800c066:	f8cd 800c 	str.w	r8, [sp, #12]
 800c06a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c210 <_svfiprintf_r+0x1ec>
 800c06e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c072:	4623      	mov	r3, r4
 800c074:	469a      	mov	sl, r3
 800c076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c07a:	b10a      	cbz	r2, 800c080 <_svfiprintf_r+0x5c>
 800c07c:	2a25      	cmp	r2, #37	; 0x25
 800c07e:	d1f9      	bne.n	800c074 <_svfiprintf_r+0x50>
 800c080:	ebba 0b04 	subs.w	fp, sl, r4
 800c084:	d00b      	beq.n	800c09e <_svfiprintf_r+0x7a>
 800c086:	465b      	mov	r3, fp
 800c088:	4622      	mov	r2, r4
 800c08a:	4629      	mov	r1, r5
 800c08c:	4638      	mov	r0, r7
 800c08e:	f7ff ff6d 	bl	800bf6c <__ssputs_r>
 800c092:	3001      	adds	r0, #1
 800c094:	f000 80aa 	beq.w	800c1ec <_svfiprintf_r+0x1c8>
 800c098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c09a:	445a      	add	r2, fp
 800c09c:	9209      	str	r2, [sp, #36]	; 0x24
 800c09e:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 80a2 	beq.w	800c1ec <_svfiprintf_r+0x1c8>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b2:	f10a 0a01 	add.w	sl, sl, #1
 800c0b6:	9304      	str	r3, [sp, #16]
 800c0b8:	9307      	str	r3, [sp, #28]
 800c0ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0be:	931a      	str	r3, [sp, #104]	; 0x68
 800c0c0:	4654      	mov	r4, sl
 800c0c2:	2205      	movs	r2, #5
 800c0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c8:	4851      	ldr	r0, [pc, #324]	; (800c210 <_svfiprintf_r+0x1ec>)
 800c0ca:	f000 fa41 	bl	800c550 <memchr>
 800c0ce:	9a04      	ldr	r2, [sp, #16]
 800c0d0:	b9d8      	cbnz	r0, 800c10a <_svfiprintf_r+0xe6>
 800c0d2:	06d0      	lsls	r0, r2, #27
 800c0d4:	bf44      	itt	mi
 800c0d6:	2320      	movmi	r3, #32
 800c0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0dc:	0711      	lsls	r1, r2, #28
 800c0de:	bf44      	itt	mi
 800c0e0:	232b      	movmi	r3, #43	; 0x2b
 800c0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ec:	d015      	beq.n	800c11a <_svfiprintf_r+0xf6>
 800c0ee:	4654      	mov	r4, sl
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f04f 0c0a 	mov.w	ip, #10
 800c0f6:	9a07      	ldr	r2, [sp, #28]
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0fe:	3b30      	subs	r3, #48	; 0x30
 800c100:	2b09      	cmp	r3, #9
 800c102:	d94e      	bls.n	800c1a2 <_svfiprintf_r+0x17e>
 800c104:	b1b0      	cbz	r0, 800c134 <_svfiprintf_r+0x110>
 800c106:	9207      	str	r2, [sp, #28]
 800c108:	e014      	b.n	800c134 <_svfiprintf_r+0x110>
 800c10a:	eba0 0308 	sub.w	r3, r0, r8
 800c10e:	fa09 f303 	lsl.w	r3, r9, r3
 800c112:	4313      	orrs	r3, r2
 800c114:	46a2      	mov	sl, r4
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	e7d2      	b.n	800c0c0 <_svfiprintf_r+0x9c>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	1d19      	adds	r1, r3, #4
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	9103      	str	r1, [sp, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	bfbb      	ittet	lt
 800c126:	425b      	neglt	r3, r3
 800c128:	f042 0202 	orrlt.w	r2, r2, #2
 800c12c:	9307      	strge	r3, [sp, #28]
 800c12e:	9307      	strlt	r3, [sp, #28]
 800c130:	bfb8      	it	lt
 800c132:	9204      	strlt	r2, [sp, #16]
 800c134:	7823      	ldrb	r3, [r4, #0]
 800c136:	2b2e      	cmp	r3, #46	; 0x2e
 800c138:	d10c      	bne.n	800c154 <_svfiprintf_r+0x130>
 800c13a:	7863      	ldrb	r3, [r4, #1]
 800c13c:	2b2a      	cmp	r3, #42	; 0x2a
 800c13e:	d135      	bne.n	800c1ac <_svfiprintf_r+0x188>
 800c140:	9b03      	ldr	r3, [sp, #12]
 800c142:	3402      	adds	r4, #2
 800c144:	1d1a      	adds	r2, r3, #4
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	9203      	str	r2, [sp, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	bfb8      	it	lt
 800c14e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c152:	9305      	str	r3, [sp, #20]
 800c154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c220 <_svfiprintf_r+0x1fc>
 800c158:	2203      	movs	r2, #3
 800c15a:	4650      	mov	r0, sl
 800c15c:	7821      	ldrb	r1, [r4, #0]
 800c15e:	f000 f9f7 	bl	800c550 <memchr>
 800c162:	b140      	cbz	r0, 800c176 <_svfiprintf_r+0x152>
 800c164:	2340      	movs	r3, #64	; 0x40
 800c166:	eba0 000a 	sub.w	r0, r0, sl
 800c16a:	fa03 f000 	lsl.w	r0, r3, r0
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	3401      	adds	r4, #1
 800c172:	4303      	orrs	r3, r0
 800c174:	9304      	str	r3, [sp, #16]
 800c176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17a:	2206      	movs	r2, #6
 800c17c:	4825      	ldr	r0, [pc, #148]	; (800c214 <_svfiprintf_r+0x1f0>)
 800c17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c182:	f000 f9e5 	bl	800c550 <memchr>
 800c186:	2800      	cmp	r0, #0
 800c188:	d038      	beq.n	800c1fc <_svfiprintf_r+0x1d8>
 800c18a:	4b23      	ldr	r3, [pc, #140]	; (800c218 <_svfiprintf_r+0x1f4>)
 800c18c:	bb1b      	cbnz	r3, 800c1d6 <_svfiprintf_r+0x1b2>
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	3307      	adds	r3, #7
 800c192:	f023 0307 	bic.w	r3, r3, #7
 800c196:	3308      	adds	r3, #8
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19c:	4433      	add	r3, r6
 800c19e:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a0:	e767      	b.n	800c072 <_svfiprintf_r+0x4e>
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1aa:	e7a5      	b.n	800c0f8 <_svfiprintf_r+0xd4>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f04f 0c0a 	mov.w	ip, #10
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	3401      	adds	r4, #1
 800c1b6:	9305      	str	r3, [sp, #20]
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1be:	3a30      	subs	r2, #48	; 0x30
 800c1c0:	2a09      	cmp	r2, #9
 800c1c2:	d903      	bls.n	800c1cc <_svfiprintf_r+0x1a8>
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0c5      	beq.n	800c154 <_svfiprintf_r+0x130>
 800c1c8:	9105      	str	r1, [sp, #20]
 800c1ca:	e7c3      	b.n	800c154 <_svfiprintf_r+0x130>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1d4:	e7f0      	b.n	800c1b8 <_svfiprintf_r+0x194>
 800c1d6:	ab03      	add	r3, sp, #12
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	462a      	mov	r2, r5
 800c1dc:	4638      	mov	r0, r7
 800c1de:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <_svfiprintf_r+0x1f8>)
 800c1e0:	a904      	add	r1, sp, #16
 800c1e2:	f3af 8000 	nop.w
 800c1e6:	1c42      	adds	r2, r0, #1
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	d1d6      	bne.n	800c19a <_svfiprintf_r+0x176>
 800c1ec:	89ab      	ldrh	r3, [r5, #12]
 800c1ee:	065b      	lsls	r3, r3, #25
 800c1f0:	f53f af2c 	bmi.w	800c04c <_svfiprintf_r+0x28>
 800c1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1f6:	b01d      	add	sp, #116	; 0x74
 800c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fc:	ab03      	add	r3, sp, #12
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	462a      	mov	r2, r5
 800c202:	4638      	mov	r0, r7
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <_svfiprintf_r+0x1f8>)
 800c206:	a904      	add	r1, sp, #16
 800c208:	f000 f87c 	bl	800c304 <_printf_i>
 800c20c:	e7eb      	b.n	800c1e6 <_svfiprintf_r+0x1c2>
 800c20e:	bf00      	nop
 800c210:	0800cc6e 	.word	0x0800cc6e
 800c214:	0800cc78 	.word	0x0800cc78
 800c218:	00000000 	.word	0x00000000
 800c21c:	0800bf6d 	.word	0x0800bf6d
 800c220:	0800cc74 	.word	0x0800cc74

0800c224 <_printf_common>:
 800c224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c228:	4616      	mov	r6, r2
 800c22a:	4699      	mov	r9, r3
 800c22c:	688a      	ldr	r2, [r1, #8]
 800c22e:	690b      	ldr	r3, [r1, #16]
 800c230:	4607      	mov	r7, r0
 800c232:	4293      	cmp	r3, r2
 800c234:	bfb8      	it	lt
 800c236:	4613      	movlt	r3, r2
 800c238:	6033      	str	r3, [r6, #0]
 800c23a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c23e:	460c      	mov	r4, r1
 800c240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c244:	b10a      	cbz	r2, 800c24a <_printf_common+0x26>
 800c246:	3301      	adds	r3, #1
 800c248:	6033      	str	r3, [r6, #0]
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	0699      	lsls	r1, r3, #26
 800c24e:	bf42      	ittt	mi
 800c250:	6833      	ldrmi	r3, [r6, #0]
 800c252:	3302      	addmi	r3, #2
 800c254:	6033      	strmi	r3, [r6, #0]
 800c256:	6825      	ldr	r5, [r4, #0]
 800c258:	f015 0506 	ands.w	r5, r5, #6
 800c25c:	d106      	bne.n	800c26c <_printf_common+0x48>
 800c25e:	f104 0a19 	add.w	sl, r4, #25
 800c262:	68e3      	ldr	r3, [r4, #12]
 800c264:	6832      	ldr	r2, [r6, #0]
 800c266:	1a9b      	subs	r3, r3, r2
 800c268:	42ab      	cmp	r3, r5
 800c26a:	dc28      	bgt.n	800c2be <_printf_common+0x9a>
 800c26c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c270:	1e13      	subs	r3, r2, #0
 800c272:	6822      	ldr	r2, [r4, #0]
 800c274:	bf18      	it	ne
 800c276:	2301      	movne	r3, #1
 800c278:	0692      	lsls	r2, r2, #26
 800c27a:	d42d      	bmi.n	800c2d8 <_printf_common+0xb4>
 800c27c:	4649      	mov	r1, r9
 800c27e:	4638      	mov	r0, r7
 800c280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c284:	47c0      	blx	r8
 800c286:	3001      	adds	r0, #1
 800c288:	d020      	beq.n	800c2cc <_printf_common+0xa8>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	68e5      	ldr	r5, [r4, #12]
 800c28e:	f003 0306 	and.w	r3, r3, #6
 800c292:	2b04      	cmp	r3, #4
 800c294:	bf18      	it	ne
 800c296:	2500      	movne	r5, #0
 800c298:	6832      	ldr	r2, [r6, #0]
 800c29a:	f04f 0600 	mov.w	r6, #0
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	bf08      	it	eq
 800c2a2:	1aad      	subeq	r5, r5, r2
 800c2a4:	6922      	ldr	r2, [r4, #16]
 800c2a6:	bf08      	it	eq
 800c2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	bfc4      	itt	gt
 800c2b0:	1a9b      	subgt	r3, r3, r2
 800c2b2:	18ed      	addgt	r5, r5, r3
 800c2b4:	341a      	adds	r4, #26
 800c2b6:	42b5      	cmp	r5, r6
 800c2b8:	d11a      	bne.n	800c2f0 <_printf_common+0xcc>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	e008      	b.n	800c2d0 <_printf_common+0xac>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	4652      	mov	r2, sl
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	47c0      	blx	r8
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d103      	bne.n	800c2d4 <_printf_common+0xb0>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	e7c4      	b.n	800c262 <_printf_common+0x3e>
 800c2d8:	2030      	movs	r0, #48	; 0x30
 800c2da:	18e1      	adds	r1, r4, r3
 800c2dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2e0:	1c5a      	adds	r2, r3, #1
 800c2e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2e6:	4422      	add	r2, r4
 800c2e8:	3302      	adds	r3, #2
 800c2ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2ee:	e7c5      	b.n	800c27c <_printf_common+0x58>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	47c0      	blx	r8
 800c2fa:	3001      	adds	r0, #1
 800c2fc:	d0e6      	beq.n	800c2cc <_printf_common+0xa8>
 800c2fe:	3601      	adds	r6, #1
 800c300:	e7d9      	b.n	800c2b6 <_printf_common+0x92>
	...

0800c304 <_printf_i>:
 800c304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	460c      	mov	r4, r1
 800c30a:	7e27      	ldrb	r7, [r4, #24]
 800c30c:	4691      	mov	r9, r2
 800c30e:	2f78      	cmp	r7, #120	; 0x78
 800c310:	4680      	mov	r8, r0
 800c312:	469a      	mov	sl, r3
 800c314:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c31a:	d807      	bhi.n	800c32c <_printf_i+0x28>
 800c31c:	2f62      	cmp	r7, #98	; 0x62
 800c31e:	d80a      	bhi.n	800c336 <_printf_i+0x32>
 800c320:	2f00      	cmp	r7, #0
 800c322:	f000 80d9 	beq.w	800c4d8 <_printf_i+0x1d4>
 800c326:	2f58      	cmp	r7, #88	; 0x58
 800c328:	f000 80a4 	beq.w	800c474 <_printf_i+0x170>
 800c32c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c334:	e03a      	b.n	800c3ac <_printf_i+0xa8>
 800c336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c33a:	2b15      	cmp	r3, #21
 800c33c:	d8f6      	bhi.n	800c32c <_printf_i+0x28>
 800c33e:	a001      	add	r0, pc, #4	; (adr r0, 800c344 <_printf_i+0x40>)
 800c340:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c344:	0800c39d 	.word	0x0800c39d
 800c348:	0800c3b1 	.word	0x0800c3b1
 800c34c:	0800c32d 	.word	0x0800c32d
 800c350:	0800c32d 	.word	0x0800c32d
 800c354:	0800c32d 	.word	0x0800c32d
 800c358:	0800c32d 	.word	0x0800c32d
 800c35c:	0800c3b1 	.word	0x0800c3b1
 800c360:	0800c32d 	.word	0x0800c32d
 800c364:	0800c32d 	.word	0x0800c32d
 800c368:	0800c32d 	.word	0x0800c32d
 800c36c:	0800c32d 	.word	0x0800c32d
 800c370:	0800c4bf 	.word	0x0800c4bf
 800c374:	0800c3e1 	.word	0x0800c3e1
 800c378:	0800c4a1 	.word	0x0800c4a1
 800c37c:	0800c32d 	.word	0x0800c32d
 800c380:	0800c32d 	.word	0x0800c32d
 800c384:	0800c4e1 	.word	0x0800c4e1
 800c388:	0800c32d 	.word	0x0800c32d
 800c38c:	0800c3e1 	.word	0x0800c3e1
 800c390:	0800c32d 	.word	0x0800c32d
 800c394:	0800c32d 	.word	0x0800c32d
 800c398:	0800c4a9 	.word	0x0800c4a9
 800c39c:	680b      	ldr	r3, [r1, #0]
 800c39e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3a2:	1d1a      	adds	r2, r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	600a      	str	r2, [r1, #0]
 800c3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e0a4      	b.n	800c4fa <_printf_i+0x1f6>
 800c3b0:	6825      	ldr	r5, [r4, #0]
 800c3b2:	6808      	ldr	r0, [r1, #0]
 800c3b4:	062e      	lsls	r6, r5, #24
 800c3b6:	f100 0304 	add.w	r3, r0, #4
 800c3ba:	d50a      	bpl.n	800c3d2 <_printf_i+0xce>
 800c3bc:	6805      	ldr	r5, [r0, #0]
 800c3be:	600b      	str	r3, [r1, #0]
 800c3c0:	2d00      	cmp	r5, #0
 800c3c2:	da03      	bge.n	800c3cc <_printf_i+0xc8>
 800c3c4:	232d      	movs	r3, #45	; 0x2d
 800c3c6:	426d      	negs	r5, r5
 800c3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3cc:	230a      	movs	r3, #10
 800c3ce:	485e      	ldr	r0, [pc, #376]	; (800c548 <_printf_i+0x244>)
 800c3d0:	e019      	b.n	800c406 <_printf_i+0x102>
 800c3d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c3d6:	6805      	ldr	r5, [r0, #0]
 800c3d8:	600b      	str	r3, [r1, #0]
 800c3da:	bf18      	it	ne
 800c3dc:	b22d      	sxthne	r5, r5
 800c3de:	e7ef      	b.n	800c3c0 <_printf_i+0xbc>
 800c3e0:	680b      	ldr	r3, [r1, #0]
 800c3e2:	6825      	ldr	r5, [r4, #0]
 800c3e4:	1d18      	adds	r0, r3, #4
 800c3e6:	6008      	str	r0, [r1, #0]
 800c3e8:	0628      	lsls	r0, r5, #24
 800c3ea:	d501      	bpl.n	800c3f0 <_printf_i+0xec>
 800c3ec:	681d      	ldr	r5, [r3, #0]
 800c3ee:	e002      	b.n	800c3f6 <_printf_i+0xf2>
 800c3f0:	0669      	lsls	r1, r5, #25
 800c3f2:	d5fb      	bpl.n	800c3ec <_printf_i+0xe8>
 800c3f4:	881d      	ldrh	r5, [r3, #0]
 800c3f6:	2f6f      	cmp	r7, #111	; 0x6f
 800c3f8:	bf0c      	ite	eq
 800c3fa:	2308      	moveq	r3, #8
 800c3fc:	230a      	movne	r3, #10
 800c3fe:	4852      	ldr	r0, [pc, #328]	; (800c548 <_printf_i+0x244>)
 800c400:	2100      	movs	r1, #0
 800c402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c406:	6866      	ldr	r6, [r4, #4]
 800c408:	2e00      	cmp	r6, #0
 800c40a:	bfa8      	it	ge
 800c40c:	6821      	ldrge	r1, [r4, #0]
 800c40e:	60a6      	str	r6, [r4, #8]
 800c410:	bfa4      	itt	ge
 800c412:	f021 0104 	bicge.w	r1, r1, #4
 800c416:	6021      	strge	r1, [r4, #0]
 800c418:	b90d      	cbnz	r5, 800c41e <_printf_i+0x11a>
 800c41a:	2e00      	cmp	r6, #0
 800c41c:	d04d      	beq.n	800c4ba <_printf_i+0x1b6>
 800c41e:	4616      	mov	r6, r2
 800c420:	fbb5 f1f3 	udiv	r1, r5, r3
 800c424:	fb03 5711 	mls	r7, r3, r1, r5
 800c428:	5dc7      	ldrb	r7, [r0, r7]
 800c42a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c42e:	462f      	mov	r7, r5
 800c430:	42bb      	cmp	r3, r7
 800c432:	460d      	mov	r5, r1
 800c434:	d9f4      	bls.n	800c420 <_printf_i+0x11c>
 800c436:	2b08      	cmp	r3, #8
 800c438:	d10b      	bne.n	800c452 <_printf_i+0x14e>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	07df      	lsls	r7, r3, #31
 800c43e:	d508      	bpl.n	800c452 <_printf_i+0x14e>
 800c440:	6923      	ldr	r3, [r4, #16]
 800c442:	6861      	ldr	r1, [r4, #4]
 800c444:	4299      	cmp	r1, r3
 800c446:	bfde      	ittt	le
 800c448:	2330      	movle	r3, #48	; 0x30
 800c44a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c44e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c452:	1b92      	subs	r2, r2, r6
 800c454:	6122      	str	r2, [r4, #16]
 800c456:	464b      	mov	r3, r9
 800c458:	4621      	mov	r1, r4
 800c45a:	4640      	mov	r0, r8
 800c45c:	f8cd a000 	str.w	sl, [sp]
 800c460:	aa03      	add	r2, sp, #12
 800c462:	f7ff fedf 	bl	800c224 <_printf_common>
 800c466:	3001      	adds	r0, #1
 800c468:	d14c      	bne.n	800c504 <_printf_i+0x200>
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295
 800c46e:	b004      	add	sp, #16
 800c470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c474:	4834      	ldr	r0, [pc, #208]	; (800c548 <_printf_i+0x244>)
 800c476:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c47a:	680e      	ldr	r6, [r1, #0]
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c482:	061f      	lsls	r7, r3, #24
 800c484:	600e      	str	r6, [r1, #0]
 800c486:	d514      	bpl.n	800c4b2 <_printf_i+0x1ae>
 800c488:	07d9      	lsls	r1, r3, #31
 800c48a:	bf44      	itt	mi
 800c48c:	f043 0320 	orrmi.w	r3, r3, #32
 800c490:	6023      	strmi	r3, [r4, #0]
 800c492:	b91d      	cbnz	r5, 800c49c <_printf_i+0x198>
 800c494:	6823      	ldr	r3, [r4, #0]
 800c496:	f023 0320 	bic.w	r3, r3, #32
 800c49a:	6023      	str	r3, [r4, #0]
 800c49c:	2310      	movs	r3, #16
 800c49e:	e7af      	b.n	800c400 <_printf_i+0xfc>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	f043 0320 	orr.w	r3, r3, #32
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	2378      	movs	r3, #120	; 0x78
 800c4aa:	4828      	ldr	r0, [pc, #160]	; (800c54c <_printf_i+0x248>)
 800c4ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4b0:	e7e3      	b.n	800c47a <_printf_i+0x176>
 800c4b2:	065e      	lsls	r6, r3, #25
 800c4b4:	bf48      	it	mi
 800c4b6:	b2ad      	uxthmi	r5, r5
 800c4b8:	e7e6      	b.n	800c488 <_printf_i+0x184>
 800c4ba:	4616      	mov	r6, r2
 800c4bc:	e7bb      	b.n	800c436 <_printf_i+0x132>
 800c4be:	680b      	ldr	r3, [r1, #0]
 800c4c0:	6826      	ldr	r6, [r4, #0]
 800c4c2:	1d1d      	adds	r5, r3, #4
 800c4c4:	6960      	ldr	r0, [r4, #20]
 800c4c6:	600d      	str	r5, [r1, #0]
 800c4c8:	0635      	lsls	r5, r6, #24
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	d501      	bpl.n	800c4d2 <_printf_i+0x1ce>
 800c4ce:	6018      	str	r0, [r3, #0]
 800c4d0:	e002      	b.n	800c4d8 <_printf_i+0x1d4>
 800c4d2:	0671      	lsls	r1, r6, #25
 800c4d4:	d5fb      	bpl.n	800c4ce <_printf_i+0x1ca>
 800c4d6:	8018      	strh	r0, [r3, #0]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4616      	mov	r6, r2
 800c4dc:	6123      	str	r3, [r4, #16]
 800c4de:	e7ba      	b.n	800c456 <_printf_i+0x152>
 800c4e0:	680b      	ldr	r3, [r1, #0]
 800c4e2:	1d1a      	adds	r2, r3, #4
 800c4e4:	600a      	str	r2, [r1, #0]
 800c4e6:	681e      	ldr	r6, [r3, #0]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	6862      	ldr	r2, [r4, #4]
 800c4ee:	f000 f82f 	bl	800c550 <memchr>
 800c4f2:	b108      	cbz	r0, 800c4f8 <_printf_i+0x1f4>
 800c4f4:	1b80      	subs	r0, r0, r6
 800c4f6:	6060      	str	r0, [r4, #4]
 800c4f8:	6863      	ldr	r3, [r4, #4]
 800c4fa:	6123      	str	r3, [r4, #16]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c502:	e7a8      	b.n	800c456 <_printf_i+0x152>
 800c504:	4632      	mov	r2, r6
 800c506:	4649      	mov	r1, r9
 800c508:	4640      	mov	r0, r8
 800c50a:	6923      	ldr	r3, [r4, #16]
 800c50c:	47d0      	blx	sl
 800c50e:	3001      	adds	r0, #1
 800c510:	d0ab      	beq.n	800c46a <_printf_i+0x166>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	079b      	lsls	r3, r3, #30
 800c516:	d413      	bmi.n	800c540 <_printf_i+0x23c>
 800c518:	68e0      	ldr	r0, [r4, #12]
 800c51a:	9b03      	ldr	r3, [sp, #12]
 800c51c:	4298      	cmp	r0, r3
 800c51e:	bfb8      	it	lt
 800c520:	4618      	movlt	r0, r3
 800c522:	e7a4      	b.n	800c46e <_printf_i+0x16a>
 800c524:	2301      	movs	r3, #1
 800c526:	4632      	mov	r2, r6
 800c528:	4649      	mov	r1, r9
 800c52a:	4640      	mov	r0, r8
 800c52c:	47d0      	blx	sl
 800c52e:	3001      	adds	r0, #1
 800c530:	d09b      	beq.n	800c46a <_printf_i+0x166>
 800c532:	3501      	adds	r5, #1
 800c534:	68e3      	ldr	r3, [r4, #12]
 800c536:	9903      	ldr	r1, [sp, #12]
 800c538:	1a5b      	subs	r3, r3, r1
 800c53a:	42ab      	cmp	r3, r5
 800c53c:	dcf2      	bgt.n	800c524 <_printf_i+0x220>
 800c53e:	e7eb      	b.n	800c518 <_printf_i+0x214>
 800c540:	2500      	movs	r5, #0
 800c542:	f104 0619 	add.w	r6, r4, #25
 800c546:	e7f5      	b.n	800c534 <_printf_i+0x230>
 800c548:	0800cc7f 	.word	0x0800cc7f
 800c54c:	0800cc90 	.word	0x0800cc90

0800c550 <memchr>:
 800c550:	4603      	mov	r3, r0
 800c552:	b510      	push	{r4, lr}
 800c554:	b2c9      	uxtb	r1, r1
 800c556:	4402      	add	r2, r0
 800c558:	4293      	cmp	r3, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	d101      	bne.n	800c562 <memchr+0x12>
 800c55e:	2000      	movs	r0, #0
 800c560:	e003      	b.n	800c56a <memchr+0x1a>
 800c562:	7804      	ldrb	r4, [r0, #0]
 800c564:	3301      	adds	r3, #1
 800c566:	428c      	cmp	r4, r1
 800c568:	d1f6      	bne.n	800c558 <memchr+0x8>
 800c56a:	bd10      	pop	{r4, pc}

0800c56c <memcpy>:
 800c56c:	440a      	add	r2, r1
 800c56e:	4291      	cmp	r1, r2
 800c570:	f100 33ff 	add.w	r3, r0, #4294967295
 800c574:	d100      	bne.n	800c578 <memcpy+0xc>
 800c576:	4770      	bx	lr
 800c578:	b510      	push	{r4, lr}
 800c57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57e:	4291      	cmp	r1, r2
 800c580:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c584:	d1f9      	bne.n	800c57a <memcpy+0xe>
 800c586:	bd10      	pop	{r4, pc}

0800c588 <memmove>:
 800c588:	4288      	cmp	r0, r1
 800c58a:	b510      	push	{r4, lr}
 800c58c:	eb01 0402 	add.w	r4, r1, r2
 800c590:	d902      	bls.n	800c598 <memmove+0x10>
 800c592:	4284      	cmp	r4, r0
 800c594:	4623      	mov	r3, r4
 800c596:	d807      	bhi.n	800c5a8 <memmove+0x20>
 800c598:	1e43      	subs	r3, r0, #1
 800c59a:	42a1      	cmp	r1, r4
 800c59c:	d008      	beq.n	800c5b0 <memmove+0x28>
 800c59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5a6:	e7f8      	b.n	800c59a <memmove+0x12>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	4402      	add	r2, r0
 800c5ac:	428a      	cmp	r2, r1
 800c5ae:	d100      	bne.n	800c5b2 <memmove+0x2a>
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5ba:	e7f7      	b.n	800c5ac <memmove+0x24>

0800c5bc <_free_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4605      	mov	r5, r0
 800c5c0:	2900      	cmp	r1, #0
 800c5c2:	d043      	beq.n	800c64c <_free_r+0x90>
 800c5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c8:	1f0c      	subs	r4, r1, #4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	bfb8      	it	lt
 800c5ce:	18e4      	addlt	r4, r4, r3
 800c5d0:	f000 f8d0 	bl	800c774 <__malloc_lock>
 800c5d4:	4a1e      	ldr	r2, [pc, #120]	; (800c650 <_free_r+0x94>)
 800c5d6:	6813      	ldr	r3, [r2, #0]
 800c5d8:	4610      	mov	r0, r2
 800c5da:	b933      	cbnz	r3, 800c5ea <_free_r+0x2e>
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	6014      	str	r4, [r2, #0]
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5e6:	f000 b8cb 	b.w	800c780 <__malloc_unlock>
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	d90a      	bls.n	800c604 <_free_r+0x48>
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	1862      	adds	r2, r4, r1
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	bf01      	itttt	eq
 800c5f6:	681a      	ldreq	r2, [r3, #0]
 800c5f8:	685b      	ldreq	r3, [r3, #4]
 800c5fa:	1852      	addeq	r2, r2, r1
 800c5fc:	6022      	streq	r2, [r4, #0]
 800c5fe:	6063      	str	r3, [r4, #4]
 800c600:	6004      	str	r4, [r0, #0]
 800c602:	e7ed      	b.n	800c5e0 <_free_r+0x24>
 800c604:	461a      	mov	r2, r3
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	b10b      	cbz	r3, 800c60e <_free_r+0x52>
 800c60a:	42a3      	cmp	r3, r4
 800c60c:	d9fa      	bls.n	800c604 <_free_r+0x48>
 800c60e:	6811      	ldr	r1, [r2, #0]
 800c610:	1850      	adds	r0, r2, r1
 800c612:	42a0      	cmp	r0, r4
 800c614:	d10b      	bne.n	800c62e <_free_r+0x72>
 800c616:	6820      	ldr	r0, [r4, #0]
 800c618:	4401      	add	r1, r0
 800c61a:	1850      	adds	r0, r2, r1
 800c61c:	4283      	cmp	r3, r0
 800c61e:	6011      	str	r1, [r2, #0]
 800c620:	d1de      	bne.n	800c5e0 <_free_r+0x24>
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	4401      	add	r1, r0
 800c628:	6011      	str	r1, [r2, #0]
 800c62a:	6053      	str	r3, [r2, #4]
 800c62c:	e7d8      	b.n	800c5e0 <_free_r+0x24>
 800c62e:	d902      	bls.n	800c636 <_free_r+0x7a>
 800c630:	230c      	movs	r3, #12
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	e7d4      	b.n	800c5e0 <_free_r+0x24>
 800c636:	6820      	ldr	r0, [r4, #0]
 800c638:	1821      	adds	r1, r4, r0
 800c63a:	428b      	cmp	r3, r1
 800c63c:	bf01      	itttt	eq
 800c63e:	6819      	ldreq	r1, [r3, #0]
 800c640:	685b      	ldreq	r3, [r3, #4]
 800c642:	1809      	addeq	r1, r1, r0
 800c644:	6021      	streq	r1, [r4, #0]
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	6054      	str	r4, [r2, #4]
 800c64a:	e7c9      	b.n	800c5e0 <_free_r+0x24>
 800c64c:	bd38      	pop	{r3, r4, r5, pc}
 800c64e:	bf00      	nop
 800c650:	20000428 	.word	0x20000428

0800c654 <_malloc_r>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	1ccd      	adds	r5, r1, #3
 800c658:	f025 0503 	bic.w	r5, r5, #3
 800c65c:	3508      	adds	r5, #8
 800c65e:	2d0c      	cmp	r5, #12
 800c660:	bf38      	it	cc
 800c662:	250c      	movcc	r5, #12
 800c664:	2d00      	cmp	r5, #0
 800c666:	4606      	mov	r6, r0
 800c668:	db01      	blt.n	800c66e <_malloc_r+0x1a>
 800c66a:	42a9      	cmp	r1, r5
 800c66c:	d903      	bls.n	800c676 <_malloc_r+0x22>
 800c66e:	230c      	movs	r3, #12
 800c670:	6033      	str	r3, [r6, #0]
 800c672:	2000      	movs	r0, #0
 800c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c676:	f000 f87d 	bl	800c774 <__malloc_lock>
 800c67a:	4921      	ldr	r1, [pc, #132]	; (800c700 <_malloc_r+0xac>)
 800c67c:	680a      	ldr	r2, [r1, #0]
 800c67e:	4614      	mov	r4, r2
 800c680:	b99c      	cbnz	r4, 800c6aa <_malloc_r+0x56>
 800c682:	4f20      	ldr	r7, [pc, #128]	; (800c704 <_malloc_r+0xb0>)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	b923      	cbnz	r3, 800c692 <_malloc_r+0x3e>
 800c688:	4621      	mov	r1, r4
 800c68a:	4630      	mov	r0, r6
 800c68c:	f000 f862 	bl	800c754 <_sbrk_r>
 800c690:	6038      	str	r0, [r7, #0]
 800c692:	4629      	mov	r1, r5
 800c694:	4630      	mov	r0, r6
 800c696:	f000 f85d 	bl	800c754 <_sbrk_r>
 800c69a:	1c43      	adds	r3, r0, #1
 800c69c:	d123      	bne.n	800c6e6 <_malloc_r+0x92>
 800c69e:	230c      	movs	r3, #12
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	6033      	str	r3, [r6, #0]
 800c6a4:	f000 f86c 	bl	800c780 <__malloc_unlock>
 800c6a8:	e7e3      	b.n	800c672 <_malloc_r+0x1e>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	1b5b      	subs	r3, r3, r5
 800c6ae:	d417      	bmi.n	800c6e0 <_malloc_r+0x8c>
 800c6b0:	2b0b      	cmp	r3, #11
 800c6b2:	d903      	bls.n	800c6bc <_malloc_r+0x68>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	441c      	add	r4, r3
 800c6b8:	6025      	str	r5, [r4, #0]
 800c6ba:	e004      	b.n	800c6c6 <_malloc_r+0x72>
 800c6bc:	6863      	ldr	r3, [r4, #4]
 800c6be:	42a2      	cmp	r2, r4
 800c6c0:	bf0c      	ite	eq
 800c6c2:	600b      	streq	r3, [r1, #0]
 800c6c4:	6053      	strne	r3, [r2, #4]
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f000 f85a 	bl	800c780 <__malloc_unlock>
 800c6cc:	f104 000b 	add.w	r0, r4, #11
 800c6d0:	1d23      	adds	r3, r4, #4
 800c6d2:	f020 0007 	bic.w	r0, r0, #7
 800c6d6:	1ac2      	subs	r2, r0, r3
 800c6d8:	d0cc      	beq.n	800c674 <_malloc_r+0x20>
 800c6da:	1a1b      	subs	r3, r3, r0
 800c6dc:	50a3      	str	r3, [r4, r2]
 800c6de:	e7c9      	b.n	800c674 <_malloc_r+0x20>
 800c6e0:	4622      	mov	r2, r4
 800c6e2:	6864      	ldr	r4, [r4, #4]
 800c6e4:	e7cc      	b.n	800c680 <_malloc_r+0x2c>
 800c6e6:	1cc4      	adds	r4, r0, #3
 800c6e8:	f024 0403 	bic.w	r4, r4, #3
 800c6ec:	42a0      	cmp	r0, r4
 800c6ee:	d0e3      	beq.n	800c6b8 <_malloc_r+0x64>
 800c6f0:	1a21      	subs	r1, r4, r0
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f000 f82e 	bl	800c754 <_sbrk_r>
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d1dd      	bne.n	800c6b8 <_malloc_r+0x64>
 800c6fc:	e7cf      	b.n	800c69e <_malloc_r+0x4a>
 800c6fe:	bf00      	nop
 800c700:	20000428 	.word	0x20000428
 800c704:	2000042c 	.word	0x2000042c

0800c708 <_realloc_r>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	4607      	mov	r7, r0
 800c70c:	4614      	mov	r4, r2
 800c70e:	460e      	mov	r6, r1
 800c710:	b921      	cbnz	r1, 800c71c <_realloc_r+0x14>
 800c712:	4611      	mov	r1, r2
 800c714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c718:	f7ff bf9c 	b.w	800c654 <_malloc_r>
 800c71c:	b922      	cbnz	r2, 800c728 <_realloc_r+0x20>
 800c71e:	f7ff ff4d 	bl	800c5bc <_free_r>
 800c722:	4625      	mov	r5, r4
 800c724:	4628      	mov	r0, r5
 800c726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c728:	f000 f830 	bl	800c78c <_malloc_usable_size_r>
 800c72c:	42a0      	cmp	r0, r4
 800c72e:	d20f      	bcs.n	800c750 <_realloc_r+0x48>
 800c730:	4621      	mov	r1, r4
 800c732:	4638      	mov	r0, r7
 800c734:	f7ff ff8e 	bl	800c654 <_malloc_r>
 800c738:	4605      	mov	r5, r0
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0f2      	beq.n	800c724 <_realloc_r+0x1c>
 800c73e:	4631      	mov	r1, r6
 800c740:	4622      	mov	r2, r4
 800c742:	f7ff ff13 	bl	800c56c <memcpy>
 800c746:	4631      	mov	r1, r6
 800c748:	4638      	mov	r0, r7
 800c74a:	f7ff ff37 	bl	800c5bc <_free_r>
 800c74e:	e7e9      	b.n	800c724 <_realloc_r+0x1c>
 800c750:	4635      	mov	r5, r6
 800c752:	e7e7      	b.n	800c724 <_realloc_r+0x1c>

0800c754 <_sbrk_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	2300      	movs	r3, #0
 800c758:	4d05      	ldr	r5, [pc, #20]	; (800c770 <_sbrk_r+0x1c>)
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	602b      	str	r3, [r5, #0]
 800c760:	f7fa faec 	bl	8006d3c <_sbrk>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_sbrk_r+0x1a>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_sbrk_r+0x1a>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	20001678 	.word	0x20001678

0800c774 <__malloc_lock>:
 800c774:	4801      	ldr	r0, [pc, #4]	; (800c77c <__malloc_lock+0x8>)
 800c776:	f000 b811 	b.w	800c79c <__retarget_lock_acquire_recursive>
 800c77a:	bf00      	nop
 800c77c:	20001680 	.word	0x20001680

0800c780 <__malloc_unlock>:
 800c780:	4801      	ldr	r0, [pc, #4]	; (800c788 <__malloc_unlock+0x8>)
 800c782:	f000 b80c 	b.w	800c79e <__retarget_lock_release_recursive>
 800c786:	bf00      	nop
 800c788:	20001680 	.word	0x20001680

0800c78c <_malloc_usable_size_r>:
 800c78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c790:	1f18      	subs	r0, r3, #4
 800c792:	2b00      	cmp	r3, #0
 800c794:	bfbc      	itt	lt
 800c796:	580b      	ldrlt	r3, [r1, r0]
 800c798:	18c0      	addlt	r0, r0, r3
 800c79a:	4770      	bx	lr

0800c79c <__retarget_lock_acquire_recursive>:
 800c79c:	4770      	bx	lr

0800c79e <__retarget_lock_release_recursive>:
 800c79e:	4770      	bx	lr

0800c7a0 <log>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	460d      	mov	r5, r1
 800c7a6:	f000 f837 	bl	800c818 <__ieee754_log>
 800c7aa:	4b17      	ldr	r3, [pc, #92]	; (800c808 <log+0x68>)
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	f993 3000 	ldrsb.w	r3, [r3]
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	d01a      	beq.n	800c7ee <log+0x4e>
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	4620      	mov	r0, r4
 800c7be:	4629      	mov	r1, r5
 800c7c0:	f7f9 f91c 	bl	80059fc <__aeabi_dcmpun>
 800c7c4:	b998      	cbnz	r0, 800c7ee <log+0x4e>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	f7f9 f90b 	bl	80059e8 <__aeabi_dcmpgt>
 800c7d2:	b960      	cbnz	r0, 800c7ee <log+0x4e>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4620      	mov	r0, r4
 800c7da:	4629      	mov	r1, r5
 800c7dc:	f7f9 f8dc 	bl	8005998 <__aeabi_dcmpeq>
 800c7e0:	b140      	cbz	r0, 800c7f4 <log+0x54>
 800c7e2:	f7ff fb79 	bl	800bed8 <__errno>
 800c7e6:	2322      	movs	r3, #34	; 0x22
 800c7e8:	2600      	movs	r6, #0
 800c7ea:	4f08      	ldr	r7, [pc, #32]	; (800c80c <log+0x6c>)
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f4:	f7ff fb70 	bl	800bed8 <__errno>
 800c7f8:	2321      	movs	r3, #33	; 0x21
 800c7fa:	6003      	str	r3, [r0, #0]
 800c7fc:	4804      	ldr	r0, [pc, #16]	; (800c810 <log+0x70>)
 800c7fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c802:	f000 b9bb 	b.w	800cb7c <nan>
 800c806:	bf00      	nop
 800c808:	200001e0 	.word	0x200001e0
 800c80c:	fff00000 	.word	0xfff00000
 800c810:	0800cc73 	.word	0x0800cc73
 800c814:	00000000 	.word	0x00000000

0800c818 <__ieee754_log>:
 800c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	460d      	mov	r5, r1
 800c826:	b087      	sub	sp, #28
 800c828:	da24      	bge.n	800c874 <__ieee754_log+0x5c>
 800c82a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c82e:	4304      	orrs	r4, r0
 800c830:	d108      	bne.n	800c844 <__ieee754_log+0x2c>
 800c832:	2200      	movs	r2, #0
 800c834:	2300      	movs	r3, #0
 800c836:	2000      	movs	r0, #0
 800c838:	49cb      	ldr	r1, [pc, #812]	; (800cb68 <__ieee754_log+0x350>)
 800c83a:	f7f8 ff6f 	bl	800571c <__aeabi_ddiv>
 800c83e:	b007      	add	sp, #28
 800c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c844:	2900      	cmp	r1, #0
 800c846:	da04      	bge.n	800c852 <__ieee754_log+0x3a>
 800c848:	f7f8 fc86 	bl	8005158 <__aeabi_dsub>
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	e7f3      	b.n	800c83a <__ieee754_log+0x22>
 800c852:	2200      	movs	r2, #0
 800c854:	4bc5      	ldr	r3, [pc, #788]	; (800cb6c <__ieee754_log+0x354>)
 800c856:	f7f8 fe37 	bl	80054c8 <__aeabi_dmul>
 800c85a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	460d      	mov	r5, r1
 800c864:	49c2      	ldr	r1, [pc, #776]	; (800cb70 <__ieee754_log+0x358>)
 800c866:	428d      	cmp	r5, r1
 800c868:	dd06      	ble.n	800c878 <__ieee754_log+0x60>
 800c86a:	4610      	mov	r0, r2
 800c86c:	4619      	mov	r1, r3
 800c86e:	f7f8 fc75 	bl	800515c <__adddf3>
 800c872:	e7e4      	b.n	800c83e <__ieee754_log+0x26>
 800c874:	2600      	movs	r6, #0
 800c876:	e7f5      	b.n	800c864 <__ieee754_log+0x4c>
 800c878:	152c      	asrs	r4, r5, #20
 800c87a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c87e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c882:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c886:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c88a:	4426      	add	r6, r4
 800c88c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800c890:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800c894:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c898:	ea41 0305 	orr.w	r3, r1, r5
 800c89c:	4610      	mov	r0, r2
 800c89e:	4619      	mov	r1, r3
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4bb4      	ldr	r3, [pc, #720]	; (800cb74 <__ieee754_log+0x35c>)
 800c8a4:	f7f8 fc58 	bl	8005158 <__aeabi_dsub>
 800c8a8:	1cab      	adds	r3, r5, #2
 800c8aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	4682      	mov	sl, r0
 800c8b2:	468b      	mov	fp, r1
 800c8b4:	f04f 0200 	mov.w	r2, #0
 800c8b8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800c8bc:	dc53      	bgt.n	800c966 <__ieee754_log+0x14e>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f7f9 f86a 	bl	8005998 <__aeabi_dcmpeq>
 800c8c4:	b1d0      	cbz	r0, 800c8fc <__ieee754_log+0xe4>
 800c8c6:	2c00      	cmp	r4, #0
 800c8c8:	f000 8122 	beq.w	800cb10 <__ieee754_log+0x2f8>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f7f8 fd91 	bl	80053f4 <__aeabi_i2d>
 800c8d2:	a391      	add	r3, pc, #580	; (adr r3, 800cb18 <__ieee754_log+0x300>)
 800c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d8:	4606      	mov	r6, r0
 800c8da:	460f      	mov	r7, r1
 800c8dc:	f7f8 fdf4 	bl	80054c8 <__aeabi_dmul>
 800c8e0:	a38f      	add	r3, pc, #572	; (adr r3, 800cb20 <__ieee754_log+0x308>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	f7f8 fdeb 	bl	80054c8 <__aeabi_dmul>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	e7b8      	b.n	800c86e <__ieee754_log+0x56>
 800c8fc:	a38a      	add	r3, pc, #552	; (adr r3, 800cb28 <__ieee754_log+0x310>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	4650      	mov	r0, sl
 800c904:	4659      	mov	r1, fp
 800c906:	f7f8 fddf 	bl	80054c8 <__aeabi_dmul>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	2000      	movs	r0, #0
 800c910:	4999      	ldr	r1, [pc, #612]	; (800cb78 <__ieee754_log+0x360>)
 800c912:	f7f8 fc21 	bl	8005158 <__aeabi_dsub>
 800c916:	4652      	mov	r2, sl
 800c918:	4606      	mov	r6, r0
 800c91a:	460f      	mov	r7, r1
 800c91c:	465b      	mov	r3, fp
 800c91e:	4650      	mov	r0, sl
 800c920:	4659      	mov	r1, fp
 800c922:	f7f8 fdd1 	bl	80054c8 <__aeabi_dmul>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f8 fdcb 	bl	80054c8 <__aeabi_dmul>
 800c932:	4606      	mov	r6, r0
 800c934:	460f      	mov	r7, r1
 800c936:	b914      	cbnz	r4, 800c93e <__ieee754_log+0x126>
 800c938:	4632      	mov	r2, r6
 800c93a:	463b      	mov	r3, r7
 800c93c:	e0a2      	b.n	800ca84 <__ieee754_log+0x26c>
 800c93e:	4620      	mov	r0, r4
 800c940:	f7f8 fd58 	bl	80053f4 <__aeabi_i2d>
 800c944:	a374      	add	r3, pc, #464	; (adr r3, 800cb18 <__ieee754_log+0x300>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	4680      	mov	r8, r0
 800c94c:	4689      	mov	r9, r1
 800c94e:	f7f8 fdbb 	bl	80054c8 <__aeabi_dmul>
 800c952:	a373      	add	r3, pc, #460	; (adr r3, 800cb20 <__ieee754_log+0x308>)
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	4604      	mov	r4, r0
 800c95a:	460d      	mov	r5, r1
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f8 fdb2 	bl	80054c8 <__aeabi_dmul>
 800c964:	e0a7      	b.n	800cab6 <__ieee754_log+0x29e>
 800c966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c96a:	f7f8 fbf7 	bl	800515c <__adddf3>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4650      	mov	r0, sl
 800c974:	4659      	mov	r1, fp
 800c976:	f7f8 fed1 	bl	800571c <__aeabi_ddiv>
 800c97a:	e9cd 0100 	strd	r0, r1, [sp]
 800c97e:	4620      	mov	r0, r4
 800c980:	f7f8 fd38 	bl	80053f4 <__aeabi_i2d>
 800c984:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c98c:	4610      	mov	r0, r2
 800c98e:	4619      	mov	r1, r3
 800c990:	f7f8 fd9a 	bl	80054c8 <__aeabi_dmul>
 800c994:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c998:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c99c:	4602      	mov	r2, r0
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460f      	mov	r7, r1
 800c9a6:	f7f8 fd8f 	bl	80054c8 <__aeabi_dmul>
 800c9aa:	a361      	add	r3, pc, #388	; (adr r3, 800cb30 <__ieee754_log+0x318>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	4680      	mov	r8, r0
 800c9b2:	4689      	mov	r9, r1
 800c9b4:	f7f8 fd88 	bl	80054c8 <__aeabi_dmul>
 800c9b8:	a35f      	add	r3, pc, #380	; (adr r3, 800cb38 <__ieee754_log+0x320>)
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	f7f8 fbcd 	bl	800515c <__adddf3>
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	f7f8 fd7f 	bl	80054c8 <__aeabi_dmul>
 800c9ca:	a35d      	add	r3, pc, #372	; (adr r3, 800cb40 <__ieee754_log+0x328>)
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f7f8 fbc4 	bl	800515c <__adddf3>
 800c9d4:	4642      	mov	r2, r8
 800c9d6:	464b      	mov	r3, r9
 800c9d8:	f7f8 fd76 	bl	80054c8 <__aeabi_dmul>
 800c9dc:	a35a      	add	r3, pc, #360	; (adr r3, 800cb48 <__ieee754_log+0x330>)
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f7f8 fbbb 	bl	800515c <__adddf3>
 800c9e6:	4632      	mov	r2, r6
 800c9e8:	463b      	mov	r3, r7
 800c9ea:	f7f8 fd6d 	bl	80054c8 <__aeabi_dmul>
 800c9ee:	a358      	add	r3, pc, #352	; (adr r3, 800cb50 <__ieee754_log+0x338>)
 800c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f4:	4606      	mov	r6, r0
 800c9f6:	460f      	mov	r7, r1
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	f7f8 fd64 	bl	80054c8 <__aeabi_dmul>
 800ca00:	a355      	add	r3, pc, #340	; (adr r3, 800cb58 <__ieee754_log+0x340>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f7f8 fba9 	bl	800515c <__adddf3>
 800ca0a:	4642      	mov	r2, r8
 800ca0c:	464b      	mov	r3, r9
 800ca0e:	f7f8 fd5b 	bl	80054c8 <__aeabi_dmul>
 800ca12:	a353      	add	r3, pc, #332	; (adr r3, 800cb60 <__ieee754_log+0x348>)
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f8 fba0 	bl	800515c <__adddf3>
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	f7f8 fd52 	bl	80054c8 <__aeabi_dmul>
 800ca24:	460b      	mov	r3, r1
 800ca26:	4602      	mov	r2, r0
 800ca28:	4639      	mov	r1, r7
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7f8 fb96 	bl	800515c <__adddf3>
 800ca30:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ca34:	9b05      	ldr	r3, [sp, #20]
 800ca36:	3551      	adds	r5, #81	; 0x51
 800ca38:	431d      	orrs	r5, r3
 800ca3a:	2d00      	cmp	r5, #0
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	4689      	mov	r9, r1
 800ca40:	dd48      	ble.n	800cad4 <__ieee754_log+0x2bc>
 800ca42:	2200      	movs	r2, #0
 800ca44:	4b4c      	ldr	r3, [pc, #304]	; (800cb78 <__ieee754_log+0x360>)
 800ca46:	4650      	mov	r0, sl
 800ca48:	4659      	mov	r1, fp
 800ca4a:	f7f8 fd3d 	bl	80054c8 <__aeabi_dmul>
 800ca4e:	4652      	mov	r2, sl
 800ca50:	465b      	mov	r3, fp
 800ca52:	f7f8 fd39 	bl	80054c8 <__aeabi_dmul>
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	460f      	mov	r7, r1
 800ca5e:	4640      	mov	r0, r8
 800ca60:	4649      	mov	r1, r9
 800ca62:	f7f8 fb7b 	bl	800515c <__adddf3>
 800ca66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca6a:	f7f8 fd2d 	bl	80054c8 <__aeabi_dmul>
 800ca6e:	4680      	mov	r8, r0
 800ca70:	4689      	mov	r9, r1
 800ca72:	b964      	cbnz	r4, 800ca8e <__ieee754_log+0x276>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4630      	mov	r0, r6
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	f7f8 fb6c 	bl	8005158 <__aeabi_dsub>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4650      	mov	r0, sl
 800ca86:	4659      	mov	r1, fp
 800ca88:	f7f8 fb66 	bl	8005158 <__aeabi_dsub>
 800ca8c:	e6d7      	b.n	800c83e <__ieee754_log+0x26>
 800ca8e:	a322      	add	r3, pc, #136	; (adr r3, 800cb18 <__ieee754_log+0x300>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca98:	f7f8 fd16 	bl	80054c8 <__aeabi_dmul>
 800ca9c:	a320      	add	r3, pc, #128	; (adr r3, 800cb20 <__ieee754_log+0x308>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	4604      	mov	r4, r0
 800caa4:	460d      	mov	r5, r1
 800caa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caaa:	f7f8 fd0d 	bl	80054c8 <__aeabi_dmul>
 800caae:	4642      	mov	r2, r8
 800cab0:	464b      	mov	r3, r9
 800cab2:	f7f8 fb53 	bl	800515c <__adddf3>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4630      	mov	r0, r6
 800cabc:	4639      	mov	r1, r7
 800cabe:	f7f8 fb4b 	bl	8005158 <__aeabi_dsub>
 800cac2:	4652      	mov	r2, sl
 800cac4:	465b      	mov	r3, fp
 800cac6:	f7f8 fb47 	bl	8005158 <__aeabi_dsub>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4620      	mov	r0, r4
 800cad0:	4629      	mov	r1, r5
 800cad2:	e7d9      	b.n	800ca88 <__ieee754_log+0x270>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	f7f8 fb3c 	bl	8005158 <__aeabi_dsub>
 800cae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cae4:	f7f8 fcf0 	bl	80054c8 <__aeabi_dmul>
 800cae8:	4606      	mov	r6, r0
 800caea:	460f      	mov	r7, r1
 800caec:	2c00      	cmp	r4, #0
 800caee:	f43f af23 	beq.w	800c938 <__ieee754_log+0x120>
 800caf2:	a309      	add	r3, pc, #36	; (adr r3, 800cb18 <__ieee754_log+0x300>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafc:	f7f8 fce4 	bl	80054c8 <__aeabi_dmul>
 800cb00:	a307      	add	r3, pc, #28	; (adr r3, 800cb20 <__ieee754_log+0x308>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	4604      	mov	r4, r0
 800cb08:	460d      	mov	r5, r1
 800cb0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb0e:	e727      	b.n	800c960 <__ieee754_log+0x148>
 800cb10:	2000      	movs	r0, #0
 800cb12:	2100      	movs	r1, #0
 800cb14:	e693      	b.n	800c83e <__ieee754_log+0x26>
 800cb16:	bf00      	nop
 800cb18:	fee00000 	.word	0xfee00000
 800cb1c:	3fe62e42 	.word	0x3fe62e42
 800cb20:	35793c76 	.word	0x35793c76
 800cb24:	3dea39ef 	.word	0x3dea39ef
 800cb28:	55555555 	.word	0x55555555
 800cb2c:	3fd55555 	.word	0x3fd55555
 800cb30:	df3e5244 	.word	0xdf3e5244
 800cb34:	3fc2f112 	.word	0x3fc2f112
 800cb38:	96cb03de 	.word	0x96cb03de
 800cb3c:	3fc74664 	.word	0x3fc74664
 800cb40:	94229359 	.word	0x94229359
 800cb44:	3fd24924 	.word	0x3fd24924
 800cb48:	55555593 	.word	0x55555593
 800cb4c:	3fe55555 	.word	0x3fe55555
 800cb50:	d078c69f 	.word	0xd078c69f
 800cb54:	3fc39a09 	.word	0x3fc39a09
 800cb58:	1d8e78af 	.word	0x1d8e78af
 800cb5c:	3fcc71c5 	.word	0x3fcc71c5
 800cb60:	9997fa04 	.word	0x9997fa04
 800cb64:	3fd99999 	.word	0x3fd99999
 800cb68:	c3500000 	.word	0xc3500000
 800cb6c:	43500000 	.word	0x43500000
 800cb70:	7fefffff 	.word	0x7fefffff
 800cb74:	3ff00000 	.word	0x3ff00000
 800cb78:	3fe00000 	.word	0x3fe00000

0800cb7c <nan>:
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	4901      	ldr	r1, [pc, #4]	; (800cb84 <nan+0x8>)
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	7ff80000 	.word	0x7ff80000

0800cb88 <_init>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	bf00      	nop
 800cb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8e:	bc08      	pop	{r3}
 800cb90:	469e      	mov	lr, r3
 800cb92:	4770      	bx	lr

0800cb94 <_fini>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr
