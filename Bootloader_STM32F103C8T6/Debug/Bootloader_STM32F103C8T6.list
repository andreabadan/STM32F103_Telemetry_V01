
Bootloader_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080040d4  080040d4  000140d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004254  08004254  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08004254  08004254  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004254  08004254  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800425c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000180  080043d8  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001370  080043d8  00021370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d8c  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004154  00000000  00000000  00037f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000850c  00000000  00000000  0003c085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  00044598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001450  00000000  00000000  00044fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ea0  00000000  00000000  00046410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012573  00000000  00000000  000602b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008563d  00000000  00000000  00072823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f7e60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018bc  00000000  00000000  000f7eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	080040bc 	.word	0x080040bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	080040bc 	.word	0x080040bc

0800014c <unlockMemory>:
	SysTick->CTRL = 0;
	SysTick->LOAD = 0;
	SysTick->VAL = 0;
}

static void unlockMemory(){
 800014c:	b508      	push	{r3, lr}
	/* Unock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Unlock()!=HAL_OK)
 800014e:	f000 fccb 	bl	8000ae8 <HAL_FLASH_Unlock>
 8000152:	b928      	cbnz	r0, 8000160 <unlockMemory+0x14>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt

	/* Allow Access to option bytes sector */
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 8000154:	f000 fce4 	bl	8000b20 <HAL_FLASH_OB_Unlock>
 8000158:	b938      	cbnz	r0, 800016a <unlockMemory+0x1e>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt

	flashLocked = Unlocked;
 800015a:	4b06      	ldr	r3, [pc, #24]	; (8000174 <unlockMemory+0x28>)
 800015c:	7018      	strb	r0, [r3, #0]
}
 800015e:	bd08      	pop	{r3, pc}
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 8000160:	f000 fcd4 	bl	8000b0c <HAL_FLASH_Lock>
 8000164:	2800      	cmp	r0, #0
 8000166:	d1fb      	bne.n	8000160 <unlockMemory+0x14>
 8000168:	e7f1      	b.n	800014e <unlockMemory+0x2>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 800016a:	f000 fceb 	bl	8000b44 <HAL_FLASH_OB_Lock>
 800016e:	2800      	cmp	r0, #0
 8000170:	d1fb      	bne.n	800016a <unlockMemory+0x1e>
 8000172:	e7ef      	b.n	8000154 <unlockMemory+0x8>
 8000174:	200003c0 	.word	0x200003c0

08000178 <lockMemory>:

static void lockMemory(){
 8000178:	b508      	push	{r3, lr}
	/* Lock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Lock()!=HAL_OK)
 800017a:	f000 fcc7 	bl	8000b0c <HAL_FLASH_Lock>
 800017e:	b930      	cbnz	r0, 800018e <lockMemory+0x16>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt

	/* Lock Access to option bytes sector */
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000180:	f000 fce0 	bl	8000b44 <HAL_FLASH_OB_Lock>
 8000184:	b940      	cbnz	r0, 8000198 <lockMemory+0x20>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt

	flashLocked = Locked;
 8000186:	2201      	movs	r2, #1
 8000188:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <lockMemory+0x2c>)
 800018a:	701a      	strb	r2, [r3, #0]
}
 800018c:	bd08      	pop	{r3, pc}
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 800018e:	f000 fcab 	bl	8000ae8 <HAL_FLASH_Unlock>
 8000192:	2800      	cmp	r0, #0
 8000194:	d1fb      	bne.n	800018e <lockMemory+0x16>
 8000196:	e7f0      	b.n	800017a <lockMemory+0x2>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 8000198:	f000 fcc2 	bl	8000b20 <HAL_FLASH_OB_Unlock>
 800019c:	2800      	cmp	r0, #0
 800019e:	d1fb      	bne.n	8000198 <lockMemory+0x20>
 80001a0:	e7ee      	b.n	8000180 <lockMemory+0x8>
 80001a2:	bf00      	nop
 80001a4:	200003c0 	.word	0x200003c0

080001a8 <deinitEverything>:
{
 80001a8:	b508      	push	{r3, lr}
	HAL_GPIO_DeInit(BootloaderLed_GPIO_Port, BootloaderLed_Pin);
 80001aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ae:	4810      	ldr	r0, [pc, #64]	; (80001f0 <deinitEverything+0x48>)
 80001b0:	f000 fe9a 	bl	8000ee8 <HAL_GPIO_DeInit>
	USBD_DeInit(&hUsbDeviceFS);
 80001b4:	480f      	ldr	r0, [pc, #60]	; (80001f4 <deinitEverything+0x4c>)
 80001b6:	f003 f950 	bl	800345a <USBD_DeInit>
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 80001ba:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <deinitEverything+0x50>)
 80001bc:	699a      	ldr	r2, [r3, #24]
 80001be:	f022 0210 	bic.w	r2, r2, #16
 80001c2:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 80001c4:	699a      	ldr	r2, [r3, #24]
 80001c6:	f022 0220 	bic.w	r2, r2, #32
 80001ca:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80001cc:	699a      	ldr	r2, [r3, #24]
 80001ce:	f022 0208 	bic.w	r2, r2, #8
 80001d2:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80001d4:	699a      	ldr	r2, [r3, #24]
 80001d6:	f022 0204 	bic.w	r2, r2, #4
 80001da:	619a      	str	r2, [r3, #24]
	HAL_RCC_DeInit();
 80001dc:	f001 fdb4 	bl	8001d48 <HAL_RCC_DeInit>
	HAL_DeInit();
 80001e0:	f000 fb74 	bl	80008cc <HAL_DeInit>
	SysTick->CTRL = 0;
 80001e4:	2200      	movs	r2, #0
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <deinitEverything+0x54>)
 80001e8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80001ea:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80001ec:	609a      	str	r2, [r3, #8]
}
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	40011000 	.word	0x40011000
 80001f4:	200003f0 	.word	0x200003f0
 80001f8:	40021000 	.word	0x40021000
 80001fc:	e000e010 	.word	0xe000e010

08000200 <flashWord>:
	Flashed_offset = 0;
}


void flashWord(uint32_t dataToFlash)
{
 8000200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if((flashStatus == Erased || flashStatus == Writing) && flashLocked == Unlocked)
 8000204:	4d1f      	ldr	r5, [pc, #124]	; (8000284 <flashWord+0x84>)
{
 8000206:	4607      	mov	r7, r0
	if((flashStatus == Erased || flashStatus == Writing) && flashLocked == Unlocked)
 8000208:	782b      	ldrb	r3, [r5, #0]
 800020a:	3b01      	subs	r3, #1
 800020c:	2b01      	cmp	r3, #1
 800020e:	d835      	bhi.n	800027c <flashWord+0x7c>
 8000210:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <flashWord+0x88>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	bb93      	cbnz	r3, 800027c <flashWord+0x7c>
	  uint8_t flash_attempt = 0;
	  uint32_t address;
	  //try 10 times to write before get the error exeption
	  do
	  {
		  address = APP_START + Flashed_offset;
 8000216:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000298 <flashWord+0x98>
 800021a:	260a      	movs	r6, #10
 800021c:	46c8      	mov	r8, r9
 800021e:	f8d9 4000 	ldr.w	r4, [r9]
		  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, dataToFlash);
 8000222:	2300      	movs	r3, #0
		  address = APP_START + Flashed_offset;
 8000224:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000228:	f504 44a0 	add.w	r4, r4, #20480	; 0x5000
		  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, dataToFlash);
 800022c:	463a      	mov	r2, r7
 800022e:	4621      	mov	r1, r4
 8000230:	2002      	movs	r0, #2
 8000232:	f000 fcbb 	bl	8000bac <HAL_FLASH_Program>
 8000236:	f88d 0007 	strb.w	r0, [sp, #7]
		  flash_attempt++;
	  }while(status != HAL_OK && flash_attempt < 10 && dataToFlash == readWord(address));
 800023a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800023e:	b133      	cbz	r3, 800024e <flashWord+0x4e>
 8000240:	3e01      	subs	r6, #1
 8000242:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8000246:	d002      	beq.n	800024e <flashWord+0x4e>
 8000248:	6823      	ldr	r3, [r4, #0]
 800024a:	429f      	cmp	r7, r3
 800024c:	d0e7      	beq.n	800021e <flashWord+0x1e>
	  if(status != HAL_OK){//Error exeption
 800024e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000252:	b133      	cbz	r3, 8000262 <flashWord+0x62>
		  CDC_Transmit_FS((uint8_t*)&"Flashing Error!\n", strlen("Flashing Error!\n"));
 8000254:	2110      	movs	r1, #16
 8000256:	480d      	ldr	r0, [pc, #52]	; (800028c <flashWord+0x8c>)
	}else
	{
	  CDC_Transmit_FS((uint8_t*)&"Error: Memory not unlocked nor erased!\n",
			  strlen("Error: Memory not unlocked nor erased!\n"));
	}
}
 8000258:	b003      	add	sp, #12
 800025a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  CDC_Transmit_FS((uint8_t*)&"Error: Memory not unlocked nor erased!\n",
 800025e:	f003 bd11 	b.w	8003c84 <CDC_Transmit_FS>
		  if(flashStatus != Writing)
 8000262:	782b      	ldrb	r3, [r5, #0]
		  CDC_Transmit_FS((uint8_t*)&"Flash: OK\n", strlen("Flash: OK\n"));
 8000264:	210a      	movs	r1, #10
		  if(flashStatus != Writing)
 8000266:	2b02      	cmp	r3, #2
			  flashStatus = Writing;
 8000268:	bf1c      	itt	ne
 800026a:	2302      	movne	r3, #2
 800026c:	702b      	strbne	r3, [r5, #0]
		  Flashed_offset += 4;
 800026e:	f8d8 3000 	ldr.w	r3, [r8]
		  CDC_Transmit_FS((uint8_t*)&"Flash: OK\n", strlen("Flash: OK\n"));
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <flashWord+0x90>)
		  Flashed_offset += 4;
 8000274:	3304      	adds	r3, #4
 8000276:	f8c8 3000 	str.w	r3, [r8]
		  CDC_Transmit_FS((uint8_t*)&"Flash: OK\n", strlen("Flash: OK\n"));
 800027a:	e7ed      	b.n	8000258 <flashWord+0x58>
	  CDC_Transmit_FS((uint8_t*)&"Error: Memory not unlocked nor erased!\n",
 800027c:	2127      	movs	r1, #39	; 0x27
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <flashWord+0x94>)
 8000280:	e7ea      	b.n	8000258 <flashWord+0x58>
 8000282:	bf00      	nop
 8000284:	200003c1 	.word	0x200003c1
 8000288:	200003c0 	.word	0x200003c0
 800028c:	080040d4 	.word	0x080040d4
 8000290:	080040e5 	.word	0x080040e5
 8000294:	080040f0 	.word	0x080040f0
 8000298:	200003c4 	.word	0x200003c4

0800029c <errorBlink>:
	read_data = *(uint32_t*)(address);
	return read_data;
}

void errorBlink(char UnknounCommand)
{
 800029c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 80002a4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80002a6:	485e      	ldr	r0, [pc, #376]	; (8000420 <errorBlink+0x184>)
 80002a8:	f000 fe8c 	bl	8000fc4 <HAL_GPIO_WritePin>
	while(1)
	{
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80002ac:	4d5c      	ldr	r5, [pc, #368]	; (8000420 <errorBlink+0x184>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	485a      	ldr	r0, [pc, #360]	; (8000420 <errorBlink+0x184>)
 80002b6:	f000 fe85 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80002ba:	20c8      	movs	r0, #200	; 0xc8
 80002bc:	f000 fb5e 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c6:	4856      	ldr	r0, [pc, #344]	; (8000420 <errorBlink+0x184>)
 80002c8:	f000 fe7c 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80002cc:	20c8      	movs	r0, #200	; 0xc8
 80002ce:	f000 fb55 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d8:	4851      	ldr	r0, [pc, #324]	; (8000420 <errorBlink+0x184>)
 80002da:	f000 fe73 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80002de:	20c8      	movs	r0, #200	; 0xc8
 80002e0:	f000 fb4c 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ea:	484d      	ldr	r0, [pc, #308]	; (8000420 <errorBlink+0x184>)
 80002ec:	f000 fe6a 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80002f0:	20c8      	movs	r0, #200	; 0xc8
 80002f2:	f000 fb43 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fc:	4848      	ldr	r0, [pc, #288]	; (8000420 <errorBlink+0x184>)
 80002fe:	f000 fe61 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000302:	20c8      	movs	r0, #200	; 0xc8
 8000304:	f000 fb3a 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030e:	4844      	ldr	r0, [pc, #272]	; (8000420 <errorBlink+0x184>)
 8000310:	f000 fe58 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000318:	f000 fb30 	bl	800097c <HAL_Delay>

		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	483f      	ldr	r0, [pc, #252]	; (8000420 <errorBlink+0x184>)
 8000324:	f000 fe4e 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8000328:	f44f 7048 	mov.w	r0, #800	; 0x320
 800032c:	f000 fb26 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000336:	483a      	ldr	r0, [pc, #232]	; (8000420 <errorBlink+0x184>)
 8000338:	f000 fe44 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000340:	f000 fb1c 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	4835      	ldr	r0, [pc, #212]	; (8000420 <errorBlink+0x184>)
 800034c:	f000 fe3a 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8000350:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000354:	f000 fb12 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4830      	ldr	r0, [pc, #192]	; (8000420 <errorBlink+0x184>)
 8000360:	f000 fe30 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000368:	f000 fb08 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	482b      	ldr	r0, [pc, #172]	; (8000420 <errorBlink+0x184>)
 8000374:	f000 fe26 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8000378:	f44f 7048 	mov.w	r0, #800	; 0x320
 800037c:	f000 fafe 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4826      	ldr	r0, [pc, #152]	; (8000420 <errorBlink+0x184>)
 8000388:	f000 fe1c 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800038c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000390:	f000 faf4 	bl	800097c <HAL_Delay>

		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	4821      	ldr	r0, [pc, #132]	; (8000420 <errorBlink+0x184>)
 800039c:	f000 fe12 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80003a0:	20c8      	movs	r0, #200	; 0xc8
 80003a2:	f000 faeb 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ac:	481c      	ldr	r0, [pc, #112]	; (8000420 <errorBlink+0x184>)
 80003ae:	f000 fe09 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80003b2:	20c8      	movs	r0, #200	; 0xc8
 80003b4:	f000 fae2 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4818      	ldr	r0, [pc, #96]	; (8000420 <errorBlink+0x184>)
 80003c0:	f000 fe00 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80003c4:	20c8      	movs	r0, #200	; 0xc8
 80003c6:	f000 fad9 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <errorBlink+0x184>)
 80003d2:	f000 fdf7 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80003d6:	20c8      	movs	r0, #200	; 0xc8
 80003d8:	f000 fad0 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <errorBlink+0x184>)
 80003e4:	f000 fdee 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80003e8:	20c8      	movs	r0, #200	; 0xc8
 80003ea:	f000 fac7 	bl	800097c <HAL_Delay>
		HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80003ee:	480c      	ldr	r0, [pc, #48]	; (8000420 <errorBlink+0x184>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f6:	f000 fde5 	bl	8000fc4 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 80003fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003fe:	f000 fabd 	bl	800097c <HAL_Delay>

		if(UnknounCommand)
 8000402:	2c00      	cmp	r4, #0
 8000404:	f43f af53 	beq.w	80002ae <errorBlink+0x12>
		{
			HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000408:	4628      	mov	r0, r5
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000410:	f000 fdd8 	bl	8000fc4 <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 8000414:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000418:	f000 fab0 	bl	800097c <HAL_Delay>
 800041c:	e747      	b.n	80002ae <errorBlink+0x12>
 800041e:	bf00      	nop
 8000420:	40011000 	.word	0x40011000

08000424 <jumpToApp>:
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 800042a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <jumpToApp+0x40>)
 800042e:	f000 fdc9 	bl	8000fc4 <HAL_GPIO_WritePin>
	uint8_t emptyCellCount = 0;
 8000432:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 8000434:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <jumpToApp+0x44>)
	for(uint8_t i=0; i<20; i++)
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <jumpToApp+0x48>)
		if(readWord(APP_START + (i*4)) == -1)
 8000438:	6810      	ldr	r0, [r2, #0]
 800043a:	3204      	adds	r2, #4
 800043c:	3001      	adds	r0, #1
			emptyCellCount++;
 800043e:	bf04      	itt	eq
 8000440:	3301      	addeq	r3, #1
 8000442:	b2db      	uxtbeq	r3, r3
	for(uint8_t i=0; i<20; i++)
 8000444:	428a      	cmp	r2, r1
 8000446:	d1f7      	bne.n	8000438 <jumpToApp+0x14>
	if(emptyCellCount != 20)
 8000448:	2b14      	cmp	r3, #20
 800044a:	d008      	beq.n	800045e <jumpToApp+0x3a>
		deinitEverything();
 800044c:	f7ff feac 	bl	80001a8 <deinitEverything>
		asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <jumpToApp+0x44>)
 8000452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000456:	f382 8808 	msr	MSP, r2
 800045a:	4718      	bx	r3
}
 800045c:	bd08      	pop	{r3, pc}
		errorBlink(0);
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ff1c 	bl	800029c <errorBlink>
 8000464:	40011000 	.word	0x40011000
 8000468:	08005000 	.word	0x08005000
 800046c:	08005050 	.word	0x08005050

08000470 <bootloaderInit>:
{
 8000470:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	482e      	ldr	r0, [pc, #184]	; (8000534 <bootloaderInit+0xc4>)
 800047a:	f000 fda3 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800047e:	2032      	movs	r0, #50	; 0x32
 8000480:	f000 fa7c 	bl	800097c <HAL_Delay>
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048a:	482a      	ldr	r0, [pc, #168]	; (8000534 <bootloaderInit+0xc4>)
 800048c:	f000 fd9a 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000490:	2032      	movs	r0, #50	; 0x32
 8000492:	f000 fa73 	bl	800097c <HAL_Delay>
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	4825      	ldr	r0, [pc, #148]	; (8000534 <bootloaderInit+0xc4>)
 800049e:	f000 fd91 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80004a2:	2032      	movs	r0, #50	; 0x32
 80004a4:	f000 fa6a 	bl	800097c <HAL_Delay>
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4821      	ldr	r0, [pc, #132]	; (8000534 <bootloaderInit+0xc4>)
 80004b0:	f000 fd88 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80004b4:	2032      	movs	r0, #50	; 0x32
 80004b6:	f000 fa61 	bl	800097c <HAL_Delay>
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c0:	481c      	ldr	r0, [pc, #112]	; (8000534 <bootloaderInit+0xc4>)
 80004c2:	f000 fd7f 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80004c6:	2032      	movs	r0, #50	; 0x32
 80004c8:	f000 fa58 	bl	800097c <HAL_Delay>
	HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	4818      	ldr	r0, [pc, #96]	; (8000534 <bootloaderInit+0xc4>)
 80004d4:	f000 fd76 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f000 fa4f 	bl	800097c <HAL_Delay>
	Flashed_offset = 0;
 80004de:	2300      	movs	r3, #0
	flashLocked = Locked;
 80004e0:	2101      	movs	r1, #1
	Flashed_offset = 0;
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <bootloaderInit+0xc8>)
 80004e4:	6013      	str	r3, [r2, #0]
	flashStatus = Unerased;
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <bootloaderInit+0xcc>)
 80004e8:	7013      	strb	r3, [r2, #0]
	flashLocked = Locked;
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <bootloaderInit+0xd0>)
 80004ec:	7011      	strb	r1, [r2, #0]
	return *RAM_Pointer;
 80004ee:	4a15      	ldr	r2, [pc, #84]	; (8000544 <bootloaderInit+0xd4>)
 80004f0:	6811      	ldr	r1, [r2, #0]
	switch(bootloaderMode)
 80004f2:	b1d9      	cbz	r1, 800052c <bootloaderInit+0xbc>
 80004f4:	3101      	adds	r1, #1
 80004f6:	d118      	bne.n	800052a <bootloaderInit+0xba>
 80004f8:	240a      	movs	r4, #10
				HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);
 80004fa:	4d0e      	ldr	r5, [pc, #56]	; (8000534 <bootloaderInit+0xc4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4628      	mov	r0, r5
 8000504:	f000 fd5e 	bl	8000fc4 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 fa37 	bl	800097c <HAL_Delay>
				HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4628      	mov	r0, r5
 8000516:	f000 fd55 	bl	8000fc4 <HAL_GPIO_WritePin>
				HAL_Delay(90);
 800051a:	3c01      	subs	r4, #1
 800051c:	205a      	movs	r0, #90	; 0x5a
 800051e:	f000 fa2d 	bl	800097c <HAL_Delay>
			for(uint8_t i=0; i<10; i++)
 8000522:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000526:	d1e9      	bne.n	80004fc <bootloaderInit+0x8c>
}
 8000528:	bd38      	pop	{r3, r4, r5, pc}
	*RAM_Pointer = data;
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			jumpToApp();
 8000530:	f7ff bf78 	b.w	8000424 <jumpToApp>
 8000534:	40011000 	.word	0x40011000
 8000538:	200003c4 	.word	0x200003c4
 800053c:	200003c1 	.word	0x200003c1
 8000540:	200003c0 	.word	0x200003c0
 8000544:	20004ff9 	.word	0x20004ff9

08000548 <eraseMemory>:
{
 8000548:	b510      	push	{r4, lr}
	EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 800054a:	232c      	movs	r3, #44	; 0x2c
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800054c:	2400      	movs	r4, #0
{
 800054e:	b086      	sub	sp, #24
	EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <eraseMemory+0x3c>)
	status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000552:	a901      	add	r1, sp, #4
 8000554:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 8000556:	e9cd 2304 	strd	r2, r3, [sp, #16]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800055a:	9402      	str	r4, [sp, #8]
	status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800055c:	f000 fb9c 	bl	8000c98 <HAL_FLASHEx_Erase>
 8000560:	f88d 0003 	strb.w	r0, [sp, #3]
	if(status_erase != HAL_OK)
 8000564:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800056c:	b113      	cbz	r3, 8000574 <eraseMemory+0x2c>
		errorBlink(0);
 800056e:	4620      	mov	r0, r4
 8000570:	f7ff fe94 	bl	800029c <errorBlink>
	flashStatus = Erased;
 8000574:	2101      	movs	r1, #1
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <eraseMemory+0x40>)
 8000578:	7019      	strb	r1, [r3, #0]
	Flashed_offset = 0;
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <eraseMemory+0x44>)
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	b006      	add	sp, #24
 8000580:	bd10      	pop	{r4, pc}
 8000582:	bf00      	nop
 8000584:	08005000 	.word	0x08005000
 8000588:	200003c1 	.word	0x200003c1
 800058c:	200003c4 	.word	0x200003c4

08000590 <string_compare>:

	return(command);
}

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000590:	b570      	push	{r4, r5, r6, lr}
	 uint8_t comVAR=0, i;
	 for(i=0;i<length;i++)
 8000592:	2400      	movs	r4, #0
	 uint8_t comVAR=0, i;
 8000594:	4623      	mov	r3, r4
	 for(i=0;i<length;i++)
 8000596:	b2e5      	uxtb	r5, r4
 8000598:	4295      	cmp	r5, r2
 800059a:	d303      	bcc.n	80005a4 <string_compare+0x14>
	   	  	  else comVAR=0;
	   	}
	 if (comVAR==length)
		 	return 1;
	 else 	return 0;
}
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4258      	negs	r0, r3
 80005a0:	4158      	adcs	r0, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
	   		  if(array1[i]==array2[i])
 80005a4:	5d46      	ldrb	r6, [r0, r5]
 80005a6:	5d4d      	ldrb	r5, [r1, r5]
 80005a8:	3401      	adds	r4, #1
 80005aa:	42ae      	cmp	r6, r5
	   	  		  comVAR++;
 80005ac:	bf0a      	itet	eq
 80005ae:	3301      	addeq	r3, #1
	   	  	  else comVAR=0;
 80005b0:	2300      	movne	r3, #0
	   	  		  comVAR++;
 80005b2:	b2db      	uxtbeq	r3, r3
	 for(i=0;i<length;i++)
 80005b4:	e7ef      	b.n	8000596 <string_compare+0x6>
	...

080005b8 <commandDecoding>:
Command commandDecoding(char array1[]){
 80005b8:	b538      	push	{r3, r4, r5, lr}
	if(string_compare((char*)array1, ERASE_FLASH_MEMORY, strlen(ERASE_FLASH_MEMORY)))
 80005ba:	220e      	movs	r2, #14
 80005bc:	4914      	ldr	r1, [pc, #80]	; (8000610 <commandDecoding+0x58>)
Command commandDecoding(char array1[]){
 80005be:	4605      	mov	r5, r0
	if(string_compare((char*)array1, ERASE_FLASH_MEMORY, strlen(ERASE_FLASH_MEMORY)))
 80005c0:	f7ff ffe6 	bl	8000590 <string_compare>
	if(string_compare((char*)array1, FLASHING_START, strlen(FLASHING_START)))
 80005c4:	220e      	movs	r2, #14
	if(string_compare((char*)array1, ERASE_FLASH_MEMORY, strlen(ERASE_FLASH_MEMORY)))
 80005c6:	4604      	mov	r4, r0
	if(string_compare((char*)array1, FLASHING_START, strlen(FLASHING_START)))
 80005c8:	4912      	ldr	r1, [pc, #72]	; (8000614 <commandDecoding+0x5c>)
 80005ca:	4628      	mov	r0, r5
 80005cc:	f7ff ffe0 	bl	8000590 <string_compare>
 80005d0:	b9e0      	cbnz	r0, 800060c <commandDecoding+0x54>
	Command command = InvalidCommand;
 80005d2:	3c00      	subs	r4, #0
 80005d4:	bf18      	it	ne
 80005d6:	2401      	movne	r4, #1
	if(string_compare((char*)array1, FLASHING_FINISH, strlen(FLASHING_FINISH)))
 80005d8:	220e      	movs	r2, #14
 80005da:	4628      	mov	r0, r5
 80005dc:	490e      	ldr	r1, [pc, #56]	; (8000618 <commandDecoding+0x60>)
 80005de:	f7ff ffd7 	bl	8000590 <string_compare>
	if(string_compare((char*)array1, FLASHING_ABORT, strlen(FLASHING_ABORT)))
 80005e2:	220e      	movs	r2, #14
	if(string_compare((char*)array1, FLASHING_FINISH, strlen(FLASHING_FINISH)))
 80005e4:	2800      	cmp	r0, #0
	if(string_compare((char*)array1, FLASHING_ABORT, strlen(FLASHING_ABORT)))
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <commandDecoding+0x64>)
 80005e8:	4628      	mov	r0, r5
		command = FlashFinish;
 80005ea:	bf18      	it	ne
 80005ec:	2403      	movne	r4, #3
	if(string_compare((char*)array1, FLASHING_ABORT, strlen(FLASHING_ABORT)))
 80005ee:	f7ff ffcf 	bl	8000590 <string_compare>
	if(string_compare((char*)array1, APPLICATION_START, strlen(APPLICATION_START)))
 80005f2:	220e      	movs	r2, #14
	if(string_compare((char*)array1, FLASHING_ABORT, strlen(FLASHING_ABORT)))
 80005f4:	2800      	cmp	r0, #0
	if(string_compare((char*)array1, APPLICATION_START, strlen(APPLICATION_START)))
 80005f6:	490a      	ldr	r1, [pc, #40]	; (8000620 <commandDecoding+0x68>)
 80005f8:	4628      	mov	r0, r5
		command = FlashAbort;
 80005fa:	bf18      	it	ne
 80005fc:	2404      	movne	r4, #4
	if(string_compare((char*)array1, APPLICATION_START, strlen(APPLICATION_START)))
 80005fe:	f7ff ffc7 	bl	8000590 <string_compare>
 8000602:	2800      	cmp	r0, #0
}
 8000604:	bf0c      	ite	eq
 8000606:	4620      	moveq	r0, r4
 8000608:	2005      	movne	r0, #5
 800060a:	bd38      	pop	{r3, r4, r5, pc}
		command = FlashStart;
 800060c:	2402      	movs	r4, #2
 800060e:	e7e3      	b.n	80005d8 <commandDecoding+0x20>
 8000610:	08004118 	.word	0x08004118
 8000614:	08004127 	.word	0x08004127
 8000618:	08004136 	.word	0x08004136
 800061c:	08004145 	.word	0x08004145
 8000620:	08004154 	.word	0x08004154

08000624 <messageHandler>:

void messageHandler(uint8_t* Buf)
{
 8000624:	b510      	push	{r4, lr}
	Command comandReceived = commandDecoding((char*)Buf);
 8000626:	f7ff ffc7 	bl	80005b8 <commandDecoding>
	switch(comandReceived){
 800062a:	2805      	cmp	r0, #5
 800062c:	d850      	bhi.n	80006d0 <messageHandler+0xac>
 800062e:	e8df f000 	tbb	[pc, r0]
 8000632:	0903      	.short	0x0903
 8000634:	4c3c2719 	.word	0x4c3c2719
		case InvalidCommand:
			CDC_Transmit_FS((uint8_t*)&"Error: Unknown command!\n", strlen("Error: Unknown command!\n"));
 8000638:	2118      	movs	r1, #24
 800063a:	4826      	ldr	r0, [pc, #152]	; (80006d4 <messageHandler+0xb0>)
			break;
		case StartApplication:
			Write_BootMode(RAM_ADDRESS_BOOTMODE, JumpMode);
			break;
	}
}
 800063c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			CDC_Transmit_FS((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
 8000640:	f003 bb20 	b.w	8003c84 <CDC_Transmit_FS>
			if(flashLocked != Unlocked)
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <messageHandler+0xb4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b10b      	cbz	r3, 800064e <messageHandler+0x2a>
				unlockMemory();
 800064a:	f7ff fd7f 	bl	800014c <unlockMemory>
			if(flashStatus != Erased)
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <messageHandler+0xb8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d001      	beq.n	800065a <messageHandler+0x36>
				eraseMemory();
 8000656:	f7ff ff77 	bl	8000548 <eraseMemory>
			lockMemory();
 800065a:	f7ff fd8d 	bl	8000178 <lockMemory>
			CDC_Transmit_FS((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
 800065e:	210f      	movs	r1, #15
 8000660:	481f      	ldr	r0, [pc, #124]	; (80006e0 <messageHandler+0xbc>)
 8000662:	e7eb      	b.n	800063c <messageHandler+0x18>
			if(flashLocked != Unlocked)
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <messageHandler+0xb4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b10b      	cbz	r3, 800066e <messageHandler+0x4a>
				unlockMemory();
 800066a:	f7ff fd6f 	bl	800014c <unlockMemory>
			if(flashStatus != Erased)
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <messageHandler+0xb8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d001      	beq.n	800067a <messageHandler+0x56>
				eraseMemory();
 8000676:	f7ff ff67 	bl	8000548 <eraseMemory>
			CDC_Transmit_FS((uint8_t*)&"Flash: Unlocked & Erased!\n", strlen("Flash: Unlocked & Erased!\n"));
 800067a:	211a      	movs	r1, #26
 800067c:	4819      	ldr	r0, [pc, #100]	; (80006e4 <messageHandler+0xc0>)
 800067e:	e7dd      	b.n	800063c <messageHandler+0x18>
			if(flashStatus == Writing){
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <messageHandler+0xb8>)
 8000682:	7813      	ldrb	r3, [r2, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d10d      	bne.n	80006a4 <messageHandler+0x80>
				flashStatus = Unerased;
 8000688:	2300      	movs	r3, #0
 800068a:	7013      	strb	r3, [r2, #0]
				if(flashLocked != Locked)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <messageHandler+0xb4>)
 800068e:	461c      	mov	r4, r3
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	2a01      	cmp	r2, #1
 8000694:	d001      	beq.n	800069a <messageHandler+0x76>
					lockMemory();
 8000696:	f7ff fd6f 	bl	8000178 <lockMemory>
	*RAM_Pointer = data;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <messageHandler+0xc4>)
				CDC_Transmit_FS((uint8_t*)&"Flash: Success!\n", strlen("Flash: Success!\n"));
 800069c:	2110      	movs	r1, #16
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <messageHandler+0xc8>)
	*RAM_Pointer = data;
 80006a0:	601c      	str	r4, [r3, #0]
				CDC_Transmit_FS((uint8_t*)&"Flash: Success!\n", strlen("Flash: Success!\n"));
 80006a2:	e7cb      	b.n	800063c <messageHandler+0x18>
				CDC_Transmit_FS((uint8_t*)&"Flash: Error: flash procedure not running\n", strlen("Flash: Error: flash procedure not running\n"));
 80006a4:	212a      	movs	r1, #42	; 0x2a
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <messageHandler+0xcc>)
 80006a8:	e7c8      	b.n	800063c <messageHandler+0x18>
			if(flashLocked != Unlocked)
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <messageHandler+0xb4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b10b      	cbz	r3, 80006b4 <messageHandler+0x90>
				unlockMemory();
 80006b0:	f7ff fd4c 	bl	800014c <unlockMemory>
			if(flashStatus != Erased)
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <messageHandler+0xb8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d001      	beq.n	80006c0 <messageHandler+0x9c>
				eraseMemory();
 80006bc:	f7ff ff44 	bl	8000548 <eraseMemory>
			lockMemory();
 80006c0:	f7ff fd5a 	bl	8000178 <lockMemory>
			CDC_Transmit_FS((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
 80006c4:	2110      	movs	r1, #16
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <messageHandler+0xd0>)
 80006c8:	e7b8      	b.n	800063c <messageHandler+0x18>
	*RAM_Pointer = data;
 80006ca:	2200      	movs	r2, #0
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <messageHandler+0xc4>)
 80006ce:	601a      	str	r2, [r3, #0]
}
 80006d0:	bd10      	pop	{r4, pc}
 80006d2:	bf00      	nop
 80006d4:	08004163 	.word	0x08004163
 80006d8:	200003c0 	.word	0x200003c0
 80006dc:	200003c1 	.word	0x200003c1
 80006e0:	0800417c 	.word	0x0800417c
 80006e4:	0800418c 	.word	0x0800418c
 80006e8:	20004ff9 	.word	0x20004ff9
 80006ec:	080041a7 	.word	0x080041a7
 80006f0:	080041b8 	.word	0x080041b8
 80006f4:	080041e3 	.word	0x080041e3

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	2410      	movs	r4, #16
{
 80006fc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	4622      	mov	r2, r4
 8000700:	2100      	movs	r1, #0
 8000702:	a80d      	add	r0, sp, #52	; 0x34
 8000704:	f003 fcd2 	bl	80040ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	2214      	movs	r2, #20
 800070a:	2100      	movs	r1, #0
 800070c:	eb0d 0002 	add.w	r0, sp, r2
 8000710:	f003 fccc 	bl	80040ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	4622      	mov	r2, r4
 8000716:	2100      	movs	r1, #0
 8000718:	a801      	add	r0, sp, #4
 800071a:	f003 fcc7 	bl	80040ac <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000726:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072c:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000730:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000736:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800073a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f001 fb70 	bl	8001e20 <HAL_RCC_OscConfig>
 8000740:	b108      	cbz	r0, 8000746 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000742:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	4629      	mov	r1, r5
 8000758:	a805      	add	r0, sp, #20
 800075a:	f001 fd37 	bl	80021cc <HAL_RCC_ClockConfig>
 800075e:	b108      	cbz	r0, 8000764 <SystemClock_Config+0x6c>
 8000760:	b672      	cpsid	i
  while (1)
 8000762:	e7fe      	b.n	8000762 <SystemClock_Config+0x6a>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000764:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000766:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000768:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	f001 fdcb 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	b108      	cbz	r0, 8000774 <SystemClock_Config+0x7c>
 8000770:	b672      	cpsid	i
  while (1)
 8000772:	e7fe      	b.n	8000772 <SystemClock_Config+0x7a>
}
 8000774:	b015      	add	sp, #84	; 0x54
 8000776:	bd30      	pop	{r4, r5, pc}

08000778 <main>:
{
 8000778:	b500      	push	{lr}
 800077a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800077c:	f000 f8da 	bl	8000934 <HAL_Init>
  SystemClock_Config();
 8000780:	f7ff ffba 	bl	80006f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	2210      	movs	r2, #16
 8000786:	2100      	movs	r1, #0
 8000788:	eb0d 0002 	add.w	r0, sp, r2
 800078c:	f003 fc8e 	bl	80040ac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <main+0x94>)
  HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <main+0x98>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	f042 0210 	orr.w	r2, r2, #16
 800079e:	619a      	str	r2, [r3, #24]
 80007a0:	699a      	ldr	r2, [r3, #24]
 80007a2:	f002 0210 	and.w	r2, r2, #16
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	f042 0220 	orr.w	r2, r2, #32
 80007b0:	619a      	str	r2, [r3, #24]
 80007b2:	699a      	ldr	r2, [r3, #24]
 80007b4:	f002 0220 	and.w	r2, r2, #32
 80007b8:	9201      	str	r2, [sp, #4]
 80007ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	699a      	ldr	r2, [r3, #24]
 80007be:	f042 0204 	orr.w	r2, r2, #4
 80007c2:	619a      	str	r2, [r3, #24]
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	f002 0204 	and.w	r2, r2, #4
 80007ca:	9202      	str	r2, [sp, #8]
 80007cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	699a      	ldr	r2, [r3, #24]
 80007d0:	f042 0208 	orr.w	r2, r2, #8
 80007d4:	619a      	str	r2, [r3, #24]
 80007d6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	9303      	str	r3, [sp, #12]
 80007e0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);
 80007e2:	f000 fbef 	bl	8000fc4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ea:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
  HAL_GPIO_Init(BootloaderLed_GPIO_Port, &GPIO_InitStruct);
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <main+0x98>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(BootloaderLed_GPIO_Port, &GPIO_InitStruct);
 80007fa:	a904      	add	r1, sp, #16
 80007fc:	f000 fa98 	bl	8000d30 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000800:	f003 f9c6 	bl	8003b90 <MX_USB_DEVICE_Init>
  bootloaderInit();
 8000804:	f7ff fe34 	bl	8000470 <bootloaderInit>
  while (1)
 8000808:	e7fe      	b.n	8000808 <main+0x90>
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	40011000 	.word	0x40011000

08000814 <Error_Handler>:
 8000814:	b672      	cpsid	i
  while (1)
 8000816:	e7fe      	b.n	8000816 <Error_Handler+0x2>

08000818 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_MspInit+0x3c>)
{
 800081a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800081c:	699a      	ldr	r2, [r3, #24]
 800081e:	f042 0201 	orr.w	r2, r2, #1
 8000822:	619a      	str	r2, [r3, #24]
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	f002 0201 	and.w	r2, r2, #1
 800082a:	9200      	str	r2, [sp, #0]
 800082c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000834:	61da      	str	r2, [r3, #28]
 8000836:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000842:	6853      	ldr	r3, [r2, #4]
 8000844:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	b002      	add	sp, #8
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler>

0800085e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler>

08000860 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler>

08000862 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler>

08000864 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler>

08000866 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 b874 	b.w	8000958 <HAL_IncTick>

08000870 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000870:	4801      	ldr	r0, [pc, #4]	; (8000878 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000872:	f000 bc81 	b.w	8001178 <HAL_PCD_IRQHandler>
 8000876:	bf00      	nop
 8000878:	20001084 	.word	0x20001084

0800087c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	4770      	bx	lr
	...

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000882:	e003      	b.n	800088c <LoopCopyDataInit>

08000884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800088a:	3104      	adds	r1, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000894:	d3f6      	bcc.n	8000884 <CopyDataInit>
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000898:	e002      	b.n	80008a0 <LoopFillZerobss>

0800089a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800089c:	f842 3b04 	str.w	r3, [r2], #4

080008a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a4:	d3f9      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a6:	f7ff ffe9 	bl	800087c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f003 fbdb 	bl	8004064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff ff63 	bl	8000778 <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r3, =_sidata
 80008b4:	0800425c 	.word	0x0800425c
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008bc:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80008c0:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 80008c4:	20001370 	.word	0x20001370

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>

080008ca <HAL_MspDeInit>:
 80008ca:	4770      	bx	lr

080008cc <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80008cc:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80008ce:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 80008d2:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <HAL_DeInit+0x1c>)
 80008d6:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80008d8:	611c      	str	r4, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80008da:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80008dc:	60dc      	str	r4, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80008de:	f7ff fff4 	bl	80008ca <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 80008e2:	4620      	mov	r0, r4
 80008e4:	bd10      	pop	{r4, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_InitTick+0x3c>)
{
 80008f0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f2:	7818      	ldrb	r0, [r3, #0]
 80008f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_InitTick+0x40>)
 80008fe:	6810      	ldr	r0, [r2, #0]
 8000900:	fbb0 f0f3 	udiv	r0, r0, r3
 8000904:	f000 f8b2 	bl	8000a6c <HAL_SYSTICK_Config>
 8000908:	4604      	mov	r4, r0
 800090a:	b958      	cbnz	r0, 8000924 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090c:	2d0f      	cmp	r5, #15
 800090e:	d809      	bhi.n	8000924 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	4602      	mov	r2, r0
 8000912:	4629      	mov	r1, r5
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 f854 	bl	80009c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4620      	mov	r0, r4
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <HAL_InitTick+0x44>)
 8000920:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000922:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000924:	2001      	movs	r0, #1
 8000926:	e7fc      	b.n	8000922 <HAL_InitTick+0x36>
 8000928:	20000004 	.word	0x20000004
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008

08000934 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x20>)
{
 8000936:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000942:	f000 f82d 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ffd0 	bl	80008ec <HAL_InitTick>
  HAL_MspInit();
 800094c:	f7ff ff64 	bl	8000818 <HAL_MspInit>
}
 8000950:	2000      	movs	r0, #0
 8000952:	bd08      	pop	{r3, pc}
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_IncTick+0x10>)
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <HAL_IncTick+0x14>)
 800095c:	6811      	ldr	r1, [r2, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	440b      	add	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	200003c8 	.word	0x200003c8
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000970:	4b01      	ldr	r3, [pc, #4]	; (8000978 <HAL_GetTick+0x8>)
 8000972:	6818      	ldr	r0, [r3, #0]
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	200003c8 	.word	0x200003c8

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000980:	f7ff fff6 	bl	8000970 <HAL_GetTick>
 8000984:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000988:	bf1e      	ittt	ne
 800098a:	4b04      	ldrne	r3, [pc, #16]	; (800099c <HAL_Delay+0x20>)
 800098c:	781b      	ldrbne	r3, [r3, #0]
 800098e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000990:	f7ff ffee 	bl	8000970 <HAL_GetTick>
 8000994:	1b43      	subs	r3, r0, r5
 8000996:	42a3      	cmp	r3, r4
 8000998:	d3fa      	bcc.n	8000990 <HAL_Delay+0x14>
  {
  }
}
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4907      	ldr	r1, [pc, #28]	; (80009c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b530      	push	{r4, r5, lr}
 80009c8:	68dc      	ldr	r4, [r3, #12]
 80009ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	bf28      	it	cs
 80009d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e0:	bf98      	it	ls
 80009e2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e8:	bf88      	it	hi
 80009ea:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	ea21 0303 	bic.w	r3, r1, r3
 80009f0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f2:	fa05 f404 	lsl.w	r4, r5, r4
 80009f6:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	bfac      	ite	ge
 8000a02:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	4a07      	ldrlt	r2, [pc, #28]	; (8000a24 <HAL_NVIC_SetPriority+0x60>)
 8000a08:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000a0c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	bfab      	itete	ge
 8000a10:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a1e:	bd30      	pop	{r4, r5, pc}
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	e000ed14 	.word	0xe000ed14

08000a28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	db08      	blt.n	8000a3e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	0942      	lsrs	r2, r0, #5
 8000a30:	f000 001f 	and.w	r0, r0, #31
 8000a34:	fa03 f000 	lsl.w	r0, r3, r0
 8000a38:	4b01      	ldr	r3, [pc, #4]	; (8000a40 <HAL_NVIC_EnableIRQ+0x18>)
 8000a3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a44:	2800      	cmp	r0, #0
 8000a46:	db0d      	blt.n	8000a64 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a48:	2201      	movs	r2, #1
 8000a4a:	0943      	lsrs	r3, r0, #5
 8000a4c:	f000 001f 	and.w	r0, r0, #31
 8000a50:	fa02 f000 	lsl.w	r0, r2, r0
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_NVIC_DisableIRQ+0x24>)
 8000a56:	3320      	adds	r3, #32
 8000a58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a60:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a72:	d20a      	bcs.n	8000a8a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <FLASH_SetErrorCode+0x48>)
 8000a9a:	68d3      	ldr	r3, [r2, #12]
 8000a9c:	f013 0310 	ands.w	r3, r3, #16
 8000aa0:	d005      	beq.n	8000aae <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000aa2:	4910      	ldr	r1, [pc, #64]	; (8000ae4 <FLASH_SetErrorCode+0x4c>)
 8000aa4:	69cb      	ldr	r3, [r1, #28]
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000aac:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000aae:	68d2      	ldr	r2, [r2, #12]
 8000ab0:	0750      	lsls	r0, r2, #29
 8000ab2:	d506      	bpl.n	8000ac2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ab4:	490b      	ldr	r1, [pc, #44]	; (8000ae4 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000aba:	69ca      	ldr	r2, [r1, #28]
 8000abc:	f042 0201 	orr.w	r2, r2, #1
 8000ac0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <FLASH_SetErrorCode+0x48>)
 8000ac4:	69d1      	ldr	r1, [r2, #28]
 8000ac6:	07c9      	lsls	r1, r1, #31
 8000ac8:	d508      	bpl.n	8000adc <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <FLASH_SetErrorCode+0x4c>)
 8000acc:	69c1      	ldr	r1, [r0, #28]
 8000ace:	f041 0104 	orr.w	r1, r1, #4
 8000ad2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ad4:	69d1      	ldr	r1, [r2, #28]
 8000ad6:	f021 0101 	bic.w	r1, r1, #1
 8000ada:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000adc:	60d3      	str	r3, [r2, #12]
}  
 8000ade:	4770      	bx	lr
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	200003d0 	.word	0x200003d0

08000ae8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_FLASH_Unlock+0x1c>)
 8000aea:	6918      	ldr	r0, [r3, #16]
 8000aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000af0:	d007      	beq.n	8000b02 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <HAL_FLASH_Unlock+0x20>)
 8000af4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000af6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000afa:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000afc:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000afe:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000b02:	4770      	bx	lr
 8000b04:	40022000 	.word	0x40022000
 8000b08:	45670123 	.word	0x45670123

08000b0c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <HAL_FLASH_Lock+0x10>)
}
 8000b0e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b10:	6913      	ldr	r3, [r2, #16]
 8000b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b16:	6113      	str	r3, [r2, #16]
}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_FLASH_OB_Unlock+0x1c>)
 8000b22:	6918      	ldr	r0, [r3, #16]
 8000b24:	f410 7000 	ands.w	r0, r0, #512	; 0x200
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000b28:	bf09      	itett	eq
 8000b2a:	4a05      	ldreq	r2, [pc, #20]	; (8000b40 <HAL_FLASH_OB_Unlock+0x20>)
    return HAL_ERROR;
 8000b2c:	2001      	movne	r0, #1
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000b2e:	609a      	streq	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000b30:	f102 3288 	addeq.w	r2, r2, #2290649224	; 0x88888888
 8000b34:	bf08      	it	eq
 8000b36:	609a      	streq	r2, [r3, #8]
}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000
 8000b40:	45670123 	.word	0x45670123

08000b44 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_FLASH_OB_Lock+0x10>)
}
 8000b46:	2000      	movs	r0, #0
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000b48:	6913      	ldr	r3, [r2, #16]
 8000b4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b4e:	6113      	str	r3, [r2, #16]
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <FLASH_WaitForLastOperation>:
{
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ff08 	bl	8000970 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b60:	4d11      	ldr	r5, [pc, #68]	; (8000ba8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000b62:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b64:	462e      	mov	r6, r5
 8000b66:	68eb      	ldr	r3, [r5, #12]
 8000b68:	07d8      	lsls	r0, r3, #31
 8000b6a:	d412      	bmi.n	8000b92 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b6c:	68eb      	ldr	r3, [r5, #12]
 8000b6e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b70:	bf44      	itt	mi
 8000b72:	2320      	movmi	r3, #32
 8000b74:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b76:	68f3      	ldr	r3, [r6, #12]
 8000b78:	06da      	lsls	r2, r3, #27
 8000b7a:	d406      	bmi.n	8000b8a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b7c:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b7e:	07db      	lsls	r3, r3, #31
 8000b80:	d403      	bmi.n	8000b8a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b82:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b84:	f010 0004 	ands.w	r0, r0, #4
 8000b88:	d007      	beq.n	8000b9a <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8000b8a:	f7ff ff85 	bl	8000a98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
 8000b90:	e003      	b.n	8000b9a <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000b92:	1c63      	adds	r3, r4, #1
 8000b94:	d0e7      	beq.n	8000b66 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b96:	b90c      	cbnz	r4, 8000b9c <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000b98:	2003      	movs	r0, #3
}
 8000b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b9c:	f7ff fee8 	bl	8000970 <HAL_GetTick>
 8000ba0:	1bc0      	subs	r0, r0, r7
 8000ba2:	42a0      	cmp	r0, r4
 8000ba4:	d9df      	bls.n	8000b66 <FLASH_WaitForLastOperation+0xe>
 8000ba6:	e7f7      	b.n	8000b98 <FLASH_WaitForLastOperation+0x40>
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_FLASH_Program>:
{
 8000bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000bb0:	4e25      	ldr	r6, [pc, #148]	; (8000c48 <HAL_FLASH_Program+0x9c>)
{
 8000bb2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8000bb4:	7e33      	ldrb	r3, [r6, #24]
{
 8000bb6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000bb8:	2b01      	cmp	r3, #1
{
 8000bba:	4688      	mov	r8, r1
 8000bbc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8000bbe:	d040      	beq.n	8000c42 <HAL_FLASH_Program+0x96>
 8000bc0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bc2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000bc6:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bc8:	f7ff ffc6 	bl	8000b58 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000bcc:	bba8      	cbnz	r0, 8000c3a <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000bce:	2d01      	cmp	r5, #1
 8000bd0:	d003      	beq.n	8000bda <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000bd2:	2d02      	cmp	r5, #2
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2502      	moveq	r5, #2
 8000bd8:	2504      	movne	r5, #4
 8000bda:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bde:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000be0:	f8df b068 	ldr.w	fp, [pc, #104]	; 8000c4c <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000be4:	ea4f 140a 	mov.w	r4, sl, lsl #4
 8000be8:	f1c4 0120 	rsb	r1, r4, #32
 8000bec:	f1a4 0220 	sub.w	r2, r4, #32
 8000bf0:	fa07 f101 	lsl.w	r1, r7, r1
 8000bf4:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bf8:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	fa27 f202 	lsr.w	r2, r7, r2
 8000c00:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c02:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c06:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c08:	f042 0201 	orr.w	r2, r2, #1
 8000c0c:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c10:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8000c14:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c18:	f7ff ff9e 	bl	8000b58 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000c1c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000c20:	f022 0201 	bic.w	r2, r2, #1
 8000c24:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000c28:	b938      	cbnz	r0, 8000c3a <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8000c2a:	f10a 0a01 	add.w	sl, sl, #1
 8000c2e:	fa5f f28a 	uxtb.w	r2, sl
 8000c32:	4295      	cmp	r5, r2
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	d8d4      	bhi.n	8000be4 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	7633      	strb	r3, [r6, #24]
}
 8000c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000c42:	2002      	movs	r0, #2
 8000c44:	e7fb      	b.n	8000c3e <HAL_FLASH_Program+0x92>
 8000c46:	bf00      	nop
 8000c48:	200003d0 	.word	0x200003d0
 8000c4c:	40022000 	.word	0x40022000

08000c50 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c50:	2200      	movs	r2, #0
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <FLASH_MassErase.isra.0+0x1c>)
 8000c54:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <FLASH_MassErase.isra.0+0x20>)
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	f042 0204 	orr.w	r2, r2, #4
 8000c5e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c66:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200003d0 	.word	0x200003d0
 8000c70:	40022000 	.word	0x40022000

08000c74 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c74:	2200      	movs	r2, #0
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <FLASH_PageErase+0x1c>)
 8000c78:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <FLASH_PageErase+0x20>)
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	f042 0202 	orr.w	r2, r2, #2
 8000c82:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c84:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c8c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c8e:	4770      	bx	lr
 8000c90:	200003d0 	.word	0x200003d0
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_FLASHEx_Erase>:
{
 8000c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000c9c:	4e22      	ldr	r6, [pc, #136]	; (8000d28 <HAL_FLASHEx_Erase+0x90>)
{
 8000c9e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000ca0:	7e33      	ldrb	r3, [r6, #24]
{
 8000ca2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d03d      	beq.n	8000d24 <HAL_FLASHEx_Erase+0x8c>
 8000ca8:	2401      	movs	r4, #1
 8000caa:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000cac:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000cae:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d113      	bne.n	8000cde <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000cb6:	f7ff ff4f 	bl	8000b58 <FLASH_WaitForLastOperation>
 8000cba:	b120      	cbz	r0, 8000cc6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cbc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	7633      	strb	r3, [r6, #24]
}
 8000cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8000cc6:	f7ff ffc3 	bl	8000c50 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cce:	f7ff ff43 	bl	8000b58 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_FLASHEx_Erase+0x94>)
 8000cd4:	6913      	ldr	r3, [r2, #16]
 8000cd6:	f023 0304 	bic.w	r3, r3, #4
 8000cda:	6113      	str	r3, [r2, #16]
 8000cdc:	e7ef      	b.n	8000cbe <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000cde:	f7ff ff3b 	bl	8000b58 <FLASH_WaitForLastOperation>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d1ea      	bne.n	8000cbc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cee:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000cf0:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cf2:	4c0e      	ldr	r4, [pc, #56]	; (8000d2c <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000cf4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8000cf8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000cfc:	42bb      	cmp	r3, r7
 8000cfe:	d9de      	bls.n	8000cbe <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000d00:	4638      	mov	r0, r7
 8000d02:	f7ff ffb7 	bl	8000c74 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d0a:	f7ff ff25 	bl	8000b58 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000d0e:	6923      	ldr	r3, [r4, #16]
 8000d10:	f023 0302 	bic.w	r3, r3, #2
 8000d14:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000d16:	b110      	cbz	r0, 8000d1e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000d18:	f8c8 7000 	str.w	r7, [r8]
            break;
 8000d1c:	e7cf      	b.n	8000cbe <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000d1e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000d22:	e7e7      	b.n	8000cf4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000d24:	2002      	movs	r0, #2
 8000d26:	e7cc      	b.n	8000cc2 <HAL_FLASHEx_Erase+0x2a>
 8000d28:	200003d0 	.word	0x200003d0
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d34:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d36:	4616      	mov	r6, r2
 8000d38:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3a:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000edc <HAL_GPIO_Init+0x1ac>
 8000d3e:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8000ee0 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	680d      	ldr	r5, [r1, #0]
 8000d44:	fa35 f406 	lsrs.w	r4, r5, r6
 8000d48:	d102      	bne.n	8000d50 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000d4a:	b003      	add	sp, #12
 8000d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000d50:	f04f 0801 	mov.w	r8, #1
 8000d54:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d58:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000d5c:	ea38 0505 	bics.w	r5, r8, r5
 8000d60:	d17c      	bne.n	8000e5c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000d62:	684d      	ldr	r5, [r1, #4]
 8000d64:	2d03      	cmp	r5, #3
 8000d66:	d807      	bhi.n	8000d78 <HAL_GPIO_Init+0x48>
 8000d68:	3d01      	subs	r5, #1
 8000d6a:	2d02      	cmp	r5, #2
 8000d6c:	f200 8088 	bhi.w	8000e80 <HAL_GPIO_Init+0x150>
 8000d70:	e8df f005 	tbb	[pc, r5]
 8000d74:	9b96      	.short	0x9b96
 8000d76:	a1          	.byte	0xa1
 8000d77:	00          	.byte	0x00
 8000d78:	2d12      	cmp	r5, #18
 8000d7a:	f000 8099 	beq.w	8000eb0 <HAL_GPIO_Init+0x180>
 8000d7e:	d86f      	bhi.n	8000e60 <HAL_GPIO_Init+0x130>
 8000d80:	2d11      	cmp	r5, #17
 8000d82:	f000 808f 	beq.w	8000ea4 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d86:	2cff      	cmp	r4, #255	; 0xff
 8000d88:	bf98      	it	ls
 8000d8a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d8c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d90:	bf88      	it	hi
 8000d92:	f100 0a04 	addhi.w	sl, r0, #4
 8000d96:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d9a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9e:	bf88      	it	hi
 8000da0:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da2:	fa09 fb05 	lsl.w	fp, r9, r5
 8000da6:	ea28 080b 	bic.w	r8, r8, fp
 8000daa:	fa02 f505 	lsl.w	r5, r2, r5
 8000dae:	ea48 0505 	orr.w	r5, r8, r5
 8000db2:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000dba:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000dbe:	d04d      	beq.n	8000e5c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc0:	4f43      	ldr	r7, [pc, #268]	; (8000ed0 <HAL_GPIO_Init+0x1a0>)
 8000dc2:	f026 0803 	bic.w	r8, r6, #3
 8000dc6:	69bd      	ldr	r5, [r7, #24]
 8000dc8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000dcc:	f045 0501 	orr.w	r5, r5, #1
 8000dd0:	61bd      	str	r5, [r7, #24]
 8000dd2:	69bd      	ldr	r5, [r7, #24]
 8000dd4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000dd8:	f005 0501 	and.w	r5, r5, #1
 8000ddc:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dde:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000de8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dec:	fa09 f90b 	lsl.w	r9, r9, fp
 8000df0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df4:	4d37      	ldr	r5, [pc, #220]	; (8000ed4 <HAL_GPIO_Init+0x1a4>)
 8000df6:	42a8      	cmp	r0, r5
 8000df8:	d061      	beq.n	8000ebe <HAL_GPIO_Init+0x18e>
 8000dfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dfe:	42a8      	cmp	r0, r5
 8000e00:	d05f      	beq.n	8000ec2 <HAL_GPIO_Init+0x192>
 8000e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e06:	42a8      	cmp	r0, r5
 8000e08:	d05d      	beq.n	8000ec6 <HAL_GPIO_Init+0x196>
 8000e0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e0e:	42a8      	cmp	r0, r5
 8000e10:	bf0c      	ite	eq
 8000e12:	2503      	moveq	r5, #3
 8000e14:	2504      	movne	r5, #4
 8000e16:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e1a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000e22:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e24:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e28:	bf14      	ite	ne
 8000e2a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e2c:	43a5      	biceq	r5, r4
 8000e2e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000e30:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e32:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e36:	bf14      	ite	ne
 8000e38:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e3a:	43a5      	biceq	r5, r4
 8000e3c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e3e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e40:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e44:	bf14      	ite	ne
 8000e46:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e48:	43a5      	biceq	r5, r4
 8000e4a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e4c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e4e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e52:	bf14      	ite	ne
 8000e54:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e56:	ea25 0404 	biceq.w	r4, r5, r4
 8000e5a:	60dc      	str	r4, [r3, #12]
	position++;
 8000e5c:	3601      	adds	r6, #1
 8000e5e:	e770      	b.n	8000d42 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000e60:	4f1d      	ldr	r7, [pc, #116]	; (8000ed8 <HAL_GPIO_Init+0x1a8>)
 8000e62:	42bd      	cmp	r5, r7
 8000e64:	d00c      	beq.n	8000e80 <HAL_GPIO_Init+0x150>
 8000e66:	d817      	bhi.n	8000e98 <HAL_GPIO_Init+0x168>
 8000e68:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000ee4 <HAL_GPIO_Init+0x1b4>
 8000e6c:	454d      	cmp	r5, r9
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x150>
 8000e70:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000e74:	454d      	cmp	r5, r9
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x150>
 8000e78:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000e7c:	454d      	cmp	r5, r9
 8000e7e:	d182      	bne.n	8000d86 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e80:	688a      	ldr	r2, [r1, #8]
 8000e82:	b1d2      	cbz	r2, 8000eba <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e84:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000e86:	bf08      	it	eq
 8000e88:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000e90:	bf18      	it	ne
 8000e92:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000e96:	e776      	b.n	8000d86 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000e98:	4565      	cmp	r5, ip
 8000e9a:	d0f1      	beq.n	8000e80 <HAL_GPIO_Init+0x150>
 8000e9c:	4575      	cmp	r5, lr
 8000e9e:	e7ee      	b.n	8000e7e <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea0:	68ca      	ldr	r2, [r1, #12]
          break;
 8000ea2:	e770      	b.n	8000d86 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea4:	68ca      	ldr	r2, [r1, #12]
 8000ea6:	3204      	adds	r2, #4
          break;
 8000ea8:	e76d      	b.n	8000d86 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eaa:	68ca      	ldr	r2, [r1, #12]
 8000eac:	3208      	adds	r2, #8
          break;
 8000eae:	e76a      	b.n	8000d86 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb0:	68ca      	ldr	r2, [r1, #12]
 8000eb2:	320c      	adds	r2, #12
          break;
 8000eb4:	e767      	b.n	8000d86 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	e765      	b.n	8000d86 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eba:	2204      	movs	r2, #4
 8000ebc:	e763      	b.n	8000d86 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	e7a9      	b.n	8000e16 <HAL_GPIO_Init+0xe6>
 8000ec2:	2501      	movs	r5, #1
 8000ec4:	e7a7      	b.n	8000e16 <HAL_GPIO_Init+0xe6>
 8000ec6:	2502      	movs	r5, #2
 8000ec8:	e7a5      	b.n	8000e16 <HAL_GPIO_Init+0xe6>
 8000eca:	bf00      	nop
 8000ecc:	40010400 	.word	0x40010400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	10220000 	.word	0x10220000
 8000edc:	10310000 	.word	0x10310000
 8000ee0:	10320000 	.word	0x10320000
 8000ee4:	10120000 	.word	0x10120000

08000ee8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000eec:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8000ef0:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ef2:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000ef6:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efa:	eb00 030b 	add.w	r3, r0, fp
 8000efe:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000f00:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8000f02:	fa31 f402 	lsrs.w	r4, r1, r2
 8000f06:	d102      	bne.n	8000f0e <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8000f08:	b003      	add	sp, #12
 8000f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f0e:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8000f12:	400f      	ands	r7, r1
 8000f14:	d049      	beq.n	8000faa <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8000f16:	f022 0403 	bic.w	r4, r2, #3
 8000f1a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f1e:	4d28      	ldr	r5, [pc, #160]	; (8000fc0 <HAL_GPIO_DeInit+0xd8>)
 8000f20:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f24:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8000f28:	68a6      	ldr	r6, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f2a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f2e:	fa08 f90c 	lsl.w	r9, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f32:	42a8      	cmp	r0, r5
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f34:	ea09 0e06 	and.w	lr, r9, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f38:	d039      	beq.n	8000fae <HAL_GPIO_DeInit+0xc6>
 8000f3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f3e:	42a8      	cmp	r0, r5
 8000f40:	d037      	beq.n	8000fb2 <HAL_GPIO_DeInit+0xca>
 8000f42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f46:	42a8      	cmp	r0, r5
 8000f48:	d035      	beq.n	8000fb6 <HAL_GPIO_DeInit+0xce>
 8000f4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f4e:	42a8      	cmp	r0, r5
 8000f50:	bf0c      	ite	eq
 8000f52:	2503      	moveq	r5, #3
 8000f54:	2504      	movne	r5, #4
 8000f56:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f5a:	4575      	cmp	r5, lr
 8000f5c:	ea6f 0607 	mvn.w	r6, r7
 8000f60:	d10f      	bne.n	8000f82 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000f62:	68a5      	ldr	r5, [r4, #8]
 8000f64:	ea25 0509 	bic.w	r5, r5, r9
 8000f68:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000f6a:	681c      	ldr	r4, [r3, #0]
 8000f6c:	4034      	ands	r4, r6
 8000f6e:	601c      	str	r4, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000f70:	685c      	ldr	r4, [r3, #4]
 8000f72:	4034      	ands	r4, r6
 8000f74:	605c      	str	r4, [r3, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000f76:	689c      	ldr	r4, [r3, #8]
 8000f78:	4034      	ands	r4, r6
 8000f7a:	609c      	str	r4, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000f7c:	68dc      	ldr	r4, [r3, #12]
 8000f7e:	4034      	ands	r4, r6
 8000f80:	60dc      	str	r4, [r3, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f82:	2fff      	cmp	r7, #255	; 0xff
 8000f84:	bf94      	ite	ls
 8000f86:	4607      	movls	r7, r0
 8000f88:	9f01      	ldrhi	r7, [sp, #4]
 8000f8a:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000f8e:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f90:	bf88      	it	hi
 8000f92:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000f94:	fa08 fc04 	lsl.w	ip, r8, r4
 8000f98:	ea25 050c 	bic.w	r5, r5, ip
 8000f9c:	fa0b f404 	lsl.w	r4, fp, r4
 8000fa0:	4325      	orrs	r5, r4
 8000fa2:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000fa4:	68c4      	ldr	r4, [r0, #12]
 8000fa6:	4026      	ands	r6, r4
 8000fa8:	60c6      	str	r6, [r0, #12]
    position++;
 8000faa:	3201      	adds	r2, #1
 8000fac:	e7a9      	b.n	8000f02 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fae:	2500      	movs	r5, #0
 8000fb0:	e7d1      	b.n	8000f56 <HAL_GPIO_DeInit+0x6e>
 8000fb2:	2501      	movs	r5, #1
 8000fb4:	e7cf      	b.n	8000f56 <HAL_GPIO_DeInit+0x6e>
 8000fb6:	2502      	movs	r5, #2
 8000fb8:	e7cd      	b.n	8000f56 <HAL_GPIO_DeInit+0x6e>
 8000fba:	bf00      	nop
 8000fbc:	40010400 	.word	0x40010400
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc4:	b10a      	cbz	r2, 8000fca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc6:	6101      	str	r1, [r0, #16]
  }
}
 8000fc8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fca:	0409      	lsls	r1, r1, #16
 8000fcc:	e7fb      	b.n	8000fc6 <HAL_GPIO_WritePin+0x2>

08000fce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fce:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd0:	4604      	mov	r4, r0
{
 8000fd2:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000fd4:	b310      	cbz	r0, 800101c <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fd6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000fda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fde:	b91b      	cbnz	r3, 8000fe8 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fe0:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fe4:	f002 fede 	bl	8003da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fe8:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fea:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fec:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fee:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000ff2:	f855 0b10 	ldr.w	r0, [r5], #16
 8000ff6:	f001 fa0d 	bl	8002414 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ffe:	682b      	ldr	r3, [r5, #0]
 8001000:	1d27      	adds	r7, r4, #4
 8001002:	6033      	str	r3, [r6, #0]
 8001004:	4626      	mov	r6, r4
 8001006:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800100a:	f856 0b10 	ldr.w	r0, [r6], #16
 800100e:	f001 f9f1 	bl	80023f4 <USB_CoreInit>
 8001012:	4605      	mov	r5, r0
 8001014:	b120      	cbz	r0, 8001020 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001016:	2302      	movs	r3, #2
 8001018:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800101c:	2501      	movs	r5, #1
 800101e:	e04c      	b.n	80010ba <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001020:	4601      	mov	r1, r0
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	f001 fa00 	bl	8002428 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001028:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800102a:	f04f 0e01 	mov.w	lr, #1
 800102e:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001030:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001032:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	4594      	cmp	ip, r2
 800103a:	f101 0101 	add.w	r1, r1, #1
 800103e:	d81b      	bhi.n	8001078 <HAL_PCD_Init+0xaa>
 8001040:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001042:	2528      	movs	r5, #40	; 0x28
 8001044:	4619      	mov	r1, r3
 8001046:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001048:	4584      	cmp	ip, r0
 800104a:	f103 0301 	add.w	r3, r3, #1
 800104e:	d820      	bhi.n	8001092 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001050:	46ec      	mov	ip, sp
 8001052:	4635      	mov	r5, r6
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800105a:	682b      	ldr	r3, [r5, #0]
 800105c:	f8cc 3000 	str.w	r3, [ip]
 8001060:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001064:	6820      	ldr	r0, [r4, #0]
 8001066:	f001 f9e1 	bl	800242c <USB_DevInit>
 800106a:	2301      	movs	r3, #1
 800106c:	4605      	mov	r5, r0
 800106e:	b1e8      	cbz	r0, 80010ac <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001070:	2202      	movs	r2, #2
 8001072:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001076:	e7d1      	b.n	800101c <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001078:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800107c:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8001080:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001088:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800108a:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800108e:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001090:	e7d1      	b.n	8001036 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001092:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001096:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800109a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800109e:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010a2:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010aa:	e7cc      	b.n	8001046 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80010ac:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80010b0:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80010b2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80010b6:	f001 fc82 	bl	80029be <USB_DevDisconnect>

  return HAL_OK;
}
 80010ba:	4628      	mov	r0, r5
 80010bc:	b007      	add	sp, #28
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010c0 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80010c0:	b538      	push	{r3, r4, r5, lr}
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c2:	4604      	mov	r4, r0
 80010c4:	b910      	cbnz	r0, 80010cc <HAL_PCD_DeInit+0xc>
  {
    return HAL_ERROR;
 80010c6:	2501      	movs	r5, #1
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;

  return HAL_OK;
}
 80010c8:	4628      	mov	r0, r5
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
  hpcd->State = HAL_PCD_STATE_BUSY;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f880 32a9 	strb.w	r3, [r0, #681]	; 0x2a9
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80010d2:	6800      	ldr	r0, [r0, #0]
 80010d4:	f001 fc60 	bl	8002998 <USB_StopDevice>
 80010d8:	4605      	mov	r5, r0
 80010da:	2800      	cmp	r0, #0
 80010dc:	d1f3      	bne.n	80010c6 <HAL_PCD_DeInit+0x6>
  HAL_PCD_MspDeInit(hpcd);
 80010de:	4620      	mov	r0, r4
 80010e0:	f002 fe80 	bl	8003de4 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 80010e4:	f884 52a9 	strb.w	r5, [r4, #681]	; 0x2a9
  return HAL_OK;
 80010e8:	e7ee      	b.n	80010c8 <HAL_PCD_DeInit+0x8>

080010ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010ea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80010ec:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80010f0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d010      	beq.n	8001118 <HAL_PCD_Start+0x2e>
 80010f6:	2501      	movs	r5, #1
 80010f8:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010fc:	6800      	ldr	r0, [r0, #0]
 80010fe:	f001 f980 	bl	8002402 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001102:	4629      	mov	r1, r5
 8001104:	4620      	mov	r0, r4
 8001106:	f002 ffac 	bl	8004062 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	f001 fc55 	bl	80029ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001110:	2000      	movs	r0, #0
 8001112:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001118:	2002      	movs	r0, #2
 800111a:	e7fc      	b.n	8001116 <HAL_PCD_Start+0x2c>

0800111c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800111c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800111e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001122:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001124:	2b01      	cmp	r3, #1
 8001126:	d010      	beq.n	800114a <HAL_PCD_Stop+0x2e>
 8001128:	2301      	movs	r3, #1
 800112a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800112e:	6800      	ldr	r0, [r0, #0]
 8001130:	f001 f970 	bl	8002414 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8001134:	2100      	movs	r1, #0
 8001136:	4620      	mov	r0, r4
 8001138:	f002 ff93 	bl	8004062 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 800113c:	6820      	ldr	r0, [r4, #0]
 800113e:	f001 fc3e 	bl	80029be <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8001142:	2000      	movs	r0, #0
 8001144:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001148:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800114a:	2002      	movs	r0, #2
 800114c:	e7fc      	b.n	8001148 <HAL_PCD_Stop+0x2c>

0800114e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800114e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001150:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001154:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001156:	2a01      	cmp	r2, #1
 8001158:	d00b      	beq.n	8001172 <HAL_PCD_SetAddress+0x24>
 800115a:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800115c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8001160:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001164:	6800      	ldr	r0, [r0, #0]
 8001166:	f001 fc22 	bl	80029ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800116a:	2000      	movs	r0, #0
 800116c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001170:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001172:	2002      	movs	r0, #2
 8001174:	e7fc      	b.n	8001170 <HAL_PCD_SetAddress+0x22>
	...

08001178 <HAL_PCD_IRQHandler>:
{
 8001178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	4604      	mov	r4, r0
 800117e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001180:	6800      	ldr	r0, [r0, #0]
 8001182:	f001 fc1e 	bl	80029c2 <USB_ReadInterrupts>
 8001186:	0400      	lsls	r0, r0, #16
 8001188:	d509      	bpl.n	800119e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800118a:	f8df 998c 	ldr.w	r9, [pc, #2444]	; 8001b18 <HAL_PCD_IRQHandler+0x9a0>
 800118e:	f8df 898c 	ldr.w	r8, [pc, #2444]	; 8001b1c <HAL_PCD_IRQHandler+0x9a4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001192:	6820      	ldr	r0, [r4, #0]
 8001194:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001198:	041d      	lsls	r5, r3, #16
 800119a:	f100 80c1 	bmi.w	8001320 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	f001 fc0f 	bl	80029c2 <USB_ReadInterrupts>
 80011a4:	0541      	lsls	r1, r0, #21
 80011a6:	d50f      	bpl.n	80011c8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80011aa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80011bc:	f002 fe3f 	bl	8003e3e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011c0:	2100      	movs	r1, #0
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff ffc3 	bl	800114e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011c8:	6820      	ldr	r0, [r4, #0]
 80011ca:	f001 fbfa 	bl	80029c2 <USB_ReadInterrupts>
 80011ce:	0441      	lsls	r1, r0, #17
 80011d0:	d508      	bpl.n	80011e4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	f001 fbec 	bl	80029c2 <USB_ReadInterrupts>
 80011ea:	0482      	lsls	r2, r0, #18
 80011ec:	d508      	bpl.n	8001200 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	0c1b      	lsrs	r3, r3, #16
 80011fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	f001 fbde 	bl	80029c2 <USB_ReadInterrupts>
 8001206:	04c3      	lsls	r3, r0, #19
 8001208:	d51c      	bpl.n	8001244 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800120a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800120c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800120e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800121e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001222:	f023 0308 	bic.w	r3, r3, #8
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800122e:	f002 fe29 	bl	8003e84 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	f001 fbbc 	bl	80029c2 <USB_ReadInterrupts>
 800124a:	0507      	lsls	r7, r0, #20
 800124c:	d546      	bpl.n	80012dc <HAL_PCD_IRQHandler+0x164>
 800124e:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	4606      	mov	r6, r0
 8001254:	4619      	mov	r1, r3
 8001256:	461a      	mov	r2, r3
 8001258:	f103 0520 	add.w	r5, r3, #32
 800125c:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8001260:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001262:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8001266:	d1f9      	bne.n	800125c <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001268:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800126c:	b292      	uxth	r2, r2
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001276:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	0412      	lsls	r2, r2, #16
 8001280:	0c12      	lsrs	r2, r2, #16
 8001282:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001286:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800128a:	0556      	lsls	r6, r2, #21
 800128c:	d5fb      	bpl.n	8001286 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800128e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001296:	0412      	lsls	r2, r2, #16
 8001298:	0c12      	lsrs	r2, r2, #16
 800129a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800129e:	f830 2b02 	ldrh.w	r2, [r0], #2
 80012a2:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80012a6:	428d      	cmp	r5, r1
 80012a8:	d1f9      	bne.n	800129e <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012aa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80012ae:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012b0:	b292      	uxth	r2, r2
 80012b2:	f042 0208 	orr.w	r2, r2, #8
 80012b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012ba:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80012be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c2:	0412      	lsls	r2, r2, #16
 80012c4:	0c12      	lsrs	r2, r2, #16
 80012c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80012ca:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80012ce:	b292      	uxth	r2, r2
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80012d8:	f002 fdc4 	bl	8003e64 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80012dc:	6820      	ldr	r0, [r4, #0]
 80012de:	f001 fb70 	bl	80029c2 <USB_ReadInterrupts>
 80012e2:	0582      	lsls	r2, r0, #22
 80012e4:	d50b      	bpl.n	80012fe <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012e6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80012e8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012ea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80012fa:	f002 fd9c 	bl	8003e36 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80012fe:	6820      	ldr	r0, [r4, #0]
 8001300:	f001 fb5f 	bl	80029c2 <USB_ReadInterrupts>
 8001304:	05c3      	lsls	r3, r0, #23
 8001306:	d508      	bpl.n	800131a <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800130e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	0c1b      	lsrs	r3, r3, #16
 8001316:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800131a:	b005      	add	sp, #20
 800131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001320:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8001324:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8001326:	f016 060f 	ands.w	r6, r6, #15
 800132a:	f040 80bd 	bne.w	80014a8 <HAL_PCD_IRQHandler+0x330>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800132e:	f011 0110 	ands.w	r1, r1, #16
 8001332:	d12d      	bne.n	8001390 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001334:	8803      	ldrh	r3, [r0, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	ea03 0309 	and.w	r3, r3, r9
 800133c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001340:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001342:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001346:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800134a:	b29b      	uxth	r3, r3
 800134c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001350:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001354:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001358:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800135a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800135e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001360:	4413      	add	r3, r2
 8001362:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001364:	4620      	mov	r0, r4
 8001366:	f002 fd5e 	bl	8003e26 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800136a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800136e:	2b00      	cmp	r3, #0
 8001370:	f43f af0f 	beq.w	8001192 <HAL_PCD_IRQHandler+0x1a>
 8001374:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001376:	2a00      	cmp	r2, #0
 8001378:	f47f af0b 	bne.w	8001192 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800137c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001380:	6821      	ldr	r1, [r4, #0]
 8001382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001386:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800138a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800138e:	e700      	b.n	8001192 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001390:	8805      	ldrh	r5, [r0, #0]
 8001392:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001394:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001398:	d021      	beq.n	80013de <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800139a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800139e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80013ac:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013b0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80013b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013b8:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013bc:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80013c0:	f001 fea4 	bl	800310c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013c4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80013c6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013c8:	8813      	ldrh	r3, [r2, #0]
 80013ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ce:	051b      	lsls	r3, r3, #20
 80013d0:	0d1b      	lsrs	r3, r3, #20
 80013d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80013d8:	f002 fd16 	bl	8003e08 <HAL_PCD_SetupStageCallback>
 80013dc:	e6d9      	b.n	8001192 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013de:	041a      	lsls	r2, r3, #16
 80013e0:	f57f aed7 	bpl.w	8001192 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013e4:	8803      	ldrh	r3, [r0, #0]
 80013e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ea:	051b      	lsls	r3, r3, #20
 80013ec:	0d1b      	lsrs	r3, r3, #20
 80013ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013f8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001402:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001406:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800140a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800140e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001412:	b18b      	cbz	r3, 8001438 <HAL_PCD_IRQHandler+0x2c0>
 8001414:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001418:	b171      	cbz	r1, 8001438 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800141a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800141e:	f001 fe75 	bl	800310c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001422:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001426:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800142a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800142c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800142e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8001430:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001434:	f002 fcee 	bl	8003e14 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001438:	6821      	ldr	r1, [r4, #0]
 800143a:	880b      	ldrh	r3, [r1, #0]
 800143c:	051b      	lsls	r3, r3, #20
 800143e:	f53f aea8 	bmi.w	8001192 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001442:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001446:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800144a:	b29b      	uxth	r3, r3
 800144c:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001450:	b9cd      	cbnz	r5, 8001486 <HAL_PCD_IRQHandler+0x30e>
 8001452:	5ac2      	ldrh	r2, [r0, r3]
 8001454:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001458:	0412      	lsls	r2, r2, #16
 800145a:	0c12      	lsrs	r2, r2, #16
 800145c:	52c2      	strh	r2, [r0, r3]
 800145e:	5ac2      	ldrh	r2, [r0, r3]
 8001460:	b292      	uxth	r2, r2
 8001462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001466:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001468:	880b      	ldrh	r3, [r1, #0]
 800146a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800146e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	0c1b      	lsrs	r3, r3, #16
 8001476:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001482:	800b      	strh	r3, [r1, #0]
 8001484:	e685      	b.n	8001192 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001486:	2d3e      	cmp	r5, #62	; 0x3e
 8001488:	d806      	bhi.n	8001498 <HAL_PCD_IRQHandler+0x320>
 800148a:	086a      	lsrs	r2, r5, #1
 800148c:	07ef      	lsls	r7, r5, #31
 800148e:	bf48      	it	mi
 8001490:	3201      	addmi	r2, #1
 8001492:	0292      	lsls	r2, r2, #10
 8001494:	b292      	uxth	r2, r2
 8001496:	e7e6      	b.n	8001466 <HAL_PCD_IRQHandler+0x2ee>
 8001498:	096a      	lsrs	r2, r5, #5
 800149a:	06ee      	lsls	r6, r5, #27
 800149c:	bf08      	it	eq
 800149e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80014a2:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 80014a6:	e7f5      	b.n	8001494 <HAL_PCD_IRQHandler+0x31c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014a8:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014ac:	041d      	lsls	r5, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014ae:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014b0:	f140 80f8 	bpl.w	80016a4 <HAL_PCD_IRQHandler+0x52c>
        if (ep->doublebuffer == 0U)
 80014b4:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014b6:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80014ba:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014c2:	051b      	lsls	r3, r3, #20
 80014c4:	0d1b      	lsrs	r3, r3, #20
 80014c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ca:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80014ce:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80014d2:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80014d6:	b9b3      	cbnz	r3, 8001506 <HAL_PCD_IRQHandler+0x38e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014dc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3306      	adds	r3, #6
 80014e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014e8:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80014ec:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	f000 80bb 	beq.w	800166c <HAL_PCD_IRQHandler+0x4f4>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80014f6:	462b      	mov	r3, r5
 80014f8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014fc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001500:	f001 fe04 	bl	800310c <USB_ReadPMA>
 8001504:	e0b2      	b.n	800166c <HAL_PCD_IRQHandler+0x4f4>
          if (ep->type == EP_TYPE_BULK)
 8001506:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 800150a:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800150e:	2b02      	cmp	r3, #2
 8001510:	f040 808b 	bne.w	800162a <HAL_PCD_IRQHandler+0x4b2>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001514:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001518:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 800151c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 8001520:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001524:	b29b      	uxth	r3, r3
 8001526:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800152a:	d040      	beq.n	80015ae <HAL_PCD_IRQHandler+0x436>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800152c:	449b      	add	fp, r3
 800152e:	f10b 0b02 	add.w	fp, fp, #2
 8001532:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 8001536:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800153a:	4295      	cmp	r5, r2
 800153c:	d913      	bls.n	8001566 <HAL_PCD_IRQHandler+0x3ee>
 800153e:	2300      	movs	r3, #0
 8001540:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001544:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8001548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800154c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8001564:	e004      	b.n	8001570 <HAL_PCD_IRQHandler+0x3f8>
      ep->xfer_len -= count;
 8001566:	1b52      	subs	r2, r2, r5
 8001568:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800156c:	2a00      	cmp	r2, #0
 800156e:	d0e9      	beq.n	8001544 <HAL_PCD_IRQHandler+0x3cc>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001570:	f1be 0f00 	cmp.w	lr, #0
 8001574:	d012      	beq.n	800159c <HAL_PCD_IRQHandler+0x424>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001576:	2328      	movs	r3, #40	; 0x28
 8001578:	fb03 4306 	mla	r3, r3, r6, r4
 800157c:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8001580:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001598:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800159c:	2d00      	cmp	r5, #0
 800159e:	d065      	beq.n	800166c <HAL_PCD_IRQHandler+0x4f4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80015a0:	2128      	movs	r1, #40	; 0x28
 80015a2:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80015a6:	462b      	mov	r3, r5
 80015a8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80015ac:	e7a6      	b.n	80014fc <HAL_PCD_IRQHandler+0x384>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015ae:	445b      	add	r3, fp
 80015b0:	3306      	adds	r3, #6
 80015b2:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80015b6:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80015ba:	4295      	cmp	r5, r2
 80015bc:	d912      	bls.n	80015e4 <HAL_PCD_IRQHandler+0x46c>
 80015be:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80015c2:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80015d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015de:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80015e2:	e004      	b.n	80015ee <HAL_PCD_IRQHandler+0x476>
      ep->xfer_len -= count;
 80015e4:	1b52      	subs	r2, r2, r5
 80015e6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d0e9      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x44a>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80015ee:	f1be 0f00 	cmp.w	lr, #0
 80015f2:	d112      	bne.n	800161a <HAL_PCD_IRQHandler+0x4a2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80015f4:	2328      	movs	r3, #40	; 0x28
 80015f6:	fb03 4306 	mla	r3, r3, r6, r4
 80015fa:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80015fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001616:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800161a:	b33d      	cbz	r5, 800166c <HAL_PCD_IRQHandler+0x4f4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800161c:	2128      	movs	r1, #40	; 0x28
 800161e:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001622:	462b      	mov	r3, r5
 8001624:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001628:	e768      	b.n	80014fc <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800162a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800162e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001642:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001646:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800164a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001654:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001658:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800165a:	d059      	beq.n	8001710 <HAL_PCD_IRQHandler+0x598>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800165c:	3202      	adds	r2, #2
 800165e:	4413      	add	r3, r2
 8001660:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8001664:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001668:	2d00      	cmp	r5, #0
 800166a:	d19c      	bne.n	80015a6 <HAL_PCD_IRQHandler+0x42e>
        ep->xfer_count += count;
 800166c:	2128      	movs	r1, #40	; 0x28
 800166e:	4371      	muls	r1, r6
 8001670:	1863      	adds	r3, r4, r1
 8001672:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001676:	442a      	add	r2, r5
 8001678:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800167c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001680:	442a      	add	r2, r5
 8001682:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001686:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800168a:	b11a      	cbz	r2, 8001694 <HAL_PCD_IRQHandler+0x51c>
 800168c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001690:	429d      	cmp	r5, r3
 8001692:	d246      	bcs.n	8001722 <HAL_PCD_IRQHandler+0x5aa>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001694:	2328      	movs	r3, #40	; 0x28
 8001696:	fb03 4306 	mla	r3, r3, r6, r4
 800169a:	4620      	mov	r0, r4
 800169c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80016a0:	f002 fbb8 	bl	8003e14 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80016a4:	0638      	lsls	r0, r7, #24
 80016a6:	f57f ad74 	bpl.w	8001192 <HAL_PCD_IRQHandler+0x1a>
 80016aa:	2528      	movs	r5, #40	; 0x28
 80016ac:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80016ae:	fb05 4506 	mla	r5, r5, r6, r4
 80016b2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	ea03 0309 	and.w	r3, r3, r9
 80016bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80016c4:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 80016c8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80016cc:	2a03      	cmp	r2, #3
 80016ce:	d004      	beq.n	80016da <HAL_PCD_IRQHandler+0x562>
 80016d0:	b11a      	cbz	r2, 80016da <HAL_PCD_IRQHandler+0x562>
 80016d2:	2a02      	cmp	r2, #2
 80016d4:	d13d      	bne.n	8001752 <HAL_PCD_IRQHandler+0x5da>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80016d6:	05f9      	lsls	r1, r7, #23
 80016d8:	d43b      	bmi.n	8001752 <HAL_PCD_IRQHandler+0x5da>
          if (ep->xfer_len > TxByteNbre)
 80016da:	2128      	movs	r1, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80016e0:	fb01 4706 	mla	r7, r1, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e4:	b292      	uxth	r2, r2
 80016e6:	3202      	adds	r2, #2
 80016e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80016ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80016f0:	f8b3 e400 	ldrh.w	lr, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 80016f4:	f8d7 c040 	ldr.w	ip, [r7, #64]	; 0x40
 80016f8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80016fc:	45f4      	cmp	ip, lr
 80016fe:	d817      	bhi.n	8001730 <HAL_PCD_IRQHandler+0x5b8>
 8001700:	2300      	movs	r3, #0
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001704:	4620      	mov	r0, r4
 8001706:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800170a:	f002 fb8c 	bl	8003e26 <HAL_PCD_DataInStageCallback>
 800170e:	e540      	b.n	8001192 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001710:	3206      	adds	r2, #6
 8001712:	4413      	add	r3, r2
 8001714:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8001718:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 800171c:	2d00      	cmp	r5, #0
 800171e:	d0a5      	beq.n	800166c <HAL_PCD_IRQHandler+0x4f4>
 8001720:	e77f      	b.n	8001622 <HAL_PCD_IRQHandler+0x4aa>
        ep = &hpcd->OUT_ep[epindex];
 8001722:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	4421      	add	r1, r4
 800172a:	f001 f961 	bl	80029f0 <USB_EPStartXfer>
 800172e:	e7b9      	b.n	80016a4 <HAL_PCD_IRQHandler+0x52c>
            ep->xfer_len -= TxByteNbre;
 8001730:	ebac 030e 	sub.w	r3, ip, lr
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0e4      	beq.n	8001704 <HAL_PCD_IRQHandler+0x58c>
        ep = &hpcd->IN_ep[epindex];
 800173a:	fb06 1101 	mla	r1, r6, r1, r1
            ep->xfer_buff += TxByteNbre;
 800173e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8001742:	4472      	add	r2, lr
            ep->xfer_count += TxByteNbre;
 8001744:	4473      	add	r3, lr
            ep->xfer_buff += TxByteNbre;
 8001746:	63fa      	str	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800174a:	4421      	add	r1, r4
 800174c:	f001 f950 	bl	80029f0 <USB_EPStartXfer>
 8001750:	e51f      	b.n	8001192 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001752:	2228      	movs	r2, #40	; 0x28
 8001754:	fb02 4206 	mla	r2, r2, r6, r4
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001758:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800175c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001760:	b289      	uxth	r1, r1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001762:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 8001766:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001768:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800176c:	4451      	add	r1, sl
 800176e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001772:	f000 80e9 	beq.w	8001948 <HAL_PCD_IRQHandler+0x7d0>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001776:	3102      	adds	r1, #2
 8001778:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
 800177c:	2128      	movs	r1, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 800177e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001782:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8001784:	bf28      	it	cs
 8001786:	2200      	movcs	r2, #0
 8001788:	fb01 4106 	mla	r1, r1, r6, r4
      ep->xfer_len -= TxByteNbre;
 800178c:	bf38      	it	cc
 800178e:	eba2 020c 	subcc.w	r2, r2, ip
 8001792:	640a      	str	r2, [r1, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001794:	b2bf      	uxth	r7, r7
 8001796:	2a00      	cmp	r2, #0
 8001798:	d15c      	bne.n	8001854 <HAL_PCD_IRQHandler+0x6dc>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800179a:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 800179e:	2900      	cmp	r1, #0
 80017a0:	d142      	bne.n	8001828 <HAL_PCD_IRQHandler+0x6b0>
 80017a2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	b28a      	uxth	r2, r1
 80017aa:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80017ae:	4411      	add	r1, r2
 80017b0:	5aca      	ldrh	r2, [r1, r3]
 80017b2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80017b6:	0412      	lsls	r2, r2, #16
 80017b8:	0c12      	lsrs	r2, r2, #16
 80017ba:	52ca      	strh	r2, [r1, r3]
 80017bc:	5aca      	ldrh	r2, [r1, r3]
 80017be:	b292      	uxth	r2, r2
 80017c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c4:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80017c6:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80017ca:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80017ce:	bbaa      	cbnz	r2, 800183c <HAL_PCD_IRQHandler+0x6c4>
 80017d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80017d4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80017d8:	b292      	uxth	r2, r2
 80017da:	4410      	add	r0, r2
 80017dc:	011a      	lsls	r2, r3, #4
 80017de:	5a83      	ldrh	r3, [r0, r2]
 80017e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	5283      	strh	r3, [r0, r2]
 80017ea:	5a83      	ldrh	r3, [r0, r2]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	5283      	strh	r3, [r0, r2]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80017fa:	f002 fb14 	bl	8003e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017fe:	2f00      	cmp	r7, #0
 8001800:	f000 80ea 	beq.w	80019d8 <HAL_PCD_IRQHandler+0x860>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001804:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800180e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001822:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001826:	e0d7      	b.n	80019d8 <HAL_PCD_IRQHandler+0x860>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001828:	2901      	cmp	r1, #1
 800182a:	d1cc      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x64e>
 800182c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	b28e      	uxth	r6, r1
 8001834:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8001838:	4431      	add	r1, r6
 800183a:	e7c3      	b.n	80017c4 <HAL_PCD_IRQHandler+0x64c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800183c:	2a01      	cmp	r2, #1
 800183e:	d1d9      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x67c>
 8001840:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001844:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001848:	b292      	uxth	r2, r2
 800184a:	4410      	add	r0, r2
 800184c:	2200      	movs	r2, #0
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	52c2      	strh	r2, [r0, r3]
 8001852:	e7cf      	b.n	80017f4 <HAL_PCD_IRQHandler+0x67c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001854:	b16f      	cbz	r7, 8001872 <HAL_PCD_IRQHandler+0x6fa>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001856:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800185a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800185e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001862:	0412      	lsls	r2, r2, #16
 8001864:	0c12      	lsrs	r2, r2, #16
 8001866:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800186a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001872:	2328      	movs	r3, #40	; 0x28
 8001874:	fb03 4306 	mla	r3, r3, r6, r4
 8001878:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800187c:	2a01      	cmp	r2, #1
 800187e:	f040 80ab 	bne.w	80019d8 <HAL_PCD_IRQHandler+0x860>
        ep->xfer_count += TxByteNbre;
 8001882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001884:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001886:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001888:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800188c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800188e:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001890:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8001892:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001894:	d327      	bcc.n	80018e6 <HAL_PCD_IRQHandler+0x76e>
          ep->xfer_len_db -= len;
 8001896:	1abf      	subs	r7, r7, r2
 8001898:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800189a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800189e:	b293      	uxth	r3, r2
 80018a0:	2f00      	cmp	r7, #0
 80018a2:	d143      	bne.n	800192c <HAL_PCD_IRQHandler+0x7b4>
 80018a4:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80018a8:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 80018ac:	b2bf      	uxth	r7, r7
 80018ae:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 80018b2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80018b6:	4477      	add	r7, lr
 80018b8:	bb02      	cbnz	r2, 80018fc <HAL_PCD_IRQHandler+0x784>
 80018ba:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80018be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	0c12      	lsrs	r2, r2, #16
 80018c6:	f82c 2007 	strh.w	r2, [ip, r7]
 80018ca:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80018ce:	b292      	uxth	r2, r2
 80018d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d4:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80018d8:	2228      	movs	r2, #40	; 0x28
 80018da:	fb02 4606 	mla	r6, r2, r6, r4
 80018de:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80018e0:	f001 f875 	bl	80029ce <USB_WritePMA>
 80018e4:	e078      	b.n	80019d8 <HAL_PCD_IRQHandler+0x860>
        else if (ep->xfer_len_db == 0U)
 80018e6:	b91f      	cbnz	r7, 80018f0 <HAL_PCD_IRQHandler+0x778>
    if (ep->xfer_len > TxByteNbre)
 80018e8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80018ea:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 80018ee:	e7d4      	b.n	800189a <HAL_PCD_IRQHandler+0x722>
          ep->xfer_fill_db = 0U;
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80018f6:	649a      	str	r2, [r3, #72]	; 0x48
 80018f8:	463a      	mov	r2, r7
 80018fa:	e7ce      	b.n	800189a <HAL_PCD_IRQHandler+0x722>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018fc:	2a3e      	cmp	r2, #62	; 0x3e
 80018fe:	d80c      	bhi.n	800191a <HAL_PCD_IRQHandler+0x7a2>
 8001900:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8001904:	07d2      	lsls	r2, r2, #31
 8001906:	bf48      	it	mi
 8001908:	f10e 0e01 	addmi.w	lr, lr, #1
 800190c:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001910:	fa1f fe8e 	uxth.w	lr, lr
 8001914:	f82c e007 	strh.w	lr, [ip, r7]
 8001918:	e7de      	b.n	80018d8 <HAL_PCD_IRQHandler+0x760>
 800191a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800191e:	06d2      	lsls	r2, r2, #27
 8001920:	bf08      	it	eq
 8001922:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8001926:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800192a:	e7f1      	b.n	8001910 <HAL_PCD_IRQHandler+0x798>
 800192c:	2f01      	cmp	r7, #1
 800192e:	d1d3      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x760>
 8001930:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001934:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8001938:	fa1f fc82 	uxth.w	ip, r2
 800193c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001940:	013f      	lsls	r7, r7, #4
 8001942:	4462      	add	r2, ip
 8001944:	52bb      	strh	r3, [r7, r2]
 8001946:	e7c7      	b.n	80018d8 <HAL_PCD_IRQHandler+0x760>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001948:	3106      	adds	r1, #6
 800194a:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
 800194e:	2128      	movs	r1, #40	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8001950:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001954:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8001956:	bf88      	it	hi
 8001958:	4672      	movhi	r2, lr
 800195a:	fb01 4106 	mla	r1, r1, r6, r4
      ep->xfer_len -= TxByteNbre;
 800195e:	bf98      	it	ls
 8001960:	eba2 020c 	subls.w	r2, r2, ip
 8001964:	640a      	str	r2, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001966:	b2bf      	uxth	r7, r7
 8001968:	2a00      	cmp	r2, #0
 800196a:	d15f      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x8b4>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800196c:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 8001970:	2900      	cmp	r1, #0
 8001972:	d145      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x888>
 8001974:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	b28a      	uxth	r2, r1
 800197c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8001980:	4411      	add	r1, r2
 8001982:	5aca      	ldrh	r2, [r1, r3]
 8001984:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001988:	0412      	lsls	r2, r2, #16
 800198a:	0c12      	lsrs	r2, r2, #16
 800198c:	52ca      	strh	r2, [r1, r3]
 800198e:	5aca      	ldrh	r2, [r1, r3]
 8001990:	b292      	uxth	r2, r2
 8001992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001996:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001998:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800199c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	d137      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x89c>
 80019a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80019a8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80019ac:	b292      	uxth	r2, r2
 80019ae:	4410      	add	r0, r2
 80019b0:	011a      	lsls	r2, r3, #4
 80019b2:	5a83      	ldrh	r3, [r0, r2]
 80019b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	5283      	strh	r3, [r0, r2]
 80019be:	5a83      	ldrh	r3, [r0, r2]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80019ce:	f002 fa2a 	bl	8003e26 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80019d2:	2f00      	cmp	r7, #0
 80019d4:	f43f af16 	beq.w	8001804 <HAL_PCD_IRQHandler+0x68c>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80019d8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019ec:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80019f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80019fc:	f7ff bbc9 	b.w	8001192 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a00:	2901      	cmp	r1, #1
 8001a02:	d1c9      	bne.n	8001998 <HAL_PCD_IRQHandler+0x820>
 8001a04:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	b28e      	uxth	r6, r1
 8001a0c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8001a10:	4431      	add	r1, r6
 8001a12:	e7c0      	b.n	8001996 <HAL_PCD_IRQHandler+0x81e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a14:	2a01      	cmp	r2, #1
 8001a16:	d1d7      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x850>
 8001a18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a1c:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001a20:	b292      	uxth	r2, r2
 8001a22:	4410      	add	r0, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	52c2      	strh	r2, [r0, r3]
 8001a2a:	e7cd      	b.n	80019c8 <HAL_PCD_IRQHandler+0x850>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001a2c:	b96f      	cbnz	r7, 8001a4a <HAL_PCD_IRQHandler+0x8d2>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a32:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001a36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a3a:	0412      	lsls	r2, r2, #16
 8001a3c:	0c12      	lsrs	r2, r2, #16
 8001a3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001a4a:	2328      	movs	r3, #40	; 0x28
 8001a4c:	fb03 4306 	mla	r3, r3, r6, r4
 8001a50:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001a54:	2a01      	cmp	r2, #1
 8001a56:	d1bf      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x860>
        ep->xfer_count += TxByteNbre;
 8001a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001a5a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001a5c:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a5e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8001a64:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a66:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8001a68:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a6a:	d325      	bcc.n	8001ab8 <HAL_PCD_IRQHandler+0x940>
          ep->xfer_len_db -= len;
 8001a6c:	1abf      	subs	r7, r7, r2
 8001a6e:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a70:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8001a74:	b293      	uxth	r3, r2
 8001a76:	2f00      	cmp	r7, #0
 8001a78:	d141      	bne.n	8001afe <HAL_PCD_IRQHandler+0x986>
 8001a7a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001a7e:	fa1f f78c 	uxth.w	r7, ip
 8001a82:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8001a86:	44bc      	add	ip, r7
 8001a88:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8001a8c:	013f      	lsls	r7, r7, #4
 8001a8e:	b9f2      	cbnz	r2, 8001ace <HAL_PCD_IRQHandler+0x956>
 8001a90:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8001a94:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001a98:	0412      	lsls	r2, r2, #16
 8001a9a:	0c12      	lsrs	r2, r2, #16
 8001a9c:	f82c 2007 	strh.w	r2, [ip, r7]
 8001aa0:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aaa:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001aae:	2228      	movs	r2, #40	; 0x28
 8001ab0:	fb02 4606 	mla	r6, r2, r6, r4
 8001ab4:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001ab6:	e713      	b.n	80018e0 <HAL_PCD_IRQHandler+0x768>
        else if (ep->xfer_len_db == 0U)
 8001ab8:	b91f      	cbnz	r7, 8001ac2 <HAL_PCD_IRQHandler+0x94a>
    if (ep->xfer_len >= TxByteNbre)
 8001aba:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8001abc:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 8001ac0:	e7d6      	b.n	8001a70 <HAL_PCD_IRQHandler+0x8f8>
          ep->xfer_len_db = 0U;
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001aca:	463a      	mov	r2, r7
 8001acc:	e7d0      	b.n	8001a70 <HAL_PCD_IRQHandler+0x8f8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ace:	2a3e      	cmp	r2, #62	; 0x3e
 8001ad0:	d80c      	bhi.n	8001aec <HAL_PCD_IRQHandler+0x974>
 8001ad2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8001ad6:	07d2      	lsls	r2, r2, #31
 8001ad8:	bf48      	it	mi
 8001ada:	f10e 0e01 	addmi.w	lr, lr, #1
 8001ade:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001ae2:	fa1f fe8e 	uxth.w	lr, lr
 8001ae6:	f82c e007 	strh.w	lr, [ip, r7]
 8001aea:	e7e0      	b.n	8001aae <HAL_PCD_IRQHandler+0x936>
 8001aec:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8001af0:	06d2      	lsls	r2, r2, #27
 8001af2:	bf08      	it	eq
 8001af4:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8001af8:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8001afc:	e7f1      	b.n	8001ae2 <HAL_PCD_IRQHandler+0x96a>
 8001afe:	2f01      	cmp	r7, #1
 8001b00:	d1d5      	bne.n	8001aae <HAL_PCD_IRQHandler+0x936>
 8001b02:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001b06:	b2ba      	uxth	r2, r7
 8001b08:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8001b0c:	4417      	add	r7, r2
 8001b0e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	52bb      	strh	r3, [r7, r2]
 8001b16:	e7ca      	b.n	8001aae <HAL_PCD_IRQHandler+0x936>
 8001b18:	ffff8f0f 	.word	0xffff8f0f
 8001b1c:	ffff8000 	.word	0xffff8000

08001b20 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001b20:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	4605      	mov	r5, r0
 8001b28:	f001 0007 	and.w	r0, r1, #7
 8001b2c:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001b30:	d01c      	beq.n	8001b6c <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8001b32:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b34:	fb00 1101 	mla	r1, r0, r1, r1
 8001b38:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001b3a:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 8001b3c:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8001b3e:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b40:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001b42:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001b44:	b102      	cbz	r2, 8001b48 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8001b46:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001b48:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001b4a:	bf04      	itt	eq
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001b50:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d013      	beq.n	8001b80 <HAL_PCD_EP_Open+0x60>
 8001b58:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b5a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001b5c:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b60:	f000 fc78 	bl	8002454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001b6c:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	fb01 f400 	mul.w	r4, r1, r0
 8001b72:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8001b76:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b78:	4429      	add	r1, r5
    ep->is_in = 0U;
 8001b7a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8001b7e:	e7dd      	b.n	8001b3c <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8001b80:	2002      	movs	r0, #2
 8001b82:	e7f2      	b.n	8001b6a <HAL_PCD_EP_Open+0x4a>

08001b84 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001b84:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	f001 0207 	and.w	r2, r1, #7
 8001b8e:	4604      	mov	r4, r0
 8001b90:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001b94:	d013      	beq.n	8001bbe <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8001b96:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	fb02 1101 	mla	r1, r2, r1, r1
 8001b9c:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001b9e:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ba0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001ba2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d013      	beq.n	8001bd2 <HAL_PCD_EP_Close+0x4e>
 8001baa:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bac:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001bae:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bb2:	f000 fda7 	bl	8002704 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001bbc:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bbe:	fb01 f302 	mul.w	r3, r1, r2
 8001bc2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8001bc6:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001bc8:	4403      	add	r3, r0
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001bd0:	e7e6      	b.n	8001ba0 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	e7f2      	b.n	8001bbc <HAL_PCD_EP_Close+0x38>

08001bd6 <HAL_PCD_EP_Receive>:
{
 8001bd6:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8001bd8:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8001bda:	2600      	movs	r6, #0
 8001bdc:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001be0:	434c      	muls	r4, r1
 8001be2:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be4:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be8:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bec:	4401      	add	r1, r0
  ep->xfer_len = len;
 8001bee:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8001bf2:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8001bf6:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bfa:	6800      	ldr	r0, [r0, #0]
 8001bfc:	f000 fef8 	bl	80029f0 <USB_EPStartXfer>
}
 8001c00:	4630      	mov	r0, r6
 8001c02:	bd70      	pop	{r4, r5, r6, pc}

08001c04 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c04:	2328      	movs	r3, #40	; 0x28
 8001c06:	f001 0107 	and.w	r1, r1, #7
 8001c0a:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001c0e:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8001c12:	4770      	bx	lr

08001c14 <HAL_PCD_EP_Transmit>:
{
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8001c1a:	2128      	movs	r1, #40	; 0x28
 8001c1c:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8001c20:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8001c22:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8001c26:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8001c2c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c30:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8001c32:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001c34:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001c36:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c3e:	6800      	ldr	r0, [r0, #0]
 8001c40:	f000 fed6 	bl	80029f0 <USB_EPStartXfer>
}
 8001c44:	4630      	mov	r0, r6
 8001c46:	bd70      	pop	{r4, r5, r6, pc}

08001c48 <HAL_PCD_EP_SetStall>:
{
 8001c48:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c4a:	6843      	ldr	r3, [r0, #4]
 8001c4c:	f001 0507 	and.w	r5, r1, #7
 8001c50:	429d      	cmp	r5, r3
{
 8001c52:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c54:	d828      	bhi.n	8001ca8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8001c56:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c5a:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001c5e:	d01a      	beq.n	8001c96 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c60:	fb05 3303 	mla	r3, r5, r3, r3
 8001c64:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8001c66:	2301      	movs	r3, #1
 8001c68:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8001c6a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001c6e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001c70:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d019      	beq.n	8001cac <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c78:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001c7a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c7e:	f000 fe20 	bl	80028c2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c82:	b925      	cbnz	r5, 8001c8e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c84:	6820      	ldr	r0, [r4, #0]
 8001c86:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001c8a:	f000 fe9e 	bl	80029ca <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001c94:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001c96:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001c98:	434b      	muls	r3, r1
 8001c9a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8001c9e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001ca0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001ca2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8001ca6:	e7e0      	b.n	8001c6a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
 8001caa:	e7f3      	b.n	8001c94 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8001cac:	2002      	movs	r0, #2
 8001cae:	e7f1      	b.n	8001c94 <HAL_PCD_EP_SetStall+0x4c>

08001cb0 <HAL_PCD_EP_ClrStall>:
{
 8001cb0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cb2:	6843      	ldr	r3, [r0, #4]
 8001cb4:	f001 020f 	and.w	r2, r1, #15
 8001cb8:	429a      	cmp	r2, r3
{
 8001cba:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cbc:	d826      	bhi.n	8001d0c <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001cbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cc2:	f001 0207 	and.w	r2, r1, #7
 8001cc6:	f04f 0128 	mov.w	r1, #40	; 0x28
 8001cca:	d015      	beq.n	8001cf8 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8001ccc:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	fb02 1101 	mla	r1, r2, r1, r1
 8001cd2:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001cd4:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8001cd6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001cda:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001cdc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d015      	beq.n	8001d10 <HAL_PCD_EP_ClrStall+0x60>
 8001ce4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ce6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001ce8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cec:	f000 fe09 	bl	8002902 <USB_EPClearStall>
  return HAL_OK;
 8001cf0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001cf2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf8:	fb01 f302 	mul.w	r3, r1, r2
 8001cfc:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8001d00:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001d02:	4403      	add	r3, r0
 8001d04:	2000      	movs	r0, #0
 8001d06:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001d0a:	e7e4      	b.n	8001cd6 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7f2      	b.n	8001cf6 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8001d10:	2002      	movs	r0, #2
 8001d12:	e7f0      	b.n	8001cf6 <HAL_PCD_EP_ClrStall+0x46>

08001d14 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001d14:	b510      	push	{r4, lr}
 8001d16:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001d18:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	bf1b      	ittet	ne
 8001d1e:	f001 0107 	andne.w	r1, r1, #7
 8001d22:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d26:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8001d2c:	bf08      	it	eq
 8001d2e:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001d32:	b299      	uxth	r1, r3
 8001d34:	b91a      	cbnz	r2, 8001d3e <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001d36:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001d38:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001d3e:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d40:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001d42:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d44:	e7f9      	b.n	8001d3a <HAL_PCDEx_PMAConfig+0x26>
	...

08001d48 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d4a:	f7fe fe11 	bl	8000970 <HAL_GetTick>
 8001d4e:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d50:	4c2f      	ldr	r4, [pc, #188]	; (8001e10 <HAL_RCC_DeInit+0xc8>)
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	079b      	lsls	r3, r3, #30
 8001d5e:	d53b      	bpl.n	8001dd8 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001d60:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d62:	f241 3688 	movw	r6, #5000	; 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001d66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001d70:	f7fe fdfe 	bl	8000970 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8001d74:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8001d76:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8001d78:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001d7a:	6863      	ldr	r3, [r4, #4]
 8001d7c:	f013 0f0c 	tst.w	r3, #12
 8001d80:	d132      	bne.n	8001de8 <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_DeInit+0xcc>)
 8001d84:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_RCC_DeInit+0xd0>)
 8001d86:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_RCC_DeInit+0xd4>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	f7fe fdae 	bl	80008ec <HAL_InitTick>
 8001d90:	4605      	mov	r5, r0
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d13a      	bne.n	8001e0c <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d96:	f7fe fdeb 	bl	8000970 <HAL_GetTick>
 8001d9a:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001daa:	d123      	bne.n	8001df4 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001dac:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001dae:	f7fe fddf 	bl	8000970 <HAL_GetTick>
 8001db2:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001dba:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001dc2:	d11d      	bne.n	8001e00 <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dca:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001dcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001dd2:	6262      	str	r2, [r4, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001dd4:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 8001dd6:	e005      	b.n	8001de4 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7fe fdca 	bl	8000970 <HAL_GetTick>
 8001ddc:	1b40      	subs	r0, r0, r5
 8001dde:	2802      	cmp	r0, #2
 8001de0:	d9bb      	bls.n	8001d5a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8001de2:	2503      	movs	r5, #3
}
 8001de4:	4628      	mov	r0, r5
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe fdc2 	bl	8000970 <HAL_GetTick>
 8001dec:	1b40      	subs	r0, r0, r5
 8001dee:	42b0      	cmp	r0, r6
 8001df0:	d9c3      	bls.n	8001d7a <HAL_RCC_DeInit+0x32>
 8001df2:	e7f6      	b.n	8001de2 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe fdbc 	bl	8000970 <HAL_GetTick>
 8001df8:	1b80      	subs	r0, r0, r6
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9d2      	bls.n	8001da4 <HAL_RCC_DeInit+0x5c>
 8001dfe:	e7f0      	b.n	8001de2 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7fe fdb6 	bl	8000970 <HAL_GetTick>
 8001e04:	1b80      	subs	r0, r0, r6
 8001e06:	2864      	cmp	r0, #100	; 0x64
 8001e08:	d9d8      	bls.n	8001dbc <HAL_RCC_DeInit+0x74>
 8001e0a:	e7ea      	b.n	8001de2 <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 8001e0c:	2501      	movs	r5, #1
 8001e0e:	e7e9      	b.n	8001de4 <HAL_RCC_DeInit+0x9c>
 8001e10:	40021000 	.word	0x40021000
 8001e14:	20000000 	.word	0x20000000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	4605      	mov	r5, r0
 8001e26:	b338      	cbz	r0, 8001e78 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e28:	6803      	ldr	r3, [r0, #0]
 8001e2a:	07db      	lsls	r3, r3, #31
 8001e2c:	d410      	bmi.n	8001e50 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	079f      	lsls	r7, r3, #30
 8001e32:	d45e      	bmi.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	682b      	ldr	r3, [r5, #0]
 8001e36:	0719      	lsls	r1, r3, #28
 8001e38:	f100 8095 	bmi.w	8001f66 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	075a      	lsls	r2, r3, #29
 8001e40:	f100 80bf 	bmi.w	8001fc2 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e44:	69e8      	ldr	r0, [r5, #28]
 8001e46:	2800      	cmp	r0, #0
 8001e48:	f040 812c 	bne.w	80020a4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	e029      	b.n	8001ea4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e50:	4c8f      	ldr	r4, [pc, #572]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001e52:	6863      	ldr	r3, [r4, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d007      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d10a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
 8001e66:	6863      	ldr	r3, [r4, #4]
 8001e68:	03de      	lsls	r6, r3, #15
 8001e6a:	d507      	bpl.n	8001e7c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	039c      	lsls	r4, r3, #14
 8001e70:	d5dd      	bpl.n	8001e2e <HAL_RCC_OscConfig+0xe>
 8001e72:	686b      	ldr	r3, [r5, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1da      	bne.n	8001e2e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	686b      	ldr	r3, [r5, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e82:	d112      	bne.n	8001eaa <HAL_RCC_OscConfig+0x8a>
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fd70 	bl	8000970 <HAL_GetTick>
 8001e90:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	0398      	lsls	r0, r3, #14
 8001e96:	d4ca      	bmi.n	8001e2e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe fd6a 	bl	8000970 <HAL_GetTick>
 8001e9c:	1b80      	subs	r0, r0, r6
 8001e9e:	2864      	cmp	r0, #100	; 0x64
 8001ea0:	d9f7      	bls.n	8001e92 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001ea2:	2003      	movs	r0, #3
}
 8001ea4:	b002      	add	sp, #8
 8001ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eaa:	b99b      	cbnz	r3, 8001ed4 <HAL_RCC_OscConfig+0xb4>
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6023      	str	r3, [r4, #0]
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fd58 	bl	8000970 <HAL_GetTick>
 8001ec0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	0399      	lsls	r1, r3, #14
 8001ec6:	d5b2      	bpl.n	8001e2e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7fe fd52 	bl	8000970 <HAL_GetTick>
 8001ecc:	1b80      	subs	r0, r0, r6
 8001ece:	2864      	cmp	r0, #100	; 0x64
 8001ed0:	d9f7      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xa2>
 8001ed2:	e7e6      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	d103      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xc4>
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	e7cf      	b.n	8001e84 <HAL_RCC_OscConfig+0x64>
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	e7cb      	b.n	8001e8a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef2:	4c67      	ldr	r4, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	6863      	ldr	r3, [r4, #4]
 8001ef6:	f013 0f0c 	tst.w	r3, #12
 8001efa:	d007      	beq.n	8001f0c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efc:	6863      	ldr	r3, [r4, #4]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d110      	bne.n	8001f28 <HAL_RCC_OscConfig+0x108>
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	03da      	lsls	r2, r3, #15
 8001f0a:	d40d      	bmi.n	8001f28 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	079b      	lsls	r3, r3, #30
 8001f10:	d502      	bpl.n	8001f18 <HAL_RCC_OscConfig+0xf8>
 8001f12:	692b      	ldr	r3, [r5, #16]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d1af      	bne.n	8001e78 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	696a      	ldr	r2, [r5, #20]
 8001f1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f24:	6023      	str	r3, [r4, #0]
 8001f26:	e785      	b.n	8001e34 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f28:	692a      	ldr	r2, [r5, #16]
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	b16a      	cbz	r2, 8001f4a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f32:	f7fe fd1d 	bl	8000970 <HAL_GetTick>
 8001f36:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	079f      	lsls	r7, r3, #30
 8001f3c:	d4ec      	bmi.n	8001f18 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fd17 	bl	8000970 <HAL_GetTick>
 8001f42:	1b80      	subs	r0, r0, r6
 8001f44:	2802      	cmp	r0, #2
 8001f46:	d9f7      	bls.n	8001f38 <HAL_RCC_OscConfig+0x118>
 8001f48:	e7ab      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fd10 	bl	8000970 <HAL_GetTick>
 8001f50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	0798      	lsls	r0, r3, #30
 8001f56:	f57f af6d 	bpl.w	8001e34 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7fe fd09 	bl	8000970 <HAL_GetTick>
 8001f5e:	1b80      	subs	r0, r0, r6
 8001f60:	2802      	cmp	r0, #2
 8001f62:	d9f6      	bls.n	8001f52 <HAL_RCC_OscConfig+0x132>
 8001f64:	e79d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f66:	69aa      	ldr	r2, [r5, #24]
 8001f68:	4e49      	ldr	r6, [pc, #292]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_OscConfig+0x278>)
 8001f6c:	b1da      	cbz	r2, 8001fa6 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f72:	f7fe fcfd 	bl	8000970 <HAL_GetTick>
 8001f76:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001f7a:	079b      	lsls	r3, r3, #30
 8001f7c:	d50d      	bpl.n	8001f9a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f8a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001f8c:	bf00      	nop
  }
  while (Delay --);
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	9201      	str	r2, [sp, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <HAL_RCC_OscConfig+0x16c>
 8001f98:	e750      	b.n	8001e3c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7fe fce9 	bl	8000970 <HAL_GetTick>
 8001f9e:	1b00      	subs	r0, r0, r4
 8001fa0:	2802      	cmp	r0, #2
 8001fa2:	d9e9      	bls.n	8001f78 <HAL_RCC_OscConfig+0x158>
 8001fa4:	e77d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fce2 	bl	8000970 <HAL_GetTick>
 8001fac:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001fb0:	079f      	lsls	r7, r3, #30
 8001fb2:	f57f af43 	bpl.w	8001e3c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fcdb 	bl	8000970 <HAL_GetTick>
 8001fba:	1b00      	subs	r0, r0, r4
 8001fbc:	2802      	cmp	r0, #2
 8001fbe:	d9f6      	bls.n	8001fae <HAL_RCC_OscConfig+0x18e>
 8001fc0:	e76f      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4c33      	ldr	r4, [pc, #204]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	69e3      	ldr	r3, [r4, #28]
 8001fc6:	00d8      	lsls	r0, r3, #3
 8001fc8:	d424      	bmi.n	8002014 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8001fca:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	69e3      	ldr	r3, [r4, #28]
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	61e3      	str	r3, [r4, #28]
 8001fd4:	69e3      	ldr	r3, [r4, #28]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4e30      	ldr	r6, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	6833      	ldr	r3, [r6, #0]
 8001fe2:	05d9      	lsls	r1, r3, #23
 8001fe4:	d518      	bpl.n	8002018 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe6:	68eb      	ldr	r3, [r5, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d126      	bne.n	800203a <HAL_RCC_OscConfig+0x21a>
 8001fec:	6a23      	ldr	r3, [r4, #32]
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fcbc 	bl	8000970 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ffc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	6a23      	ldr	r3, [r4, #32]
 8002000:	079b      	lsls	r3, r3, #30
 8002002:	d53f      	bpl.n	8002084 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8002004:	2f00      	cmp	r7, #0
 8002006:	f43f af1d 	beq.w	8001e44 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	69e3      	ldr	r3, [r4, #28]
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	61e3      	str	r3, [r4, #28]
 8002012:	e717      	b.n	8001e44 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002014:	2700      	movs	r7, #0
 8002016:	e7e2      	b.n	8001fde <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002018:	6833      	ldr	r3, [r6, #0]
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002020:	f7fe fca6 	bl	8000970 <HAL_GetTick>
 8002024:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	6833      	ldr	r3, [r6, #0]
 8002028:	05da      	lsls	r2, r3, #23
 800202a:	d4dc      	bmi.n	8001fe6 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202c:	f7fe fca0 	bl	8000970 <HAL_GetTick>
 8002030:	eba0 0008 	sub.w	r0, r0, r8
 8002034:	2864      	cmp	r0, #100	; 0x64
 8002036:	d9f6      	bls.n	8002026 <HAL_RCC_OscConfig+0x206>
 8002038:	e733      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203a:	b9ab      	cbnz	r3, 8002068 <HAL_RCC_OscConfig+0x248>
 800203c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6223      	str	r3, [r4, #32]
 8002048:	6a23      	ldr	r3, [r4, #32]
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002050:	f7fe fc8e 	bl	8000970 <HAL_GetTick>
 8002054:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002056:	6a23      	ldr	r3, [r4, #32]
 8002058:	0798      	lsls	r0, r3, #30
 800205a:	d5d3      	bpl.n	8002004 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7fe fc88 	bl	8000970 <HAL_GetTick>
 8002060:	1b80      	subs	r0, r0, r6
 8002062:	4540      	cmp	r0, r8
 8002064:	d9f7      	bls.n	8002056 <HAL_RCC_OscConfig+0x236>
 8002066:	e71c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	2b05      	cmp	r3, #5
 800206a:	6a23      	ldr	r3, [r4, #32]
 800206c:	d103      	bne.n	8002076 <HAL_RCC_OscConfig+0x256>
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6223      	str	r3, [r4, #32]
 8002074:	e7ba      	b.n	8001fec <HAL_RCC_OscConfig+0x1cc>
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6223      	str	r3, [r4, #32]
 800207c:	6a23      	ldr	r3, [r4, #32]
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	e7b6      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe fc74 	bl	8000970 <HAL_GetTick>
 8002088:	1b80      	subs	r0, r0, r6
 800208a:	4540      	cmp	r0, r8
 800208c:	d9b7      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1de>
 800208e:	e708      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
 8002090:	40021000 	.word	0x40021000
 8002094:	42420000 	.word	0x42420000
 8002098:	42420480 	.word	0x42420480
 800209c:	20000000 	.word	0x20000000
 80020a0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x330>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	461c      	mov	r4, r3
 80020aa:	f002 020c 	and.w	r2, r2, #12
 80020ae:	2a08      	cmp	r2, #8
 80020b0:	d03d      	beq.n	800212e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	2300      	movs	r3, #0
 80020b4:	4e27      	ldr	r6, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x334>)
 80020b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80020b8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	d12b      	bne.n	8002114 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80020bc:	f7fe fc58 	bl	8000970 <HAL_GetTick>
 80020c0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	0199      	lsls	r1, r3, #6
 80020c6:	d41f      	bmi.n	8002108 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c8:	6a2b      	ldr	r3, [r5, #32]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d0:	6862      	ldr	r2, [r4, #4]
 80020d2:	68a9      	ldr	r1, [r5, #8]
 80020d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020d8:	430a      	orrs	r2, r1
 80020da:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80020e6:	4313      	orrs	r3, r2
 80020e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020ea:	2301      	movs	r3, #1
 80020ec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020ee:	f7fe fc3f 	bl	8000970 <HAL_GetTick>
 80020f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	019a      	lsls	r2, r3, #6
 80020f8:	f53f aea8 	bmi.w	8001e4c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe fc38 	bl	8000970 <HAL_GetTick>
 8002100:	1b40      	subs	r0, r0, r5
 8002102:	2802      	cmp	r0, #2
 8002104:	d9f6      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2d4>
 8002106:	e6cc      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe fc32 	bl	8000970 <HAL_GetTick>
 800210c:	1bc0      	subs	r0, r0, r7
 800210e:	2802      	cmp	r0, #2
 8002110:	d9d7      	bls.n	80020c2 <HAL_RCC_OscConfig+0x2a2>
 8002112:	e6c6      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002114:	f7fe fc2c 	bl	8000970 <HAL_GetTick>
 8002118:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	019b      	lsls	r3, r3, #6
 800211e:	f57f ae95 	bpl.w	8001e4c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fc25 	bl	8000970 <HAL_GetTick>
 8002126:	1b40      	subs	r0, r0, r5
 8002128:	2802      	cmp	r0, #2
 800212a:	d9f6      	bls.n	800211a <HAL_RCC_OscConfig+0x2fa>
 800212c:	e6b9      	b.n	8001ea2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212e:	2801      	cmp	r0, #1
 8002130:	f43f aeb8 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002134:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	6a2a      	ldr	r2, [r5, #32]
 8002138:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800213c:	4291      	cmp	r1, r2
 800213e:	f47f ae9b 	bne.w	8001e78 <HAL_RCC_OscConfig+0x58>
 8002142:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002144:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002148:	4293      	cmp	r3, r2
 800214a:	f43f ae7f 	beq.w	8001e4c <HAL_RCC_OscConfig+0x2c>
 800214e:	e693      	b.n	8001e78 <HAL_RCC_OscConfig+0x58>
 8002150:	40021000 	.word	0x40021000
 8002154:	42420060 	.word	0x42420060

08002158 <HAL_RCC_GetSysClockFreq>:
{
 8002158:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <HAL_RCC_GetSysClockFreq+0x64>)
{
 800215c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800215e:	ac02      	add	r4, sp, #8
 8002160:	f103 0510 	add.w	r5, r3, #16
 8002164:	4622      	mov	r2, r4
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	3308      	adds	r3, #8
 800216c:	c203      	stmia	r2!, {r0, r1}
 800216e:	42ab      	cmp	r3, r5
 8002170:	4614      	mov	r4, r2
 8002172:	d1f7      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002174:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002178:	4911      	ldr	r1, [pc, #68]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800217a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800217e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	f003 020c 	and.w	r2, r3, #12
 8002184:	2a08      	cmp	r2, #8
 8002186:	d117      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002188:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800218c:	a806      	add	r0, sp, #24
 800218e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002190:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002192:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002196:	d50c      	bpl.n	80021b2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002198:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219a:	480a      	ldr	r0, [pc, #40]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	aa06      	add	r2, sp, #24
 80021a4:	4413      	add	r3, r2
 80021a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021aa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80021ae:	b007      	add	sp, #28
 80021b0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x70>)
 80021b4:	4350      	muls	r0, r2
 80021b6:	e7fa      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80021ba:	e7f8      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x56>
 80021bc:	08004204 	.word	0x08004204
 80021c0:	40021000 	.word	0x40021000
 80021c4:	007a1200 	.word	0x007a1200
 80021c8:	003d0900 	.word	0x003d0900

080021cc <HAL_RCC_ClockConfig>:
{
 80021cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80021d2:	4604      	mov	r4, r0
 80021d4:	b910      	cbnz	r0, 80021dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
}
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4a44      	ldr	r2, [pc, #272]	; (80022f0 <HAL_RCC_ClockConfig+0x124>)
 80021de:	6813      	ldr	r3, [r2, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d328      	bcc.n	800223a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	6821      	ldr	r1, [r4, #0]
 80021ea:	078e      	lsls	r6, r1, #30
 80021ec:	d430      	bmi.n	8002250 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	07ca      	lsls	r2, r1, #31
 80021f0:	d443      	bmi.n	800227a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f2:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <HAL_RCC_ClockConfig+0x124>)
 80021f4:	6813      	ldr	r3, [r2, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	42ab      	cmp	r3, r5
 80021fc:	d865      	bhi.n	80022ca <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	4d3c      	ldr	r5, [pc, #240]	; (80022f4 <HAL_RCC_ClockConfig+0x128>)
 8002202:	f012 0f04 	tst.w	r2, #4
 8002206:	d16c      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	0713      	lsls	r3, r2, #28
 800220a:	d506      	bpl.n	800221a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220c:	686b      	ldr	r3, [r5, #4]
 800220e:	6922      	ldr	r2, [r4, #16]
 8002210:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002214:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002218:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800221a:	f7ff ff9d 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800221e:	686b      	ldr	r3, [r5, #4]
 8002220:	4a35      	ldr	r2, [pc, #212]	; (80022f8 <HAL_RCC_ClockConfig+0x12c>)
 8002222:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	40d8      	lsrs	r0, r3
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_ClockConfig+0x130>)
 800222c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800222e:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_RCC_ClockConfig+0x134>)
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	f7fe fb5b 	bl	80008ec <HAL_InitTick>
  return HAL_OK;
 8002236:	2000      	movs	r0, #0
 8002238:	e7ce      	b.n	80021d8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	f023 0307 	bic.w	r3, r3, #7
 8002240:	430b      	orrs	r3, r1
 8002242:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	428b      	cmp	r3, r1
 800224c:	d1c3      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xa>
 800224e:	e7cb      	b.n	80021e8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_ClockConfig+0x128>)
 8002252:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002256:	bf1e      	ittt	ne
 8002258:	685a      	ldrne	r2, [r3, #4]
 800225a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800225e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002262:	bf42      	ittt	mi
 8002264:	685a      	ldrmi	r2, [r3, #4]
 8002266:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800226a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68a0      	ldr	r0, [r4, #8]
 8002270:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002274:	4302      	orrs	r2, r0
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	e7b9      	b.n	80021ee <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	6862      	ldr	r2, [r4, #4]
 800227c:	4e1d      	ldr	r6, [pc, #116]	; (80022f4 <HAL_RCC_ClockConfig+0x128>)
 800227e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002280:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	d11a      	bne.n	80022ba <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002284:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	d0a5      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002290:	f023 0303 	bic.w	r3, r3, #3
 8002294:	4313      	orrs	r3, r2
 8002296:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002298:	f7fe fb6a 	bl	8000970 <HAL_GetTick>
 800229c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	6873      	ldr	r3, [r6, #4]
 80022a0:	6862      	ldr	r2, [r4, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022aa:	d0a2      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fb60 	bl	8000970 <HAL_GetTick>
 80022b0:	1bc0      	subs	r0, r0, r7
 80022b2:	4540      	cmp	r0, r8
 80022b4:	d9f3      	bls.n	800229e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80022b6:	2003      	movs	r0, #3
 80022b8:	e78e      	b.n	80021d8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ba:	2a02      	cmp	r2, #2
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022c2:	e7e1      	b.n	8002288 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	f013 0f02 	tst.w	r3, #2
 80022c8:	e7de      	b.n	8002288 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f023 0307 	bic.w	r3, r3, #7
 80022d0:	432b      	orrs	r3, r5
 80022d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	6813      	ldr	r3, [r2, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	42ab      	cmp	r3, r5
 80022dc:	f47f af7b 	bne.w	80021d6 <HAL_RCC_ClockConfig+0xa>
 80022e0:	e78d      	b.n	80021fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e2:	686b      	ldr	r3, [r5, #4]
 80022e4:	68e1      	ldr	r1, [r4, #12]
 80022e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ea:	430b      	orrs	r3, r1
 80022ec:	606b      	str	r3, [r5, #4]
 80022ee:	e78b      	b.n	8002208 <HAL_RCC_ClockConfig+0x3c>
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080041f4 	.word	0x080041f4
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000008 	.word	0x20000008

08002304 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002304:	6803      	ldr	r3, [r0, #0]
{
 8002306:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800230a:	07d9      	lsls	r1, r3, #31
{
 800230c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800230e:	d520      	bpl.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002310:	4c35      	ldr	r4, [pc, #212]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002312:	69e3      	ldr	r3, [r4, #28]
 8002314:	00da      	lsls	r2, r3, #3
 8002316:	d432      	bmi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002318:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	69e3      	ldr	r3, [r4, #28]
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	61e3      	str	r3, [r4, #28]
 8002322:	69e3      	ldr	r3, [r4, #28]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4e2f      	ldr	r6, [pc, #188]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800232e:	6833      	ldr	r3, [r6, #0]
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	d526      	bpl.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002334:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002336:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800233a:	d136      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233c:	6a23      	ldr	r3, [r4, #32]
 800233e:	686a      	ldr	r2, [r5, #4]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	4313      	orrs	r3, r2
 8002346:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002348:	b11f      	cbz	r7, 8002352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	69e3      	ldr	r3, [r4, #28]
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002352:	6828      	ldr	r0, [r5, #0]
 8002354:	0783      	lsls	r3, r0, #30
 8002356:	d506      	bpl.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002358:	4923      	ldr	r1, [pc, #140]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800235a:	68ab      	ldr	r3, [r5, #8]
 800235c:	684a      	ldr	r2, [r1, #4]
 800235e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002362:	431a      	orrs	r2, r3
 8002364:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002366:	f010 0010 	ands.w	r0, r0, #16
 800236a:	d01b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800236e:	68e9      	ldr	r1, [r5, #12]
 8002370:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002372:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002374:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002378:	430b      	orrs	r3, r1
 800237a:	6053      	str	r3, [r2, #4]
 800237c:	e012      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800237e:	2700      	movs	r7, #0
 8002380:	e7d4      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	6833      	ldr	r3, [r6, #0]
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800238a:	f7fe faf1 	bl	8000970 <HAL_GetTick>
 800238e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	6833      	ldr	r3, [r6, #0]
 8002392:	05d8      	lsls	r0, r3, #23
 8002394:	d4ce      	bmi.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe faeb 	bl	8000970 <HAL_GetTick>
 800239a:	eba0 0008 	sub.w	r0, r0, r8
 800239e:	2864      	cmp	r0, #100	; 0x64
 80023a0:	d9f6      	bls.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80023a2:	2003      	movs	r0, #3
}
 80023a4:	b002      	add	sp, #8
 80023a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023aa:	686a      	ldr	r2, [r5, #4]
 80023ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d0c3      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80023b4:	2001      	movs	r0, #1
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ba:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023bc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023c2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80023c4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023c6:	07d9      	lsls	r1, r3, #31
 80023c8:	d5b8      	bpl.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80023ca:	f7fe fad1 	bl	8000970 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80023d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	6a23      	ldr	r3, [r4, #32]
 80023d6:	079a      	lsls	r2, r3, #30
 80023d8:	d4b0      	bmi.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fac9 	bl	8000970 <HAL_GetTick>
 80023de:	1b80      	subs	r0, r0, r6
 80023e0:	4540      	cmp	r0, r8
 80023e2:	d9f7      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80023e4:	e7dd      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420440 	.word	0x42420440

080023f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80023f4:	b084      	sub	sp, #16
 80023f6:	a801      	add	r0, sp, #4
 80023f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80023fc:	b004      	add	sp, #16
 80023fe:	2000      	movs	r0, #0
 8002400:	4770      	bx	lr

08002402 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002402:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002404:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8002408:	2000      	movs	r0, #0
 800240a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800240e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8002412:	4770      	bx	lr

08002414 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002414:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002418:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800241c:	045b      	lsls	r3, r3, #17
 800241e:	0c5b      	lsrs	r3, r3, #17
 8002420:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002424:	2000      	movs	r0, #0
 8002426:	4770      	bx	lr

08002428 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002428:	2000      	movs	r0, #0
 800242a:	4770      	bx	lr

0800242c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800242c:	b084      	sub	sp, #16
 800242e:	b510      	push	{r4, lr}
 8002430:	4604      	mov	r4, r0
 8002432:	a803      	add	r0, sp, #12
 8002434:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002438:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800243a:	2301      	movs	r3, #1
 800243c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8002440:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002444:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002448:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002450:	b004      	add	sp, #16
 8002452:	4770      	bx	lr

08002454 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002456:	780d      	ldrb	r5, [r1, #0]
{
 8002458:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800245a:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800245e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002460:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002464:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002468:	0412      	lsls	r2, r2, #16
 800246a:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800246c:	2803      	cmp	r0, #3
 800246e:	d84f      	bhi.n	8002510 <USB_ActivateEndpoint+0xbc>
 8002470:	e8df f000 	tbb	[pc, r0]
 8002474:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800247c:	f248 0480 	movw	r4, #32896	; 0x8080
 8002480:	4322      	orrs	r2, r4
 8002482:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002486:	780e      	ldrb	r6, [r1, #0]
 8002488:	4d9b      	ldr	r5, [pc, #620]	; (80026f8 <USB_ActivateEndpoint+0x2a4>)
 800248a:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800248e:	b292      	uxth	r2, r2
 8002490:	402a      	ands	r2, r5
 8002492:	4332      	orrs	r2, r6
 8002494:	4322      	orrs	r2, r4
 8002496:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800249a:	7b0c      	ldrb	r4, [r1, #12]
 800249c:	780a      	ldrb	r2, [r1, #0]
 800249e:	2c00      	cmp	r4, #0
 80024a0:	f040 8089 	bne.w	80025b6 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 80024a4:	88cc      	ldrh	r4, [r1, #6]
 80024a6:	784e      	ldrb	r6, [r1, #1]
 80024a8:	0864      	lsrs	r4, r4, #1
 80024aa:	0064      	lsls	r4, r4, #1
 80024ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80024b0:	b386      	cbz	r6, 8002514 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80024b2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80024b6:	b2b6      	uxth	r6, r6
 80024b8:	4432      	add	r2, r6
 80024ba:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024be:	780c      	ldrb	r4, [r1, #0]
 80024c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024c4:	0652      	lsls	r2, r2, #25
 80024c6:	d509      	bpl.n	80024dc <USB_ActivateEndpoint+0x88>
 80024c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024cc:	b292      	uxth	r2, r2
 80024ce:	402a      	ands	r2, r5
 80024d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80024d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80024dc:	78ca      	ldrb	r2, [r1, #3]
 80024de:	780c      	ldrb	r4, [r1, #0]
 80024e0:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024e6:	4985      	ldr	r1, [pc, #532]	; (80026fc <USB_ActivateEndpoint+0x2a8>)
 80024e8:	b292      	uxth	r2, r2
 80024ea:	ea02 0201 	and.w	r2, r2, r1
 80024ee:	bf18      	it	ne
 80024f0:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002500:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8002502:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002506:	2000      	movs	r0, #0
      break;
 8002508:	e7b8      	b.n	800247c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800250a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800250e:	e7fa      	b.n	8002506 <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 8002510:	2001      	movs	r0, #1
 8002512:	e7b3      	b.n	800247c <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002514:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002518:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800251a:	b2ad      	uxth	r5, r5
 800251c:	442a      	add	r2, r5
 800251e:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002522:	780a      	ldrb	r2, [r1, #0]
 8002524:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002528:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800252c:	b2a4      	uxth	r4, r4
 800252e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002532:	bb7e      	cbnz	r6, 8002594 <USB_ActivateEndpoint+0x140>
 8002534:	5b15      	ldrh	r5, [r2, r4]
 8002536:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800253a:	042d      	lsls	r5, r5, #16
 800253c:	0c2d      	lsrs	r5, r5, #16
 800253e:	5315      	strh	r5, [r2, r4]
 8002540:	5b15      	ldrh	r5, [r2, r4]
 8002542:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8002546:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800254a:	b2ad      	uxth	r5, r5
 800254c:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800254e:	780c      	ldrb	r4, [r1, #0]
 8002550:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002554:	0455      	lsls	r5, r2, #17
 8002556:	d50d      	bpl.n	8002574 <USB_ActivateEndpoint+0x120>
 8002558:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800255c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002560:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002564:	0412      	lsls	r2, r2, #16
 8002566:	0c12      	lsrs	r2, r2, #16
 8002568:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800256c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002570:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002574:	7809      	ldrb	r1, [r1, #0]
 8002576:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800257a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800257e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002582:	0412      	lsls	r2, r2, #16
 8002584:	0c12      	lsrs	r2, r2, #16
 8002586:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002592:	e071      	b.n	8002678 <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002594:	2e3e      	cmp	r6, #62	; 0x3e
 8002596:	d805      	bhi.n	80025a4 <USB_ActivateEndpoint+0x150>
 8002598:	0875      	lsrs	r5, r6, #1
 800259a:	07f7      	lsls	r7, r6, #31
 800259c:	bf48      	it	mi
 800259e:	3501      	addmi	r5, #1
 80025a0:	02ad      	lsls	r5, r5, #10
 80025a2:	e7d2      	b.n	800254a <USB_ActivateEndpoint+0xf6>
 80025a4:	0977      	lsrs	r7, r6, #5
 80025a6:	4d56      	ldr	r5, [pc, #344]	; (8002700 <USB_ActivateEndpoint+0x2ac>)
 80025a8:	06f6      	lsls	r6, r6, #27
 80025aa:	bf08      	it	eq
 80025ac:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80025b0:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80025b4:	e7c9      	b.n	800254a <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80025b6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80025ba:	b2a4      	uxth	r4, r4
 80025bc:	402c      	ands	r4, r5
 80025be:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80025c2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80025c6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80025ca:	780a      	ldrb	r2, [r1, #0]
 80025cc:	890c      	ldrh	r4, [r1, #8]
 80025ce:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80025d2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80025d6:	0864      	lsrs	r4, r4, #1
 80025d8:	b2b6      	uxth	r6, r6
 80025da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025de:	0064      	lsls	r4, r4, #1
 80025e0:	5394      	strh	r4, [r2, r6]
 80025e2:	780a      	ldrb	r2, [r1, #0]
 80025e4:	894c      	ldrh	r4, [r1, #10]
 80025e6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80025ea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80025ee:	0864      	lsrs	r4, r4, #1
 80025f0:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80025f4:	0064      	lsls	r4, r4, #1
 80025f6:	b2b6      	uxth	r6, r6
 80025f8:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 80025fa:	784a      	ldrb	r2, [r1, #1]
 80025fc:	780c      	ldrb	r4, [r1, #0]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	d13d      	bne.n	800267e <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002602:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002606:	0452      	lsls	r2, r2, #17
 8002608:	d509      	bpl.n	800261e <USB_ActivateEndpoint+0x1ca>
 800260a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800260e:	b292      	uxth	r2, r2
 8002610:	402a      	ands	r2, r5
 8002612:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800261e:	780c      	ldrb	r4, [r1, #0]
 8002620:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002624:	0657      	lsls	r7, r2, #25
 8002626:	d50d      	bpl.n	8002644 <USB_ActivateEndpoint+0x1f0>
 8002628:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800262c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002630:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002634:	0412      	lsls	r2, r2, #16
 8002636:	0c12      	lsrs	r2, r2, #16
 8002638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002640:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002644:	f248 0480 	movw	r4, #32896	; 0x8080
 8002648:	780d      	ldrb	r5, [r1, #0]
 800264a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800264e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002652:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002656:	0412      	lsls	r2, r2, #16
 8002658:	0c12      	lsrs	r2, r2, #16
 800265a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800265e:	4322      	orrs	r2, r4
 8002660:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002664:	7809      	ldrb	r1, [r1, #0]
 8002666:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800266a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800266e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002672:	0412      	lsls	r2, r2, #16
 8002674:	0c12      	lsrs	r2, r2, #16
 8002676:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002678:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800267c:	e740      	b.n	8002500 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800267e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002682:	0456      	lsls	r6, r2, #17
 8002684:	d509      	bpl.n	800269a <USB_ActivateEndpoint+0x246>
 8002686:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800268a:	b292      	uxth	r2, r2
 800268c:	402a      	ands	r2, r5
 800268e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002696:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800269a:	780c      	ldrb	r4, [r1, #0]
 800269c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026a0:	0652      	lsls	r2, r2, #25
 80026a2:	d50d      	bpl.n	80026c0 <USB_ActivateEndpoint+0x26c>
 80026a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80026ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026b0:	0412      	lsls	r2, r2, #16
 80026b2:	0c12      	lsrs	r2, r2, #16
 80026b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80026bc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80026c0:	78ca      	ldrb	r2, [r1, #3]
 80026c2:	780c      	ldrb	r4, [r1, #0]
 80026c4:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80026c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026ca:	4d0c      	ldr	r5, [pc, #48]	; (80026fc <USB_ActivateEndpoint+0x2a8>)
 80026cc:	b292      	uxth	r2, r2
 80026ce:	ea02 0205 	and.w	r2, r2, r5
 80026d2:	bf18      	it	ne
 80026d4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80026d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80026e4:	7809      	ldrb	r1, [r1, #0]
 80026e6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80026ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026f2:	0412      	lsls	r2, r2, #16
 80026f4:	0c12      	lsrs	r2, r2, #16
 80026f6:	e748      	b.n	800258a <USB_ActivateEndpoint+0x136>
 80026f8:	ffff8f8f 	.word	0xffff8f8f
 80026fc:	ffff8fbf 	.word	0xffff8fbf
 8002700:	ffff8000 	.word	0xffff8000

08002704 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002704:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002706:	7b0c      	ldrb	r4, [r1, #12]
 8002708:	784b      	ldrb	r3, [r1, #1]
 800270a:	780a      	ldrb	r2, [r1, #0]
 800270c:	2c00      	cmp	r4, #0
 800270e:	d13d      	bne.n	800278c <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8002710:	b313      	cbz	r3, 8002758 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002712:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002716:	065c      	lsls	r4, r3, #25
 8002718:	d50d      	bpl.n	8002736 <USB_DeactivateEndpoint+0x32>
 800271a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800271e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002732:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002736:	780a      	ldrb	r2, [r1, #0]
 8002738:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800273c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002744:	041b      	lsls	r3, r3, #16
 8002746:	0c1b      	lsrs	r3, r3, #16
 8002748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002750:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002754:	2000      	movs	r0, #0
 8002756:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002758:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800275c:	045b      	lsls	r3, r3, #17
 800275e:	d50d      	bpl.n	800277c <USB_DeactivateEndpoint+0x78>
 8002760:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002778:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800277c:	780a      	ldrb	r2, [r1, #0]
 800277e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278a:	e7db      	b.n	8002744 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 800278c:	2b00      	cmp	r3, #0
 800278e:	d14e      	bne.n	800282e <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002790:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002794:	045c      	lsls	r4, r3, #17
 8002796:	d50d      	bpl.n	80027b4 <USB_DeactivateEndpoint+0xb0>
 8002798:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800279c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027b4:	780a      	ldrb	r2, [r1, #0]
 80027b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ba:	065b      	lsls	r3, r3, #25
 80027bc:	d50d      	bpl.n	80027da <USB_DeactivateEndpoint+0xd6>
 80027be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80027da:	780a      	ldrb	r2, [r1, #0]
 80027dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027f8:	f248 0280 	movw	r2, #32896	; 0x8080
 80027fc:	780c      	ldrb	r4, [r1, #0]
 80027fe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	4313      	orrs	r3, r2
 8002810:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002814:	7809      	ldrb	r1, [r1, #0]
 8002816:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800281a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	4313      	orrs	r3, r2
 8002828:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800282c:	e792      	b.n	8002754 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800282e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002832:	045c      	lsls	r4, r3, #17
 8002834:	d50d      	bpl.n	8002852 <USB_DeactivateEndpoint+0x14e>
 8002836:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800283a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002852:	780a      	ldrb	r2, [r1, #0]
 8002854:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002858:	065b      	lsls	r3, r3, #25
 800285a:	d50d      	bpl.n	8002878 <USB_DeactivateEndpoint+0x174>
 800285c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	0c1b      	lsrs	r3, r3, #16
 800286c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002870:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002874:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002878:	780a      	ldrb	r2, [r1, #0]
 800287a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800287e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002892:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002896:	f248 0280 	movw	r2, #32896	; 0x8080
 800289a:	780c      	ldrb	r4, [r1, #0]
 800289c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80028a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028b2:	7809      	ldrb	r1, [r1, #0]
 80028b4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	e7af      	b.n	8002822 <USB_DeactivateEndpoint+0x11e>

080028c2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80028c2:	784b      	ldrb	r3, [r1, #1]
 80028c4:	780a      	ldrb	r2, [r1, #0]
 80028c6:	b18b      	cbz	r3, 80028ec <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80028c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80028dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80028e8:	2000      	movs	r0, #0
 80028ea:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80028ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002900:	e7ec      	b.n	80028dc <USB_EPSetStall+0x1a>

08002902 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002902:	7b0b      	ldrb	r3, [r1, #12]
 8002904:	bb43      	cbnz	r3, 8002958 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8002906:	784b      	ldrb	r3, [r1, #1]
 8002908:	780a      	ldrb	r2, [r1, #0]
 800290a:	b33b      	cbz	r3, 800295c <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800290c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002910:	065b      	lsls	r3, r3, #25
 8002912:	d50d      	bpl.n	8002930 <USB_EPClearStall+0x2e>
 8002914:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800292c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002930:	78cb      	ldrb	r3, [r1, #3]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d010      	beq.n	8002958 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002936:	780a      	ldrb	r2, [r1, #0]
 8002938:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800293c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800294c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002958:	2000      	movs	r0, #0
 800295a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800295c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002960:	045b      	lsls	r3, r3, #17
 8002962:	d50d      	bpl.n	8002980 <USB_EPClearStall+0x7e>
 8002964:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002980:	780a      	ldrb	r2, [r1, #0]
 8002982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002996:	e7d9      	b.n	800294c <USB_EPClearStall+0x4a>

08002998 <USB_StopDevice>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002998:	2201      	movs	r2, #1
{
 800299a:	4603      	mov	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800299c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 80029a0:	2000      	movs	r0, #0

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 80029a2:	2203      	movs	r2, #3
  USBx->ISTR = 0U;
 80029a4:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 80029a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80029ac:	4770      	bx	lr

080029ae <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80029ae:	b911      	cbnz	r1, 80029b6 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80029b6:	2000      	movs	r0, #0
 80029b8:	4770      	bx	lr

080029ba <USB_DevConnect>:
 80029ba:	2000      	movs	r0, #0
 80029bc:	4770      	bx	lr

080029be <USB_DevDisconnect>:
 80029be:	2000      	movs	r0, #0
 80029c0:	4770      	bx	lr

080029c2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80029c2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80029c6:	b280      	uxth	r0, r0
 80029c8:	4770      	bx	lr

080029ca <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80029ca:	2000      	movs	r0, #0
 80029cc:	4770      	bx	lr

080029ce <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80029ce:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80029d2:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80029d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80029de:	429a      	cmp	r2, r3
 80029e0:	d100      	bne.n	80029e4 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80029e2:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80029e4:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80029e8:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 80029ec:	e7f7      	b.n	80029de <USB_WritePMA+0x10>
	...

080029f0 <USB_EPStartXfer>:
{
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80029f4:	7849      	ldrb	r1, [r1, #1]
{
 80029f6:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 80029f8:	2901      	cmp	r1, #1
 80029fa:	7b22      	ldrb	r2, [r4, #12]
 80029fc:	f040 8255 	bne.w	8002eaa <USB_EPStartXfer+0x4ba>
    if (ep->xfer_len > ep->maxpacket)
 8002a00:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8002a04:	69a6      	ldr	r6, [r4, #24]
 8002a06:	6961      	ldr	r1, [r4, #20]
 8002a08:	4566      	cmp	r6, ip
 8002a0a:	bf28      	it	cs
 8002a0c:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8002a0e:	bb02      	cbnz	r2, 8002a52 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002a10:	b2b6      	uxth	r6, r6
 8002a12:	88e2      	ldrh	r2, [r4, #6]
 8002a14:	4633      	mov	r3, r6
 8002a16:	f7ff ffda 	bl	80029ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002a1a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a1e:	7821      	ldrb	r1, [r4, #0]
 8002a20:	b290      	uxth	r0, r2
 8002a22:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8002a26:	0109      	lsls	r1, r1, #4
 8002a28:	4402      	add	r2, r0
 8002a2a:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002a2c:	7822      	ldrb	r2, [r4, #0]
 8002a2e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8002a42:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8002a52:	78e2      	ldrb	r2, [r4, #3]
 8002a54:	7827      	ldrb	r7, [r4, #0]
 8002a56:	2a02      	cmp	r2, #2
 8002a58:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002a5a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
      if (ep->type == EP_TYPE_BULK)
 8002a5e:	f040 811e 	bne.w	8002c9e <USB_EPStartXfer+0x2ae>
        if (ep->xfer_len_db > ep->maxpacket)
 8002a62:	459c      	cmp	ip, r3
 8002a64:	f080 8101 	bcs.w	8002c6a <USB_EPStartXfer+0x27a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002a68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a70:	0412      	lsls	r2, r2, #16
 8002a72:	0c12      	lsrs	r2, r2, #16
 8002a74:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a80:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8002a82:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a84:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8002a88:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a8e:	b2b3      	uxth	r3, r6
 8002a90:	7860      	ldrb	r0, [r4, #1]
 8002a92:	d075      	beq.n	8002b80 <USB_EPStartXfer+0x190>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d153      	bne.n	8002b40 <USB_EPStartXfer+0x150>
 8002a98:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002a9c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8002aa0:	b280      	uxth	r0, r0
 8002aa2:	4438      	add	r0, r7
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d137      	bne.n	8002b1a <USB_EPStartXfer+0x12a>
 8002aaa:	5a87      	ldrh	r7, [r0, r2]
 8002aac:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8002ab0:	043f      	lsls	r7, r7, #16
 8002ab2:	0c3f      	lsrs	r7, r7, #16
 8002ab4:	5287      	strh	r7, [r0, r2]
 8002ab6:	5a87      	ldrh	r7, [r0, r2]
 8002ab8:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8002abc:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8002ac0:	b2bf      	uxth	r7, r7
 8002ac2:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	8962      	ldrh	r2, [r4, #10]
 8002ac8:	f7ff ff81 	bl	80029ce <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002acc:	6a22      	ldr	r2, [r4, #32]
 8002ace:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002ad0:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002ad2:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8002ad4:	bf8a      	itet	hi
 8002ad6:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8002ad8:	2300      	movls	r3, #0
 8002ada:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002adc:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8002ade:	4431      	add	r1, r6
 8002ae0:	6223      	str	r3, [r4, #32]
 8002ae2:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ae4:	b293      	uxth	r3, r2
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	f040 8159 	bne.w	8002d9e <USB_EPStartXfer+0x3ae>
 8002aec:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002af0:	7826      	ldrb	r6, [r4, #0]
 8002af2:	b280      	uxth	r0, r0
 8002af4:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8002af8:	0136      	lsls	r6, r6, #4
 8002afa:	4438      	add	r0, r7
 8002afc:	bb5a      	cbnz	r2, 8002b56 <USB_EPStartXfer+0x166>
 8002afe:	5a32      	ldrh	r2, [r6, r0]
 8002b00:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b04:	0412      	lsls	r2, r2, #16
 8002b06:	0c12      	lsrs	r2, r2, #16
 8002b08:	5232      	strh	r2, [r6, r0]
 8002b0a:	5a32      	ldrh	r2, [r6, r0]
 8002b0c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b10:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b14:	b292      	uxth	r2, r2
 8002b16:	5232      	strh	r2, [r6, r0]
 8002b18:	e026      	b.n	8002b68 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b1a:	2e3e      	cmp	r6, #62	; 0x3e
 8002b1c:	d806      	bhi.n	8002b2c <USB_EPStartXfer+0x13c>
 8002b1e:	0877      	lsrs	r7, r6, #1
 8002b20:	f016 0f01 	tst.w	r6, #1
 8002b24:	bf18      	it	ne
 8002b26:	3701      	addne	r7, #1
 8002b28:	02bf      	lsls	r7, r7, #10
 8002b2a:	e7c9      	b.n	8002ac0 <USB_EPStartXfer+0xd0>
 8002b2c:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002b30:	06f7      	lsls	r7, r6, #27
 8002b32:	4fa1      	ldr	r7, [pc, #644]	; (8002db8 <USB_EPStartXfer+0x3c8>)
 8002b34:	bf08      	it	eq
 8002b36:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002b3a:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002b3e:	e7bf      	b.n	8002ac0 <USB_EPStartXfer+0xd0>
 8002b40:	2801      	cmp	r0, #1
 8002b42:	d1bf      	bne.n	8002ac4 <USB_EPStartXfer+0xd4>
 8002b44:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b287      	uxth	r7, r0
 8002b4c:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002b50:	4438      	add	r0, r7
 8002b52:	5283      	strh	r3, [r0, r2]
 8002b54:	e7b6      	b.n	8002ac4 <USB_EPStartXfer+0xd4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b56:	2a3e      	cmp	r2, #62	; 0x3e
 8002b58:	d809      	bhi.n	8002b6e <USB_EPStartXfer+0x17e>
 8002b5a:	0857      	lsrs	r7, r2, #1
 8002b5c:	07d2      	lsls	r2, r2, #31
 8002b5e:	bf48      	it	mi
 8002b60:	3701      	addmi	r7, #1
 8002b62:	02bf      	lsls	r7, r7, #10
 8002b64:	b2bf      	uxth	r7, r7
 8002b66:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b68:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	e094      	b.n	8002c98 <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b6e:	0957      	lsrs	r7, r2, #5
 8002b70:	06d2      	lsls	r2, r2, #27
 8002b72:	4a91      	ldr	r2, [pc, #580]	; (8002db8 <USB_EPStartXfer+0x3c8>)
 8002b74:	bf08      	it	eq
 8002b76:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002b7a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002b7e:	e7c9      	b.n	8002b14 <USB_EPStartXfer+0x124>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d153      	bne.n	8002c2c <USB_EPStartXfer+0x23c>
 8002b84:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002b88:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8002b8c:	b280      	uxth	r0, r0
 8002b8e:	4438      	add	r0, r7
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	d137      	bne.n	8002c06 <USB_EPStartXfer+0x216>
 8002b96:	5a87      	ldrh	r7, [r0, r2]
 8002b98:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8002b9c:	043f      	lsls	r7, r7, #16
 8002b9e:	0c3f      	lsrs	r7, r7, #16
 8002ba0:	5287      	strh	r7, [r0, r2]
 8002ba2:	5a87      	ldrh	r7, [r0, r2]
 8002ba4:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8002ba8:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8002bac:	b2bf      	uxth	r7, r7
 8002bae:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	8922      	ldrh	r2, [r4, #8]
 8002bb4:	f7ff ff0b 	bl	80029ce <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002bb8:	6a22      	ldr	r2, [r4, #32]
 8002bba:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002bbc:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002bbe:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8002bc0:	bf8a      	itet	hi
 8002bc2:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8002bc4:	2300      	movls	r3, #0
 8002bc6:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bc8:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8002bca:	4431      	add	r1, r6
 8002bcc:	6223      	str	r3, [r4, #32]
 8002bce:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bd0:	b293      	uxth	r3, r2
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	f040 815c 	bne.w	8002e90 <USB_EPStartXfer+0x4a0>
 8002bd8:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002bdc:	7826      	ldrb	r6, [r4, #0]
 8002bde:	b280      	uxth	r0, r0
 8002be0:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8002be4:	0136      	lsls	r6, r6, #4
 8002be6:	4438      	add	r0, r7
 8002be8:	bb5a      	cbnz	r2, 8002c42 <USB_EPStartXfer+0x252>
 8002bea:	5a32      	ldrh	r2, [r6, r0]
 8002bec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002bf0:	0412      	lsls	r2, r2, #16
 8002bf2:	0c12      	lsrs	r2, r2, #16
 8002bf4:	5232      	strh	r2, [r6, r0]
 8002bf6:	5a32      	ldrh	r2, [r6, r0]
 8002bf8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002bfc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002c00:	b292      	uxth	r2, r2
 8002c02:	5232      	strh	r2, [r6, r0]
 8002c04:	e026      	b.n	8002c54 <USB_EPStartXfer+0x264>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c06:	2e3e      	cmp	r6, #62	; 0x3e
 8002c08:	d806      	bhi.n	8002c18 <USB_EPStartXfer+0x228>
 8002c0a:	0877      	lsrs	r7, r6, #1
 8002c0c:	f016 0f01 	tst.w	r6, #1
 8002c10:	bf18      	it	ne
 8002c12:	3701      	addne	r7, #1
 8002c14:	02bf      	lsls	r7, r7, #10
 8002c16:	e7c9      	b.n	8002bac <USB_EPStartXfer+0x1bc>
 8002c18:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002c1c:	06f7      	lsls	r7, r6, #27
 8002c1e:	4f66      	ldr	r7, [pc, #408]	; (8002db8 <USB_EPStartXfer+0x3c8>)
 8002c20:	bf08      	it	eq
 8002c22:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002c26:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002c2a:	e7bf      	b.n	8002bac <USB_EPStartXfer+0x1bc>
 8002c2c:	2801      	cmp	r0, #1
 8002c2e:	d1bf      	bne.n	8002bb0 <USB_EPStartXfer+0x1c0>
 8002c30:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b287      	uxth	r7, r0
 8002c38:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002c3c:	4438      	add	r0, r7
 8002c3e:	5283      	strh	r3, [r0, r2]
 8002c40:	e7b6      	b.n	8002bb0 <USB_EPStartXfer+0x1c0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c42:	2a3e      	cmp	r2, #62	; 0x3e
 8002c44:	d808      	bhi.n	8002c58 <USB_EPStartXfer+0x268>
 8002c46:	0857      	lsrs	r7, r2, #1
 8002c48:	07d2      	lsls	r2, r2, #31
 8002c4a:	bf48      	it	mi
 8002c4c:	3701      	addmi	r7, #1
 8002c4e:	02bf      	lsls	r7, r7, #10
 8002c50:	b2bf      	uxth	r7, r7
 8002c52:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c54:	8962      	ldrh	r2, [r4, #10]
 8002c56:	e788      	b.n	8002b6a <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c58:	0957      	lsrs	r7, r2, #5
 8002c5a:	06d2      	lsls	r2, r2, #27
 8002c5c:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <USB_EPStartXfer+0x3c8>)
 8002c5e:	bf08      	it	eq
 8002c60:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002c64:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002c68:	e7ca      	b.n	8002c00 <USB_EPStartXfer+0x210>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002c6a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002c6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c72:	0412      	lsls	r2, r2, #16
 8002c74:	0c12      	lsrs	r2, r2, #16
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c7e:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c86:	7826      	ldrb	r6, [r4, #0]
 8002c88:	b297      	uxth	r7, r2
 8002c8a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002c8e:	443a      	add	r2, r7
 8002c90:	0136      	lsls	r6, r6, #4
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c96:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c98:	f7ff fe99 	bl	80029ce <USB_WritePMA>
 8002c9c:	e6c6      	b.n	8002a2c <USB_EPStartXfer+0x3c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8002c9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ca2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ca6:	0412      	lsls	r2, r2, #16
 8002ca8:	0c12      	lsrs	r2, r2, #16
 8002caa:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb2:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002cb6:	7822      	ldrb	r2, [r4, #0]
        ep->xfer_len_db -= len;
 8002cb8:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002cba:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
        ep->xfer_len_db -= len;
 8002cbe:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002cc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cc4:	b2b3      	uxth	r3, r6
 8002cc6:	7860      	ldrb	r0, [r4, #1]
 8002cc8:	d078      	beq.n	8002dbc <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d151      	bne.n	8002d72 <USB_EPStartXfer+0x382>
 8002cce:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002cd2:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8002cd6:	b280      	uxth	r0, r0
 8002cd8:	4438      	add	r0, r7
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	2e00      	cmp	r6, #0
 8002cde:	d135      	bne.n	8002d4c <USB_EPStartXfer+0x35c>
 8002ce0:	5a87      	ldrh	r7, [r0, r2]
 8002ce2:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8002ce6:	043f      	lsls	r7, r7, #16
 8002ce8:	0c3f      	lsrs	r7, r7, #16
 8002cea:	5287      	strh	r7, [r0, r2]
 8002cec:	5a87      	ldrh	r7, [r0, r2]
 8002cee:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8002cf2:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8002cf6:	b2bf      	uxth	r7, r7
 8002cf8:	5287      	strh	r7, [r0, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002cfa:	8962      	ldrh	r2, [r4, #10]
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	f7ff fe66 	bl	80029ce <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8002d02:	6a22      	ldr	r2, [r4, #32]
 8002d04:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8002d06:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002d08:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8002d0a:	bf8a      	itet	hi
 8002d0c:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 8002d0e:	2300      	movls	r3, #0
 8002d10:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8002d12:	4431      	add	r1, r6
 8002d14:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8002d16:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	f43f ae87 	beq.w	8002a2c <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d1e:	7860      	ldrb	r0, [r4, #1]
 8002d20:	b293      	uxth	r3, r2
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d13b      	bne.n	8002d9e <USB_EPStartXfer+0x3ae>
 8002d26:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8002d2a:	7827      	ldrb	r7, [r4, #0]
 8002d2c:	b2b0      	uxth	r0, r6
 8002d2e:	2a3e      	cmp	r2, #62	; 0x3e
 8002d30:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8002d34:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8002d38:	4406      	add	r6, r0
 8002d3a:	d825      	bhi.n	8002d88 <USB_EPStartXfer+0x398>
 8002d3c:	0850      	lsrs	r0, r2, #1
 8002d3e:	07d2      	lsls	r2, r2, #31
 8002d40:	bf48      	it	mi
 8002d42:	3001      	addmi	r0, #1
 8002d44:	0280      	lsls	r0, r0, #10
 8002d46:	b280      	uxth	r0, r0
 8002d48:	53b8      	strh	r0, [r7, r6]
 8002d4a:	e70d      	b.n	8002b68 <USB_EPStartXfer+0x178>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d4c:	2e3e      	cmp	r6, #62	; 0x3e
 8002d4e:	d806      	bhi.n	8002d5e <USB_EPStartXfer+0x36e>
 8002d50:	0877      	lsrs	r7, r6, #1
 8002d52:	f016 0f01 	tst.w	r6, #1
 8002d56:	bf18      	it	ne
 8002d58:	3701      	addne	r7, #1
 8002d5a:	02bf      	lsls	r7, r7, #10
 8002d5c:	e7cb      	b.n	8002cf6 <USB_EPStartXfer+0x306>
 8002d5e:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002d62:	06f7      	lsls	r7, r6, #27
 8002d64:	4f14      	ldr	r7, [pc, #80]	; (8002db8 <USB_EPStartXfer+0x3c8>)
 8002d66:	bf08      	it	eq
 8002d68:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002d6c:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002d70:	e7c1      	b.n	8002cf6 <USB_EPStartXfer+0x306>
 8002d72:	2801      	cmp	r0, #1
 8002d74:	d1c1      	bne.n	8002cfa <USB_EPStartXfer+0x30a>
 8002d76:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b287      	uxth	r7, r0
 8002d7e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002d82:	4438      	add	r0, r7
 8002d84:	5283      	strh	r3, [r0, r2]
 8002d86:	e7b8      	b.n	8002cfa <USB_EPStartXfer+0x30a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d88:	0950      	lsrs	r0, r2, #5
 8002d8a:	06d2      	lsls	r2, r2, #27
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <USB_EPStartXfer+0x3c8>)
 8002d8e:	bf08      	it	eq
 8002d90:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002d94:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	53ba      	strh	r2, [r7, r6]
 8002d9c:	e6e4      	b.n	8002b68 <USB_EPStartXfer+0x178>
 8002d9e:	2801      	cmp	r0, #1
 8002da0:	f47f aee2 	bne.w	8002b68 <USB_EPStartXfer+0x178>
 8002da4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002da8:	7820      	ldrb	r0, [r4, #0]
 8002daa:	b296      	uxth	r6, r2
 8002dac:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8002db0:	0100      	lsls	r0, r0, #4
 8002db2:	4432      	add	r2, r6
 8002db4:	5283      	strh	r3, [r0, r2]
 8002db6:	e6d7      	b.n	8002b68 <USB_EPStartXfer+0x178>
 8002db8:	ffff8000 	.word	0xffff8000
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d151      	bne.n	8002e64 <USB_EPStartXfer+0x474>
 8002dc0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002dc4:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8002dc8:	b280      	uxth	r0, r0
 8002dca:	4438      	add	r0, r7
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	2e00      	cmp	r6, #0
 8002dd0:	d135      	bne.n	8002e3e <USB_EPStartXfer+0x44e>
 8002dd2:	5a87      	ldrh	r7, [r0, r2]
 8002dd4:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8002dd8:	043f      	lsls	r7, r7, #16
 8002dda:	0c3f      	lsrs	r7, r7, #16
 8002ddc:	5287      	strh	r7, [r0, r2]
 8002dde:	5a87      	ldrh	r7, [r0, r2]
 8002de0:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8002de4:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8002de8:	b2bf      	uxth	r7, r7
 8002dea:	5287      	strh	r7, [r0, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002dec:	8922      	ldrh	r2, [r4, #8]
 8002dee:	4628      	mov	r0, r5
 8002df0:	f7ff fded 	bl	80029ce <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8002df4:	6a22      	ldr	r2, [r4, #32]
 8002df6:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8002df8:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002dfa:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8002dfc:	bf8a      	itet	hi
 8002dfe:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 8002e00:	2300      	movls	r3, #0
 8002e02:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8002e04:	4431      	add	r1, r6
 8002e06:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8002e08:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002e0a:	2a00      	cmp	r2, #0
 8002e0c:	f43f ae0e 	beq.w	8002a2c <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e10:	7860      	ldrb	r0, [r4, #1]
 8002e12:	b293      	uxth	r3, r2
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d13b      	bne.n	8002e90 <USB_EPStartXfer+0x4a0>
 8002e18:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8002e1c:	7827      	ldrb	r7, [r4, #0]
 8002e1e:	b2b0      	uxth	r0, r6
 8002e20:	2a3e      	cmp	r2, #62	; 0x3e
 8002e22:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8002e26:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8002e2a:	4406      	add	r6, r0
 8002e2c:	d825      	bhi.n	8002e7a <USB_EPStartXfer+0x48a>
 8002e2e:	0850      	lsrs	r0, r2, #1
 8002e30:	07d2      	lsls	r2, r2, #31
 8002e32:	bf48      	it	mi
 8002e34:	3001      	addmi	r0, #1
 8002e36:	0280      	lsls	r0, r0, #10
 8002e38:	b280      	uxth	r0, r0
 8002e3a:	53b8      	strh	r0, [r7, r6]
 8002e3c:	e70a      	b.n	8002c54 <USB_EPStartXfer+0x264>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e3e:	2e3e      	cmp	r6, #62	; 0x3e
 8002e40:	d806      	bhi.n	8002e50 <USB_EPStartXfer+0x460>
 8002e42:	0877      	lsrs	r7, r6, #1
 8002e44:	f016 0f01 	tst.w	r6, #1
 8002e48:	bf18      	it	ne
 8002e4a:	3701      	addne	r7, #1
 8002e4c:	02bf      	lsls	r7, r7, #10
 8002e4e:	e7cb      	b.n	8002de8 <USB_EPStartXfer+0x3f8>
 8002e50:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002e54:	06f7      	lsls	r7, r6, #27
 8002e56:	4fac      	ldr	r7, [pc, #688]	; (8003108 <USB_EPStartXfer+0x718>)
 8002e58:	bf08      	it	eq
 8002e5a:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002e5e:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002e62:	e7c1      	b.n	8002de8 <USB_EPStartXfer+0x3f8>
 8002e64:	2801      	cmp	r0, #1
 8002e66:	d1c1      	bne.n	8002dec <USB_EPStartXfer+0x3fc>
 8002e68:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b287      	uxth	r7, r0
 8002e70:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002e74:	4438      	add	r0, r7
 8002e76:	5283      	strh	r3, [r0, r2]
 8002e78:	e7b8      	b.n	8002dec <USB_EPStartXfer+0x3fc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e7a:	0950      	lsrs	r0, r2, #5
 8002e7c:	06d2      	lsls	r2, r2, #27
 8002e7e:	4aa2      	ldr	r2, [pc, #648]	; (8003108 <USB_EPStartXfer+0x718>)
 8002e80:	bf08      	it	eq
 8002e82:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002e86:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	53ba      	strh	r2, [r7, r6]
 8002e8e:	e6e1      	b.n	8002c54 <USB_EPStartXfer+0x264>
 8002e90:	2801      	cmp	r0, #1
 8002e92:	f47f aedf 	bne.w	8002c54 <USB_EPStartXfer+0x264>
 8002e96:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e9a:	7820      	ldrb	r0, [r4, #0]
 8002e9c:	b296      	uxth	r6, r2
 8002e9e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002ea2:	0100      	lsls	r0, r0, #4
 8002ea4:	4432      	add	r2, r6
 8002ea6:	5283      	strh	r3, [r0, r2]
 8002ea8:	e6d4      	b.n	8002c54 <USB_EPStartXfer+0x264>
    if (ep->doublebuffer == 0U)
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d13b      	bne.n	8002f26 <USB_EPStartXfer+0x536>
      if (ep->xfer_len > ep->maxpacket)
 8002eae:	69a3      	ldr	r3, [r4, #24]
 8002eb0:	6921      	ldr	r1, [r4, #16]
 8002eb2:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002eb4:	bf84      	itt	hi
 8002eb6:	1a5a      	subhi	r2, r3, r1
 8002eb8:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002eba:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002ebe:	7820      	ldrb	r0, [r4, #0]
 8002ec0:	61a2      	str	r2, [r4, #24]
 8002ec2:	b28a      	uxth	r2, r1
 8002ec4:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8002ec8:	0100      	lsls	r0, r0, #4
 8002eca:	4411      	add	r1, r2
 8002ecc:	b96b      	cbnz	r3, 8002eea <USB_EPStartXfer+0x4fa>
 8002ece:	5a43      	ldrh	r3, [r0, r1]
 8002ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	5243      	strh	r3, [r0, r1]
 8002eda:	5a43      	ldrh	r3, [r0, r1]
 8002edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	5243      	strh	r3, [r0, r1]
 8002ee8:	e008      	b.n	8002efc <USB_EPStartXfer+0x50c>
 8002eea:	2b3e      	cmp	r3, #62	; 0x3e
 8002eec:	d812      	bhi.n	8002f14 <USB_EPStartXfer+0x524>
 8002eee:	085a      	lsrs	r2, r3, #1
 8002ef0:	07df      	lsls	r7, r3, #31
 8002ef2:	bf48      	it	mi
 8002ef4:	3201      	addmi	r2, #1
 8002ef6:	0292      	lsls	r2, r2, #10
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002efc:	7822      	ldrb	r2, [r4, #0]
 8002efe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002f12:	e596      	b.n	8002a42 <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002f14:	095a      	lsrs	r2, r3, #5
 8002f16:	06de      	lsls	r6, r3, #27
 8002f18:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <USB_EPStartXfer+0x718>)
 8002f1a:	bf08      	it	eq
 8002f1c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002f20:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002f24:	e7de      	b.n	8002ee4 <USB_EPStartXfer+0x4f4>
      if (ep->type == EP_TYPE_BULK)
 8002f26:	78e3      	ldrb	r3, [r4, #3]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d17e      	bne.n	800302a <USB_EPStartXfer+0x63a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002f2c:	b9b9      	cbnz	r1, 8002f5e <USB_EPStartXfer+0x56e>
 8002f2e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f32:	7821      	ldrb	r1, [r4, #0]
 8002f34:	b293      	uxth	r3, r2
 8002f36:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002f3a:	6920      	ldr	r0, [r4, #16]
 8002f3c:	0109      	lsls	r1, r1, #4
 8002f3e:	441a      	add	r2, r3
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d144      	bne.n	8002fce <USB_EPStartXfer+0x5de>
 8002f44:	5a8b      	ldrh	r3, [r1, r2]
 8002f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	528b      	strh	r3, [r1, r2]
 8002f50:	5a8b      	ldrh	r3, [r1, r2]
 8002f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	528b      	strh	r3, [r1, r2]
 8002f5e:	7862      	ldrb	r2, [r4, #1]
 8002f60:	7823      	ldrb	r3, [r4, #0]
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d155      	bne.n	8003012 <USB_EPStartXfer+0x622>
 8002f66:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002f6a:	6920      	ldr	r0, [r4, #16]
 8002f6c:	b28a      	uxth	r2, r1
 8002f6e:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8002f72:	4411      	add	r1, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d13a      	bne.n	8002ff0 <USB_EPStartXfer+0x600>
 8002f7a:	5aca      	ldrh	r2, [r1, r3]
 8002f7c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f80:	0412      	lsls	r2, r2, #16
 8002f82:	0c12      	lsrs	r2, r2, #16
 8002f84:	52ca      	strh	r2, [r1, r3]
 8002f86:	5aca      	ldrh	r2, [r1, r3]
 8002f88:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002f8c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002f90:	b292      	uxth	r2, r2
 8002f92:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8002f94:	69e3      	ldr	r3, [r4, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0b0      	beq.n	8002efc <USB_EPStartXfer+0x50c>
 8002f9a:	f244 0340 	movw	r3, #16448	; 0x4040
 8002f9e:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002fa0:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002fa4:	ea03 0001 	and.w	r0, r3, r1
 8002fa8:	438b      	bics	r3, r1
 8002faa:	d001      	beq.n	8002fb0 <USB_EPStartXfer+0x5c0>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d1a5      	bne.n	8002efc <USB_EPStartXfer+0x50c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002fb0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fc8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002fcc:	e796      	b.n	8002efc <USB_EPStartXfer+0x50c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002fce:	283e      	cmp	r0, #62	; 0x3e
 8002fd0:	d805      	bhi.n	8002fde <USB_EPStartXfer+0x5ee>
 8002fd2:	0843      	lsrs	r3, r0, #1
 8002fd4:	07c0      	lsls	r0, r0, #31
 8002fd6:	bf48      	it	mi
 8002fd8:	3301      	addmi	r3, #1
 8002fda:	029b      	lsls	r3, r3, #10
 8002fdc:	e7bd      	b.n	8002f5a <USB_EPStartXfer+0x56a>
 8002fde:	0946      	lsrs	r6, r0, #5
 8002fe0:	4b49      	ldr	r3, [pc, #292]	; (8003108 <USB_EPStartXfer+0x718>)
 8002fe2:	06c7      	lsls	r7, r0, #27
 8002fe4:	bf08      	it	eq
 8002fe6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002fea:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002fee:	e7b4      	b.n	8002f5a <USB_EPStartXfer+0x56a>
 8002ff0:	283e      	cmp	r0, #62	; 0x3e
 8002ff2:	d805      	bhi.n	8003000 <USB_EPStartXfer+0x610>
 8002ff4:	0842      	lsrs	r2, r0, #1
 8002ff6:	07c0      	lsls	r0, r0, #31
 8002ff8:	bf48      	it	mi
 8002ffa:	3201      	addmi	r2, #1
 8002ffc:	0292      	lsls	r2, r2, #10
 8002ffe:	e7c7      	b.n	8002f90 <USB_EPStartXfer+0x5a0>
 8003000:	0946      	lsrs	r6, r0, #5
 8003002:	4a41      	ldr	r2, [pc, #260]	; (8003108 <USB_EPStartXfer+0x718>)
 8003004:	06c7      	lsls	r7, r0, #27
 8003006:	bf08      	it	eq
 8003008:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800300c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003010:	e7be      	b.n	8002f90 <USB_EPStartXfer+0x5a0>
 8003012:	2a01      	cmp	r2, #1
 8003014:	d1be      	bne.n	8002f94 <USB_EPStartXfer+0x5a4>
 8003016:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	b291      	uxth	r1, r2
 800301e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003022:	440a      	add	r2, r1
 8003024:	8a21      	ldrh	r1, [r4, #16]
 8003026:	52d1      	strh	r1, [r2, r3]
 8003028:	e7b4      	b.n	8002f94 <USB_EPStartXfer+0x5a4>
      else if (ep->type == EP_TYPE_ISOC)
 800302a:	2b01      	cmp	r3, #1
 800302c:	d16a      	bne.n	8003104 <USB_EPStartXfer+0x714>
        if (ep->xfer_len > ep->maxpacket)
 800302e:	69a3      	ldr	r3, [r4, #24]
 8003030:	6922      	ldr	r2, [r4, #16]
 8003032:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8003034:	bf94      	ite	ls
 8003036:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8003038:	1a98      	subhi	r0, r3, r2
 800303a:	61a0      	str	r0, [r4, #24]
 800303c:	bf88      	it	hi
 800303e:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003040:	b9a9      	cbnz	r1, 800306e <USB_EPStartXfer+0x67e>
 8003042:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003046:	7820      	ldrb	r0, [r4, #0]
 8003048:	b28a      	uxth	r2, r1
 800304a:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800304e:	0100      	lsls	r0, r0, #4
 8003050:	4411      	add	r1, r2
 8003052:	bb33      	cbnz	r3, 80030a2 <USB_EPStartXfer+0x6b2>
 8003054:	5a42      	ldrh	r2, [r0, r1]
 8003056:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800305a:	0412      	lsls	r2, r2, #16
 800305c:	0c12      	lsrs	r2, r2, #16
 800305e:	5242      	strh	r2, [r0, r1]
 8003060:	5a42      	ldrh	r2, [r0, r1]
 8003062:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003066:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800306a:	b292      	uxth	r2, r2
 800306c:	5242      	strh	r2, [r0, r1]
 800306e:	7861      	ldrb	r1, [r4, #1]
 8003070:	7822      	ldrb	r2, [r4, #0]
 8003072:	2900      	cmp	r1, #0
 8003074:	d139      	bne.n	80030ea <USB_EPStartXfer+0x6fa>
 8003076:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b281      	uxth	r1, r0
 800307e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003082:	4408      	add	r0, r1
 8003084:	b9f3      	cbnz	r3, 80030c4 <USB_EPStartXfer+0x6d4>
 8003086:	5a83      	ldrh	r3, [r0, r2]
 8003088:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	5283      	strh	r3, [r0, r2]
 8003092:	5a83      	ldrh	r3, [r0, r2]
 8003094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309c:	b29b      	uxth	r3, r3
 800309e:	5283      	strh	r3, [r0, r2]
 80030a0:	e72c      	b.n	8002efc <USB_EPStartXfer+0x50c>
 80030a2:	2b3e      	cmp	r3, #62	; 0x3e
 80030a4:	d805      	bhi.n	80030b2 <USB_EPStartXfer+0x6c2>
 80030a6:	085a      	lsrs	r2, r3, #1
 80030a8:	07de      	lsls	r6, r3, #31
 80030aa:	bf48      	it	mi
 80030ac:	3201      	addmi	r2, #1
 80030ae:	0292      	lsls	r2, r2, #10
 80030b0:	e7db      	b.n	800306a <USB_EPStartXfer+0x67a>
 80030b2:	095e      	lsrs	r6, r3, #5
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <USB_EPStartXfer+0x718>)
 80030b6:	06df      	lsls	r7, r3, #27
 80030b8:	bf08      	it	eq
 80030ba:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80030be:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80030c2:	e7d2      	b.n	800306a <USB_EPStartXfer+0x67a>
 80030c4:	2b3e      	cmp	r3, #62	; 0x3e
 80030c6:	d807      	bhi.n	80030d8 <USB_EPStartXfer+0x6e8>
 80030c8:	0859      	lsrs	r1, r3, #1
 80030ca:	07de      	lsls	r6, r3, #31
 80030cc:	bf48      	it	mi
 80030ce:	3101      	addmi	r1, #1
 80030d0:	0289      	lsls	r1, r1, #10
 80030d2:	b289      	uxth	r1, r1
 80030d4:	5281      	strh	r1, [r0, r2]
 80030d6:	e711      	b.n	8002efc <USB_EPStartXfer+0x50c>
 80030d8:	0959      	lsrs	r1, r3, #5
 80030da:	06db      	lsls	r3, r3, #27
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <USB_EPStartXfer+0x718>)
 80030de:	bf08      	it	eq
 80030e0:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80030e4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80030e8:	e7d8      	b.n	800309c <USB_EPStartXfer+0x6ac>
 80030ea:	2901      	cmp	r1, #1
 80030ec:	f47f af06 	bne.w	8002efc <USB_EPStartXfer+0x50c>
 80030f0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b288      	uxth	r0, r1
 80030f8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80030fc:	4401      	add	r1, r0
 80030fe:	b29b      	uxth	r3, r3
 8003100:	528b      	strh	r3, [r1, r2]
 8003102:	e6fb      	b.n	8002efc <USB_EPStartXfer+0x50c>
        return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
 8003106:	e4a3      	b.n	8002a50 <USB_EPStartXfer+0x60>
 8003108:	ffff8000 	.word	0xffff8000

0800310c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800310c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003116:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8003118:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800311a:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 800311c:	462e      	mov	r6, r5
 800311e:	3402      	adds	r4, #2
 8003120:	b936      	cbnz	r6, 8003130 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003122:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003124:	bf44      	itt	mi
 8003126:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800312a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003130:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8003134:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003136:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003138:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800313c:	0a00      	lsrs	r0, r0, #8
 800313e:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8003142:	e7ec      	b.n	800311e <USB_ReadPMA+0x12>

08003144 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003144:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003148:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800314a:	b16b      	cbz	r3, 8003168 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800314c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003150:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003154:	28ff      	cmp	r0, #255	; 0xff
 8003156:	d007      	beq.n	8003168 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4621      	mov	r1, r4
 800315c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003160:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003162:	23ff      	movs	r3, #255	; 0xff
 8003164:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003168:	2000      	movs	r0, #0
 800316a:	bd10      	pop	{r4, pc}

0800316c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800316c:	2343      	movs	r3, #67	; 0x43
 800316e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003170:	4800      	ldr	r0, [pc, #0]	; (8003174 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003172:	4770      	bx	lr
 8003174:	20000044 	.word	0x20000044

08003178 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003178:	2343      	movs	r3, #67	; 0x43
 800317a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800317c:	4800      	ldr	r0, [pc, #0]	; (8003180 <USBD_CDC_GetHSCfgDesc+0x8>)
 800317e:	4770      	bx	lr
 8003180:	20000088 	.word	0x20000088

08003184 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003184:	2343      	movs	r3, #67	; 0x43
 8003186:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003188:	4800      	ldr	r0, [pc, #0]	; (800318c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800318a:	4770      	bx	lr
 800318c:	200000d8 	.word	0x200000d8

08003190 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003190:	230a      	movs	r3, #10
 8003192:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003194:	4800      	ldr	r0, [pc, #0]	; (8003198 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003196:	4770      	bx	lr
 8003198:	200000cc 	.word	0x200000cc

0800319c <USBD_CDC_DataOut>:
{
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80031a0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80031a4:	f000 ff54 	bl	8004050 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80031a8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80031ac:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80031b0:	b14b      	cbz	r3, 80031c6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80031b2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80031b6:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80031c0:	4798      	blx	r3
    return USBD_OK;
 80031c2:	2000      	movs	r0, #0
}
 80031c4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80031c6:	2002      	movs	r0, #2
 80031c8:	e7fc      	b.n	80031c4 <USBD_CDC_DataOut+0x28>

080031ca <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80031ca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80031ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 80031d0:	b1d2      	cbz	r2, 8003208 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80031d2:	2714      	movs	r7, #20
 80031d4:	fb07 0701 	mla	r7, r7, r1, r0
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	b18b      	cbz	r3, 8003200 <USBD_CDC_DataIn+0x36>
 80031dc:	2628      	movs	r6, #40	; 0x28
 80031de:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80031e2:	fb06 4501 	mla	r5, r6, r1, r4
 80031e6:	6bad      	ldr	r5, [r5, #56]	; 0x38
 80031e8:	fbb3 f4f5 	udiv	r4, r3, r5
 80031ec:	fb05 3414 	mls	r4, r5, r4, r3
 80031f0:	b934      	cbnz	r4, 8003200 <USBD_CDC_DataIn+0x36>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80031f2:	4623      	mov	r3, r4
 80031f4:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 80031f6:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80031f8:	f000 ff0e 	bl	8004018 <USBD_LL_Transmit>
    return USBD_OK;
 80031fc:	4620      	mov	r0, r4
}
 80031fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003200:	2000      	movs	r0, #0
 8003202:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8003206:	e7fa      	b.n	80031fe <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8003208:	2002      	movs	r0, #2
 800320a:	e7f8      	b.n	80031fe <USBD_CDC_DataIn+0x34>

0800320c <USBD_CDC_Setup>:
{
 800320c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003210:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003214:	780a      	ldrb	r2, [r1, #0]
{
 8003216:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003218:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800321c:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800321e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003222:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003226:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800322a:	d028      	beq.n	800327e <USBD_CDC_Setup+0x72>
 800322c:	2c20      	cmp	r4, #32
 800322e:	d142      	bne.n	80032b6 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8003230:	88cc      	ldrh	r4, [r1, #6]
 8003232:	784b      	ldrb	r3, [r1, #1]
 8003234:	b1e4      	cbz	r4, 8003270 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003236:	0612      	lsls	r2, r2, #24
 8003238:	d511      	bpl.n	800325e <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800323a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800323e:	4639      	mov	r1, r7
 8003240:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	4622      	mov	r2, r4
 8003248:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800324a:	4639      	mov	r1, r7
 800324c:	4628      	mov	r0, r5
 800324e:	88f2      	ldrh	r2, [r6, #6]
 8003250:	f000 fc5d 	bl	8003b0e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003254:	4644      	mov	r4, r8
}
 8003256:	4620      	mov	r0, r4
 8003258:	b003      	add	sp, #12
 800325a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800325e:	4622      	mov	r2, r4
 8003260:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8003262:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003266:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800326a:	f000 fc65 	bl	8003b38 <USBD_CtlPrepareRx>
 800326e:	e7f1      	b.n	8003254 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003270:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003274:	4618      	mov	r0, r3
 8003276:	6895      	ldr	r5, [r2, #8]
 8003278:	4622      	mov	r2, r4
 800327a:	47a8      	blx	r5
 800327c:	e7eb      	b.n	8003256 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800327e:	784b      	ldrb	r3, [r1, #1]
 8003280:	2b0a      	cmp	r3, #10
 8003282:	d00c      	beq.n	800329e <USBD_CDC_Setup+0x92>
 8003284:	2b0b      	cmp	r3, #11
 8003286:	d012      	beq.n	80032ae <USBD_CDC_Setup+0xa2>
 8003288:	b9ab      	cbnz	r3, 80032b6 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800328a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800328e:	2b03      	cmp	r3, #3
 8003290:	d111      	bne.n	80032b6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003292:	2202      	movs	r2, #2
 8003294:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003298:	f000 fc39 	bl	8003b0e <USBD_CtlSendData>
 800329c:	e7db      	b.n	8003256 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800329e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d107      	bne.n	80032b6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80032a6:	2201      	movs	r2, #1
 80032a8:	f10d 0105 	add.w	r1, sp, #5
 80032ac:	e7f4      	b.n	8003298 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80032ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d0cf      	beq.n	8003256 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80032b6:	4631      	mov	r1, r6
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 fc01 	bl	8003ac0 <USBD_CtlError>
          ret = USBD_FAIL;
 80032be:	2402      	movs	r4, #2
          break;
 80032c0:	e7c9      	b.n	8003256 <USBD_CDC_Setup+0x4a>

080032c2 <USBD_CDC_DeInit>:
{
 80032c2:	b538      	push	{r3, r4, r5, lr}
 80032c4:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80032c6:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80032c8:	2181      	movs	r1, #129	; 0x81
 80032ca:	f000 fe5b 	bl	8003f84 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80032ce:	2101      	movs	r1, #1
 80032d0:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80032d2:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80032d4:	f000 fe56 	bl	8003f84 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80032d8:	2182      	movs	r1, #130	; 0x82
 80032da:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80032dc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80032e0:	f000 fe50 	bl	8003f84 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80032e4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80032e8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80032ea:	b14b      	cbz	r3, 8003300 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80032ec:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80032f4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80032f8:	f000 feb2 	bl	8004060 <USBD_static_free>
    pdev->pClassData = NULL;
 80032fc:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003300:	2000      	movs	r0, #0
 8003302:	bd38      	pop	{r3, r4, r5, pc}

08003304 <USBD_CDC_Init>:
{
 8003304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003308:	7c03      	ldrb	r3, [r0, #16]
{
 800330a:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800330c:	bbbb      	cbnz	r3, 800337e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800330e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003312:	2202      	movs	r2, #2
 8003314:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003316:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003318:	f000 fe24 	bl	8003f64 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800331c:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003320:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003322:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003324:	4629      	mov	r1, r5
 8003326:	2202      	movs	r2, #2
 8003328:	4620      	mov	r0, r4
 800332a:	f000 fe1b 	bl	8003f64 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800332e:	2308      	movs	r3, #8
 8003330:	2203      	movs	r2, #3
 8003332:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003334:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003338:	4620      	mov	r0, r4
 800333a:	f000 fe13 	bl	8003f64 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800333e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003342:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003344:	f000 fe88 	bl	8004058 <USBD_static_malloc>
 8003348:	4605      	mov	r5, r0
 800334a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800334e:	b340      	cbz	r0, 80033a2 <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8003350:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003354:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800335c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003360:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003364:	7c26      	ldrb	r6, [r4, #16]
 8003366:	b99e      	cbnz	r6, 8003390 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336c:	4639      	mov	r1, r7
 800336e:	4620      	mov	r0, r4
 8003370:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003374:	f000 fe5e 	bl	8004034 <USBD_LL_PrepareReceive>
}
 8003378:	4630      	mov	r0, r6
 800337a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800337e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003380:	2340      	movs	r3, #64	; 0x40
 8003382:	2202      	movs	r2, #2
 8003384:	2181      	movs	r1, #129	; 0x81
 8003386:	f000 fded 	bl	8003f64 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800338a:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800338c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800338e:	e7c8      	b.n	8003322 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003390:	2340      	movs	r3, #64	; 0x40
 8003392:	4639      	mov	r1, r7
 8003394:	4620      	mov	r0, r4
 8003396:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800339a:	f000 fe4b 	bl	8004034 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800339e:	4646      	mov	r6, r8
 80033a0:	e7ea      	b.n	8003378 <USBD_CDC_Init+0x74>
    ret = 1U;
 80033a2:	463e      	mov	r6, r7
 80033a4:	e7e8      	b.n	8003378 <USBD_CDC_Init+0x74>

080033a6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80033a6:	b119      	cbz	r1, 80033b0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80033a8:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80033ac:	2000      	movs	r0, #0
 80033ae:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80033b0:	2002      	movs	r0, #2
  }

  return ret;
}
 80033b2:	4770      	bx	lr

080033b4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80033b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80033b8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80033ba:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80033be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80033c2:	4770      	bx	lr

080033c4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80033c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80033c8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80033ca:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80033ce:	4770      	bx	lr

080033d0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80033d0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80033d4:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80033d6:	b182      	cbz	r2, 80033fa <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80033d8:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80033dc:	2301      	movs	r3, #1
 80033de:	b974      	cbnz	r4, 80033fe <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80033e0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80033e4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80033e8:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80033ea:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80033ec:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f000 fe11 	bl	8004018 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80033f6:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80033f8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80033fa:	2002      	movs	r0, #2
 80033fc:	e7fc      	b.n	80033f8 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80033fe:	4618      	mov	r0, r3
 8003400:	e7fa      	b.n	80033f8 <USBD_CDC_TransmitPacket+0x28>

08003402 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003402:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003406:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003408:	b182      	cbz	r2, 800342c <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800340a:	7c04      	ldrb	r4, [r0, #16]
 800340c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003410:	b934      	cbnz	r4, 8003420 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003416:	2101      	movs	r1, #1
 8003418:	f000 fe0c 	bl	8004034 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800341c:	4620      	mov	r0, r4
 800341e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003420:	2340      	movs	r3, #64	; 0x40
 8003422:	2101      	movs	r1, #1
 8003424:	f000 fe06 	bl	8004034 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003428:	2400      	movs	r4, #0
 800342a:	e7f7      	b.n	800341c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800342c:	2402      	movs	r4, #2
 800342e:	e7f5      	b.n	800341c <USBD_CDC_ReceivePacket+0x1a>

08003430 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003430:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003432:	b180      	cbz	r0, 8003456 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003434:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003438:	b113      	cbz	r3, 8003440 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003440:	b109      	cbz	r1, 8003446 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003442:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003446:	2301      	movs	r3, #1
  pdev->id = id;
 8003448:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800344a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800344e:	f000 fd1d 	bl	8003e8c <USBD_LL_Init>

  return USBD_OK;
 8003452:	2000      	movs	r0, #0
}
 8003454:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003456:	2002      	movs	r0, #2
 8003458:	e7fc      	b.n	8003454 <USBD_Init+0x24>

0800345a <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800345a:	2301      	movs	r3, #1
{
 800345c:	b510      	push	{r4, lr}
 800345e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003460:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003464:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003468:	7901      	ldrb	r1, [r0, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 800346e:	4620      	mov	r0, r4
 8003470:	f000 fd6a 	bl	8003f48 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8003474:	4620      	mov	r0, r4
 8003476:	f000 fd4b 	bl	8003f10 <USBD_LL_DeInit>

  return USBD_OK;
}
 800347a:	2000      	movs	r0, #0
 800347c:	bd10      	pop	{r4, pc}

0800347e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800347e:	b119      	cbz	r1, 8003488 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003480:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003484:	2000      	movs	r0, #0
 8003486:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003488:	2002      	movs	r0, #2
  }

  return status;
}
 800348a:	4770      	bx	lr

0800348c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800348c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800348e:	f000 fd4d 	bl	8003f2c <USBD_LL_Start>

  return USBD_OK;
}
 8003492:	2000      	movs	r0, #0
 8003494:	bd08      	pop	{r3, pc}

08003496 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003496:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003498:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800349c:	b90b      	cbnz	r3, 80034a2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800349e:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80034a0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4798      	blx	r3
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d0fa      	beq.n	80034a0 <USBD_SetClassConfig+0xa>
 80034aa:	e7f8      	b.n	800349e <USBD_SetClassConfig+0x8>

080034ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80034ac:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80034ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4798      	blx	r3

  return USBD_OK;
}
 80034b6:	2000      	movs	r0, #0
 80034b8:	bd08      	pop	{r3, pc}

080034ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80034ba:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80034bc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80034c0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 fae8 	bl	8003a98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80034c8:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80034ca:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80034ce:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80034d2:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80034d6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80034da:	f001 031f 	and.w	r3, r1, #31
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d008      	beq.n	80034f4 <USBD_LL_SetupStage+0x3a>
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d00b      	beq.n	80034fe <USBD_LL_SetupStage+0x44>
 80034e6:	b97b      	cbnz	r3, 8003508 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80034e8:	4629      	mov	r1, r5
 80034ea:	4620      	mov	r0, r4
 80034ec:	f000 f8fc 	bl	80036e8 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80034f4:	4629      	mov	r1, r5
 80034f6:	4620      	mov	r0, r4
 80034f8:	f000 fa20 	bl	800393c <USBD_StdItfReq>
      break;
 80034fc:	e7f8      	b.n	80034f0 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80034fe:	4629      	mov	r1, r5
 8003500:	4620      	mov	r0, r4
 8003502:	f000 fa3f 	bl	8003984 <USBD_StdEPReq>
      break;
 8003506:	e7f3      	b.n	80034f0 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003508:	4620      	mov	r0, r4
 800350a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800350e:	f000 fd47 	bl	8003fa0 <USBD_LL_StallEP>
      break;
 8003512:	e7ed      	b.n	80034f0 <USBD_LL_SetupStage+0x36>

08003514 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4604      	mov	r4, r0
 8003518:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800351a:	460d      	mov	r5, r1
 800351c:	bb39      	cbnz	r1, 800356e <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800351e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003522:	2b03      	cmp	r3, #3
 8003524:	d11c      	bne.n	8003560 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003526:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 800352a:	4291      	cmp	r1, r2
 800352c:	d90b      	bls.n	8003546 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800352e:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003530:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8003532:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003536:	bf8c      	ite	hi
 8003538:	b28a      	uxthhi	r2, r1
 800353a:	b292      	uxthls	r2, r2
 800353c:	4631      	mov	r1, r6
 800353e:	f000 fb08 	bl	8003b52 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003546:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	b123      	cbz	r3, 8003558 <USBD_LL_DataOutStage+0x44>
 800354e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003552:	2a03      	cmp	r2, #3
 8003554:	d100      	bne.n	8003558 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8003556:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003558:	4620      	mov	r0, r4
 800355a:	f000 fb02 	bl	8003b62 <USBD_CtlSendStatus>
 800355e:	e7f0      	b.n	8003542 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003560:	2b05      	cmp	r3, #5
 8003562:	d1ee      	bne.n	8003542 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003564:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003568:	f000 fd1a 	bl	8003fa0 <USBD_LL_StallEP>
 800356c:	e7e9      	b.n	8003542 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800356e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	b133      	cbz	r3, 8003584 <USBD_LL_DataOutStage+0x70>
 8003576:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800357a:	2a03      	cmp	r2, #3
 800357c:	d102      	bne.n	8003584 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800357e:	4798      	blx	r3
  return USBD_OK;
 8003580:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003582:	e7de      	b.n	8003542 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8003584:	2502      	movs	r5, #2
 8003586:	e7dc      	b.n	8003542 <USBD_LL_DataOutStage+0x2e>

08003588 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	4604      	mov	r4, r0
 800358c:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800358e:	460d      	mov	r5, r1
 8003590:	2900      	cmp	r1, #0
 8003592:	d147      	bne.n	8003624 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003594:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003598:	2b02      	cmp	r3, #2
 800359a:	d13c      	bne.n	8003616 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800359c:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80035a0:	429e      	cmp	r6, r3
 80035a2:	d914      	bls.n	80035ce <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80035a4:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80035a6:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80035a8:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	f000 fabc 	bl	8003b28 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80035b0:	462b      	mov	r3, r5
 80035b2:	462a      	mov	r2, r5
 80035b4:	4629      	mov	r1, r5
 80035b6:	4620      	mov	r0, r4
 80035b8:	f000 fd3c 	bl	8004034 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80035bc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80035ca:	4628      	mov	r0, r5
 80035cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80035ce:	69c2      	ldr	r2, [r0, #28]
 80035d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80035d4:	fb03 2616 	mls	r6, r3, r6, r2
 80035d8:	b95e      	cbnz	r6, 80035f2 <USBD_LL_DataInStage+0x6a>
 80035da:	4293      	cmp	r3, r2
 80035dc:	d809      	bhi.n	80035f2 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80035de:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d205      	bcs.n	80035f2 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80035e6:	460a      	mov	r2, r1
 80035e8:	f000 fa9e 	bl	8003b28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80035ec:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80035f0:	e7de      	b.n	80035b0 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80035f2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	b12b      	cbz	r3, 8003606 <USBD_LL_DataInStage+0x7e>
 80035fa:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80035fe:	2a03      	cmp	r2, #3
 8003600:	d101      	bne.n	8003606 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003602:	4620      	mov	r0, r4
 8003604:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	4620      	mov	r0, r4
 800360a:	f000 fcc9 	bl	8003fa0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800360e:	4620      	mov	r0, r4
 8003610:	f000 fab2 	bl	8003b78 <USBD_CtlReceiveStatus>
 8003614:	e7d2      	b.n	80035bc <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003616:	f033 0304 	bics.w	r3, r3, #4
 800361a:	d1cf      	bne.n	80035bc <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	f000 fcbf 	bl	8003fa0 <USBD_LL_StallEP>
 8003622:	e7cb      	b.n	80035bc <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003624:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	b133      	cbz	r3, 800363a <USBD_LL_DataInStage+0xb2>
 800362c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003630:	2a03      	cmp	r2, #3
 8003632:	d102      	bne.n	800363a <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003634:	4798      	blx	r3
  return USBD_OK;
 8003636:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003638:	e7c7      	b.n	80035ca <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800363a:	2502      	movs	r5, #2
 800363c:	e7c5      	b.n	80035ca <USBD_LL_DataInStage+0x42>

0800363e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800363e:	2200      	movs	r2, #0
{
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003644:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003646:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003648:	4611      	mov	r1, r2
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	f000 fc8a 	bl	8003f64 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003650:	4633      	mov	r3, r6
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	2200      	movs	r2, #0
 8003656:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003658:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800365c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003660:	f000 fc80 	bl	8003f64 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003664:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003666:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800366a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800366c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800366e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003672:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003676:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003678:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800367c:	b123      	cbz	r3, 8003688 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800367e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003682:	4620      	mov	r0, r4
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003688:	2000      	movs	r0, #0
 800368a:	bd70      	pop	{r4, r5, r6, pc}

0800368c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800368c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800368e:	2000      	movs	r0, #0
 8003690:	4770      	bx	lr

08003692 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003692:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003696:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800369a:	2304      	movs	r3, #4
 800369c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80036a0:	2000      	movs	r0, #0
 80036a2:	4770      	bx	lr

080036a4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80036a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80036a8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80036aa:	bf04      	itt	eq
 80036ac:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80036b0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80036b4:	2000      	movs	r0, #0
 80036b6:	4770      	bx	lr

080036b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80036b8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036ba:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80036be:	2a03      	cmp	r2, #3
 80036c0:	d104      	bne.n	80036cc <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80036c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	b103      	cbz	r3, 80036cc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80036ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80036cc:	2000      	movs	r0, #0
 80036ce:	bd08      	pop	{r3, pc}

080036d0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	f000 fc63 	bl	8003fa0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80036da:	4620      	mov	r0, r4
}
 80036dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80036e0:	2100      	movs	r1, #0
 80036e2:	f000 bc5d 	b.w	8003fa0 <USBD_LL_StallEP>
	...

080036e8 <USBD_StdDevReq>:
{
 80036e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ea:	780b      	ldrb	r3, [r1, #0]
 80036ec:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80036f2:	2b20      	cmp	r3, #32
{
 80036f4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036f6:	d012      	beq.n	800371e <USBD_StdDevReq+0x36>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d010      	beq.n	800371e <USBD_StdDevReq+0x36>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d151      	bne.n	80037a4 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8003700:	784b      	ldrb	r3, [r1, #1]
 8003702:	2b09      	cmp	r3, #9
 8003704:	d84e      	bhi.n	80037a4 <USBD_StdDevReq+0xbc>
 8003706:	e8df f013 	tbh	[pc, r3, lsl #1]
 800370a:	00ee      	.short	0x00ee
 800370c:	004d010a 	.word	0x004d010a
 8003710:	004d0103 	.word	0x004d0103
 8003714:	00130087 	.word	0x00130087
 8003718:	00d6004d 	.word	0x00d6004d
 800371c:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800371e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003722:	4629      	mov	r1, r5
 8003724:	4620      	mov	r0, r4
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4798      	blx	r3
}
 800372a:	2000      	movs	r0, #0
 800372c:	b003      	add	sp, #12
 800372e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003736:	884b      	ldrh	r3, [r1, #2]
 8003738:	0a1a      	lsrs	r2, r3, #8
 800373a:	3a01      	subs	r2, #1
 800373c:	2a06      	cmp	r2, #6
 800373e:	d831      	bhi.n	80037a4 <USBD_StdDevReq+0xbc>
 8003740:	e8df f002 	tbb	[pc, r2]
 8003744:	30231604 	.word	0x30231604
 8003748:	4830      	.short	0x4830
 800374a:	52          	.byte	0x52
 800374b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800374c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003750:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003752:	7c20      	ldrb	r0, [r4, #16]
 8003754:	f10d 0106 	add.w	r1, sp, #6
 8003758:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800375a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800375e:	2a00      	cmp	r2, #0
 8003760:	d056      	beq.n	8003810 <USBD_StdDevReq+0x128>
 8003762:	88eb      	ldrh	r3, [r5, #6]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d14a      	bne.n	80037fe <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8003768:	4620      	mov	r0, r4
 800376a:	f000 f9fa 	bl	8003b62 <USBD_CtlSendStatus>
 800376e:	e7dc      	b.n	800372a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003770:	7c02      	ldrb	r2, [r0, #16]
 8003772:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003776:	b932      	cbnz	r2, 8003786 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800377a:	f10d 0006 	add.w	r0, sp, #6
 800377e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003780:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003782:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003784:	e7e9      	b.n	800375a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	e7f7      	b.n	800377a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b05      	cmp	r3, #5
 800378e:	d809      	bhi.n	80037a4 <USBD_StdDevReq+0xbc>
 8003790:	e8df f003 	tbb	[pc, r3]
 8003794:	14100c03 	.word	0x14100c03
 8003798:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800379a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800379e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1d6      	bne.n	8003752 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ff93 	bl	80036d0 <USBD_CtlError.constprop.0>
        break;
 80037aa:	e7be      	b.n	800372a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80037ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	e7f5      	b.n	80037a0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80037b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	e7f1      	b.n	80037a0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80037bc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	e7ed      	b.n	80037a0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80037c4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	e7e9      	b.n	80037a0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80037cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	e7e5      	b.n	80037a0 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80037d4:	7c03      	ldrb	r3, [r0, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e4      	bne.n	80037a4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80037da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80037de:	f10d 0006 	add.w	r0, sp, #6
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	4798      	blx	r3
  if (err != 0U)
 80037e6:	e7b8      	b.n	800375a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80037e8:	7c03      	ldrb	r3, [r0, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1da      	bne.n	80037a4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80037ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80037f2:	f10d 0006 	add.w	r0, sp, #6
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80037fa:	2307      	movs	r3, #7
 80037fc:	e7c1      	b.n	8003782 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 80037fe:	429a      	cmp	r2, r3
 8003800:	bf28      	it	cs
 8003802:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003804:	4601      	mov	r1, r0
 8003806:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003808:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800380c:	f000 f97f 	bl	8003b0e <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003810:	88eb      	ldrh	r3, [r5, #6]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d189      	bne.n	800372a <USBD_StdDevReq+0x42>
 8003816:	e7a7      	b.n	8003768 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003818:	888b      	ldrh	r3, [r1, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1c2      	bne.n	80037a4 <USBD_StdDevReq+0xbc>
 800381e:	88cb      	ldrh	r3, [r1, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1bf      	bne.n	80037a4 <USBD_StdDevReq+0xbc>
 8003824:	884d      	ldrh	r5, [r1, #2]
 8003826:	2d7f      	cmp	r5, #127	; 0x7f
 8003828:	d8bc      	bhi.n	80037a4 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800382a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800382e:	2b03      	cmp	r3, #3
 8003830:	d0b8      	beq.n	80037a4 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003832:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003834:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003838:	f000 fbe0 	bl	8003ffc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800383c:	4620      	mov	r0, r4
 800383e:	f000 f990 	bl	8003b62 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003842:	b11d      	cbz	r5, 800384c <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003844:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003846:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800384a:	e76e      	b.n	800372a <USBD_StdDevReq+0x42>
 800384c:	2301      	movs	r3, #1
 800384e:	e7fa      	b.n	8003846 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8003850:	7889      	ldrb	r1, [r1, #2]
 8003852:	4d39      	ldr	r5, [pc, #228]	; (8003938 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003854:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003856:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003858:	d8a4      	bhi.n	80037a4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800385a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800385e:	2b02      	cmp	r3, #2
 8003860:	d008      	beq.n	8003874 <USBD_StdDevReq+0x18c>
 8003862:	2b03      	cmp	r3, #3
 8003864:	d015      	beq.n	8003892 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8003866:	f7ff ff33 	bl	80036d0 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800386a:	4620      	mov	r0, r4
 800386c:	7829      	ldrb	r1, [r5, #0]
 800386e:	f7ff fe1d 	bl	80034ac <USBD_ClrClassConfig>
        break;
 8003872:	e75a      	b.n	800372a <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003874:	2900      	cmp	r1, #0
 8003876:	f43f af77 	beq.w	8003768 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800387a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800387c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800387e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003880:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff fe06 	bl	8003496 <USBD_SetClassConfig>
 800388a:	2802      	cmp	r0, #2
 800388c:	f47f af6c 	bne.w	8003768 <USBD_StdDevReq+0x80>
 8003890:	e788      	b.n	80037a4 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8003892:	b931      	cbnz	r1, 80038a2 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003894:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003896:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003898:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800389c:	f7ff fe06 	bl	80034ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80038a0:	e762      	b.n	8003768 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80038a2:	6841      	ldr	r1, [r0, #4]
 80038a4:	2901      	cmp	r1, #1
 80038a6:	f43f af5f 	beq.w	8003768 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80038aa:	b2c9      	uxtb	r1, r1
 80038ac:	f7ff fdfe 	bl	80034ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80038b0:	7829      	ldrb	r1, [r5, #0]
 80038b2:	6061      	str	r1, [r4, #4]
 80038b4:	e7e6      	b.n	8003884 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80038b6:	88ca      	ldrh	r2, [r1, #6]
 80038b8:	2a01      	cmp	r2, #1
 80038ba:	f47f af73 	bne.w	80037a4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80038be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d80a      	bhi.n	80038dc <USBD_StdDevReq+0x1f4>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f43f af6c 	beq.w	80037a4 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80038cc:	4601      	mov	r1, r0
 80038ce:	2300      	movs	r3, #0
 80038d0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 f91a 	bl	8003b0e <USBD_CtlSendData>
      break;
 80038da:	e726      	b.n	800372a <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80038dc:	2b03      	cmp	r3, #3
 80038de:	f47f af61 	bne.w	80037a4 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80038e2:	1d01      	adds	r1, r0, #4
 80038e4:	e7f6      	b.n	80038d4 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80038e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038ea:	3b01      	subs	r3, #1
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	f63f af59 	bhi.w	80037a4 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 80038f2:	88cb      	ldrh	r3, [r1, #6]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	f47f af55 	bne.w	80037a4 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80038fa:	2301      	movs	r3, #1
 80038fc:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80038fe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003902:	b10b      	cbz	r3, 8003908 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003904:	2303      	movs	r3, #3
 8003906:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003908:	2202      	movs	r2, #2
 800390a:	f104 010c 	add.w	r1, r4, #12
 800390e:	e7e1      	b.n	80038d4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003910:	884b      	ldrh	r3, [r1, #2]
 8003912:	2b01      	cmp	r3, #1
 8003914:	f47f af09 	bne.w	800372a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003918:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800391c:	e724      	b.n	8003768 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800391e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003922:	3b01      	subs	r3, #1
 8003924:	2b02      	cmp	r3, #2
 8003926:	f63f af3d 	bhi.w	80037a4 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800392a:	884b      	ldrh	r3, [r1, #2]
 800392c:	2b01      	cmp	r3, #1
 800392e:	f47f aefc 	bne.w	800372a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	e7f0      	b.n	8003918 <USBD_StdDevReq+0x230>
 8003936:	bf00      	nop
 8003938:	2000019c 	.word	0x2000019c

0800393c <USBD_StdItfReq>:
{
 800393c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800393e:	780b      	ldrb	r3, [r1, #0]
{
 8003940:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003942:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003946:	2a40      	cmp	r2, #64	; 0x40
{
 8003948:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800394a:	d001      	beq.n	8003950 <USBD_StdItfReq+0x14>
 800394c:	065b      	lsls	r3, r3, #25
 800394e:	d415      	bmi.n	800397c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8003950:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003954:	3b01      	subs	r3, #1
 8003956:	2b02      	cmp	r3, #2
 8003958:	d810      	bhi.n	800397c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800395a:	792b      	ldrb	r3, [r5, #4]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d80d      	bhi.n	800397c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003960:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003964:	4629      	mov	r1, r5
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4620      	mov	r0, r4
 800396a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800396c:	88eb      	ldrh	r3, [r5, #6]
 800396e:	b91b      	cbnz	r3, 8003978 <USBD_StdItfReq+0x3c>
 8003970:	b910      	cbnz	r0, 8003978 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8003972:	4620      	mov	r0, r4
 8003974:	f000 f8f5 	bl	8003b62 <USBD_CtlSendStatus>
}
 8003978:	2000      	movs	r0, #0
 800397a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800397c:	4620      	mov	r0, r4
 800397e:	f7ff fea7 	bl	80036d0 <USBD_CtlError.constprop.0>
          break;
 8003982:	e7f9      	b.n	8003978 <USBD_StdItfReq+0x3c>

08003984 <USBD_StdEPReq>:
{
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	780a      	ldrb	r2, [r1, #0]
 8003988:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800398a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800398e:	2a20      	cmp	r2, #32
{
 8003990:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003992:	d027      	beq.n	80039e4 <USBD_StdEPReq+0x60>
 8003994:	2a40      	cmp	r2, #64	; 0x40
 8003996:	d025      	beq.n	80039e4 <USBD_StdEPReq+0x60>
 8003998:	bb92      	cbnz	r2, 8003a00 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800399a:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800399c:	888d      	ldrh	r5, [r1, #4]
 800399e:	2a01      	cmp	r2, #1
 80039a0:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80039a2:	d03d      	beq.n	8003a20 <USBD_StdEPReq+0x9c>
 80039a4:	2a03      	cmp	r2, #3
 80039a6:	d025      	beq.n	80039f4 <USBD_StdEPReq+0x70>
 80039a8:	bb52      	cbnz	r2, 8003a00 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80039aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d04d      	beq.n	8003a4e <USBD_StdEPReq+0xca>
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d124      	bne.n	8003a00 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80039b6:	2214      	movs	r2, #20
 80039b8:	f001 030f 	and.w	r3, r1, #15
 80039bc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80039c0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80039c4:	d054      	beq.n	8003a70 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	b1d3      	cbz	r3, 8003a00 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80039ca:	2314      	movs	r3, #20
 80039cc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80039d0:	fb05 3303 	mla	r3, r5, r3, r3
 80039d4:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80039d6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80039da:	d155      	bne.n	8003a88 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 80039dc:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80039de:	2202      	movs	r2, #2
 80039e0:	4629      	mov	r1, r5
 80039e2:	e041      	b.n	8003a68 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 80039e4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4620      	mov	r0, r4
 80039ec:	6892      	ldr	r2, [r2, #8]
 80039ee:	4790      	blx	r2
}
 80039f0:	2000      	movs	r0, #0
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 80039f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80039f8:	2a02      	cmp	r2, #2
 80039fa:	d01f      	beq.n	8003a3c <USBD_StdEPReq+0xb8>
 80039fc:	2a03      	cmp	r2, #3
 80039fe:	d003      	beq.n	8003a08 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff fe65 	bl	80036d0 <USBD_CtlError.constprop.0>
              break;
 8003a06:	e7f3      	b.n	80039f0 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003a08:	885a      	ldrh	r2, [r3, #2]
 8003a0a:	b92a      	cbnz	r2, 8003a18 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8003a0c:	064a      	lsls	r2, r1, #25
 8003a0e:	d003      	beq.n	8003a18 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003a10:	88db      	ldrh	r3, [r3, #6]
 8003a12:	b90b      	cbnz	r3, 8003a18 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003a14:	f000 fac4 	bl	8003fa0 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f000 f8a2 	bl	8003b62 <USBD_CtlSendStatus>
              break;
 8003a1e:	e7e7      	b.n	80039f0 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8003a20:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003a24:	2a02      	cmp	r2, #2
 8003a26:	d009      	beq.n	8003a3c <USBD_StdEPReq+0xb8>
 8003a28:	2a03      	cmp	r2, #3
 8003a2a:	d1e9      	bne.n	8003a00 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003a2c:	885b      	ldrh	r3, [r3, #2]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1de      	bne.n	80039f0 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003a32:	064d      	lsls	r5, r1, #25
 8003a34:	d0f0      	beq.n	8003a18 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003a36:	f000 fac1 	bl	8003fbc <USBD_LL_ClearStallEP>
 8003a3a:	e7ed      	b.n	8003a18 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a3c:	064b      	lsls	r3, r1, #25
 8003a3e:	d0df      	beq.n	8003a00 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003a40:	f000 faae 	bl	8003fa0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 faaa 	bl	8003fa0 <USBD_LL_StallEP>
 8003a4c:	e7d0      	b.n	80039f0 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a4e:	064a      	lsls	r2, r1, #25
 8003a50:	d1d6      	bne.n	8003a00 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a52:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8003a54:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003a58:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a5c:	bf4c      	ite	mi
 8003a5e:	f100 0114 	addmi.w	r1, r0, #20
 8003a62:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8003a66:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 f850 	bl	8003b0e <USBD_CtlSendData>
              break;
 8003a6e:	e7bf      	b.n	80039f0 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003a70:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0c3      	beq.n	8003a00 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a78:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003a7a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a7e:	fb03 0505 	mla	r5, r3, r5, r0
 8003a82:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8003a86:	e7a6      	b.n	80039d6 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f000 faa5 	bl	8003fd8 <USBD_LL_IsStallEP>
 8003a8e:	b108      	cbz	r0, 8003a94 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e7a3      	b.n	80039dc <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8003a94:	6028      	str	r0, [r5, #0]
 8003a96:	e7a2      	b.n	80039de <USBD_StdEPReq+0x5a>

08003a98 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003a98:	780b      	ldrb	r3, [r1, #0]
 8003a9a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003a9c:	784b      	ldrb	r3, [r1, #1]
 8003a9e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003aa0:	78ca      	ldrb	r2, [r1, #3]
 8003aa2:	788b      	ldrb	r3, [r1, #2]
 8003aa4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003aa8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003aaa:	794a      	ldrb	r2, [r1, #5]
 8003aac:	790b      	ldrb	r3, [r1, #4]
 8003aae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ab2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003ab4:	79ca      	ldrb	r2, [r1, #7]
 8003ab6:	798b      	ldrb	r3, [r1, #6]
 8003ab8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003abc:	80c3      	strh	r3, [r0, #6]
}
 8003abe:	4770      	bx	lr

08003ac0 <USBD_CtlError>:
{
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	f000 fa6b 	bl	8003fa0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003aca:	4620      	mov	r0, r4
}
 8003acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f000 ba65 	b.w	8003fa0 <USBD_LL_StallEP>

08003ad6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003ad6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003ad8:	b188      	cbz	r0, 8003afe <USBD_GetString+0x28>
 8003ada:	2500      	movs	r5, #0
 8003adc:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003ade:	462b      	mov	r3, r5
 8003ae0:	3501      	adds	r5, #1
 8003ae2:	5d44      	ldrb	r4, [r0, r5]
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	d1fa      	bne.n	8003ade <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003af0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003af2:	2303      	movs	r3, #3
 8003af4:	704b      	strb	r3, [r1, #1]
 8003af6:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003af8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003afc:	b905      	cbnz	r5, 8003b00 <USBD_GetString+0x2a>
}
 8003afe:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	54cd      	strb	r5, [r1, r3]
 8003b04:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003b06:	3302      	adds	r3, #2
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	548c      	strb	r4, [r1, r2]
 8003b0c:	e7f4      	b.n	8003af8 <USBD_GetString+0x22>

08003b0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003b0e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003b10:	2202      	movs	r2, #2
{
 8003b12:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003b14:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003b18:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f000 fa7a 	bl	8004018 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b24:	2000      	movs	r0, #0
 8003b26:	bd10      	pop	{r4, pc}

08003b28 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003b28:	b508      	push	{r3, lr}
 8003b2a:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f000 fa72 	bl	8004018 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b34:	2000      	movs	r0, #0
 8003b36:	bd08      	pop	{r3, pc}

08003b38 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003b38:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003b3a:	2203      	movs	r2, #3
{
 8003b3c:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8003b3e:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003b42:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003b46:	460a      	mov	r2, r1
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f000 fa73 	bl	8004034 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b4e:	2000      	movs	r0, #0
 8003b50:	bd10      	pop	{r4, pc}

08003b52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003b52:	b508      	push	{r3, lr}
 8003b54:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003b56:	460a      	mov	r2, r1
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f000 fa6b 	bl	8004034 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b5e:	2000      	movs	r0, #0
 8003b60:	bd08      	pop	{r3, pc}

08003b62 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003b62:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003b64:	2304      	movs	r3, #4
 8003b66:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f000 fa52 	bl	8004018 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b74:	2000      	movs	r0, #0
 8003b76:	bd08      	pop	{r3, pc}

08003b78 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003b78:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003b80:	2300      	movs	r3, #0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	f000 fa55 	bl	8004034 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	bd08      	pop	{r3, pc}
	...

08003b90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003b90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003b92:	2200      	movs	r2, #0
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <MX_USB_DEVICE_Init+0x40>)
 8003b96:	480f      	ldr	r0, [pc, #60]	; (8003bd4 <MX_USB_DEVICE_Init+0x44>)
 8003b98:	f7ff fc4a 	bl	8003430 <USBD_Init>
 8003b9c:	b108      	cbz	r0, 8003ba2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003b9e:	f7fc fe39 	bl	8000814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003ba2:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <MX_USB_DEVICE_Init+0x48>)
 8003ba4:	480b      	ldr	r0, [pc, #44]	; (8003bd4 <MX_USB_DEVICE_Init+0x44>)
 8003ba6:	f7ff fc6a 	bl	800347e <USBD_RegisterClass>
 8003baa:	b108      	cbz	r0, 8003bb0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003bac:	f7fc fe32 	bl	8000814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003bb0:	490a      	ldr	r1, [pc, #40]	; (8003bdc <MX_USB_DEVICE_Init+0x4c>)
 8003bb2:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <MX_USB_DEVICE_Init+0x44>)
 8003bb4:	f7ff fbf7 	bl	80033a6 <USBD_CDC_RegisterInterface>
 8003bb8:	b108      	cbz	r0, 8003bbe <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8003bba:	f7fc fe2b 	bl	8000814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003bbe:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <MX_USB_DEVICE_Init+0x44>)
 8003bc0:	f7ff fc64 	bl	800348c <USBD_Start>
 8003bc4:	b118      	cbz	r0, 8003bce <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003bca:	f7fc be23 	b.w	8000814 <Error_Handler>
}
 8003bce:	bd08      	pop	{r3, pc}
 8003bd0:	2000012c 	.word	0x2000012c
 8003bd4:	200003f0 	.word	0x200003f0
 8003bd8:	2000000c 	.word	0x2000000c
 8003bdc:	2000011c 	.word	0x2000011c

08003be0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003be0:	2000      	movs	r0, #0
 8003be2:	4770      	bx	lr

08003be4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003be4:	2000      	movs	r0, #0
 8003be6:	4770      	bx	lr

08003be8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	460d      	mov	r5, r1
 8003bec:	4604      	mov	r4, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4816      	ldr	r0, [pc, #88]	; (8003c4c <CDC_Receive_FS+0x64>)
 8003bf2:	f7ff fbe7 	bl	80033c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003bf6:	4815      	ldr	r0, [pc, #84]	; (8003c4c <CDC_Receive_FS+0x64>)
 8003bf8:	f7ff fc03 	bl	8003402 <USBD_CDC_ReceivePacket>
  //my code begin
  HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_RESET);//LED ON
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c02:	4813      	ldr	r0, [pc, #76]	; (8003c50 <CDC_Receive_FS+0x68>)
 8003c04:	f7fd f9de 	bl	8000fc4 <HAL_GPIO_WritePin>
  uint16_t length = (uint16_t) *Len;
  if(length == 4 && flashLocked == Unlocked && flashStatus != Unerased)
 8003c08:	882b      	ldrh	r3, [r5, #0]
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d119      	bne.n	8003c42 <CDC_Receive_FS+0x5a>
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <CDC_Receive_FS+0x6c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b9b3      	cbnz	r3, 8003c42 <CDC_Receive_FS+0x5a>
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <CDC_Receive_FS+0x70>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b19b      	cbz	r3, 8003c42 <CDC_Receive_FS+0x5a>
  {
	uint32_t dataToFlash =  (Buf[3]<<24) +
							(Buf[2]<<16) +
 8003c1a:	78a3      	ldrb	r3, [r4, #2]
	uint32_t dataToFlash =  (Buf[3]<<24) +
 8003c1c:	78e0      	ldrb	r0, [r4, #3]
							(Buf[2]<<16) +
 8003c1e:	041b      	lsls	r3, r3, #16
	uint32_t dataToFlash =  (Buf[3]<<24) +
 8003c20:	eb03 6300 	add.w	r3, r3, r0, lsl #24
							(Buf[1]<<8) +
 8003c24:	7860      	ldrb	r0, [r4, #1]
							(Buf[2]<<16) +
 8003c26:	eb03 2300 	add.w	r3, r3, r0, lsl #8
							Buf[0];//32bit Word contains 4 Bytes
 8003c2a:	7820      	ldrb	r0, [r4, #0]
	flashWord(dataToFlash);
 8003c2c:	4418      	add	r0, r3
 8003c2e:	f7fc fae7 	bl	8000200 <flashWord>
  }
  else
  {
	messageHandler(Buf);
  }
  HAL_GPIO_WritePin(BootloaderLed_GPIO_Port, BootloaderLed_Pin, GPIO_PIN_SET);//LED OFF
 8003c32:	2201      	movs	r2, #1
 8003c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c38:	4805      	ldr	r0, [pc, #20]	; (8003c50 <CDC_Receive_FS+0x68>)
 8003c3a:	f7fd f9c3 	bl	8000fc4 <HAL_GPIO_WritePin>
  //my code end
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003c3e:	2000      	movs	r0, #0
 8003c40:	bd38      	pop	{r3, r4, r5, pc}
	messageHandler(Buf);
 8003c42:	4620      	mov	r0, r4
 8003c44:	f7fc fcee 	bl	8000624 <messageHandler>
 8003c48:	e7f3      	b.n	8003c32 <CDC_Receive_FS+0x4a>
 8003c4a:	bf00      	nop
 8003c4c:	200003f0 	.word	0x200003f0
 8003c50:	40011000 	.word	0x40011000
 8003c54:	200003c0 	.word	0x200003c0
 8003c58:	200003c1 	.word	0x200003c1

08003c5c <CDC_Init_FS>:
{
 8003c5c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003c5e:	4c06      	ldr	r4, [pc, #24]	; (8003c78 <CDC_Init_FS+0x1c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	4620      	mov	r0, r4
 8003c64:	4905      	ldr	r1, [pc, #20]	; (8003c7c <CDC_Init_FS+0x20>)
 8003c66:	f7ff fba5 	bl	80033b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4904      	ldr	r1, [pc, #16]	; (8003c80 <CDC_Init_FS+0x24>)
 8003c6e:	f7ff fba9 	bl	80033c4 <USBD_CDC_SetRxBuffer>
}
 8003c72:	2000      	movs	r0, #0
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	200003f0 	.word	0x200003f0
 8003c7c:	20000a9c 	.word	0x20000a9c
 8003c80:	200006b4 	.word	0x200006b4

08003c84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003c84:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003c86:	4c09      	ldr	r4, [pc, #36]	; (8003cac <CDC_Transmit_FS+0x28>)
{
 8003c88:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003c8a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8003c8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003c92:	b943      	cbnz	r3, 8003ca6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003c94:	4601      	mov	r1, r0
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff fb8c 	bl	80033b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003c9c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8003c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003ca2:	f7ff bb95 	b.w	80033d0 <USBD_CDC_TransmitPacket>
}
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	bf00      	nop
 8003cac:	200003f0 	.word	0x200003f0

08003cb0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003cb0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003cb2:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003cb4:	800b      	strh	r3, [r1, #0]
}
 8003cb6:	4770      	bx	lr
 8003cb8:	20000148 	.word	0x20000148

08003cbc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003cbc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003cbe:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003cc0:	800b      	strh	r3, [r1, #0]
}
 8003cc2:	4770      	bx	lr
 8003cc4:	2000015c 	.word	0x2000015c

08003cc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003cc8:	2300      	movs	r3, #0
 8003cca:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003ccc:	461e      	mov	r6, r3
 8003cce:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 8003cd0:	0f04      	lsrs	r4, r0, #28
 8003cd2:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003cd6:	bf34      	ite	cc
 8003cd8:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003cda:	3437      	addcs	r4, #55	; 0x37
 8003cdc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003ce0:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 8003ce4:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 8003ce6:	b2dc      	uxtb	r4, r3
 8003ce8:	42a2      	cmp	r2, r4
    value = value << 4;
 8003cea:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8003cee:	d8ef      	bhi.n	8003cd0 <IntToUnicode+0x8>
  }
}
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cf4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003cf4:	231a      	movs	r3, #26
{
 8003cf6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003cf8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <USBD_FS_SerialStrDescriptor+0x2c>)
 8003cfc:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003cfe:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003d00:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003d02:	18c0      	adds	r0, r0, r3
 8003d04:	d00a      	beq.n	8003d1c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003d08:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003d0a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003d0c:	4906      	ldr	r1, [pc, #24]	; (8003d28 <USBD_FS_SerialStrDescriptor+0x34>)
 8003d0e:	f7ff ffdb 	bl	8003cc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003d12:	2204      	movs	r2, #4
 8003d14:	4620      	mov	r0, r4
 8003d16:	4905      	ldr	r1, [pc, #20]	; (8003d2c <USBD_FS_SerialStrDescriptor+0x38>)
 8003d18:	f7ff ffd6 	bl	8003cc8 <IntToUnicode>
}
 8003d1c:	4804      	ldr	r0, [pc, #16]	; (8003d30 <USBD_FS_SerialStrDescriptor+0x3c>)
 8003d1e:	bd10      	pop	{r4, pc}
 8003d20:	1ffff7e8 	.word	0x1ffff7e8
 8003d24:	1ffff7ec 	.word	0x1ffff7ec
 8003d28:	20000162 	.word	0x20000162
 8003d2c:	20000172 	.word	0x20000172
 8003d30:	20000160 	.word	0x20000160

08003d34 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003d34:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003d36:	4c04      	ldr	r4, [pc, #16]	; (8003d48 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003d38:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003d3a:	4804      	ldr	r0, [pc, #16]	; (8003d4c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	f7ff feca 	bl	8003ad6 <USBD_GetString>
}
 8003d42:	4620      	mov	r0, r4
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	20000e84 	.word	0x20000e84
 8003d4c:	08004215 	.word	0x08004215

08003d50 <USBD_FS_ProductStrDescriptor>:
{
 8003d50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003d52:	4c04      	ldr	r4, [pc, #16]	; (8003d64 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003d54:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003d56:	4804      	ldr	r0, [pc, #16]	; (8003d68 <USBD_FS_ProductStrDescriptor+0x18>)
 8003d58:	4621      	mov	r1, r4
 8003d5a:	f7ff febc 	bl	8003ad6 <USBD_GetString>
}
 8003d5e:	4620      	mov	r0, r4
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	bf00      	nop
 8003d64:	20000e84 	.word	0x20000e84
 8003d68:	0800421f 	.word	0x0800421f

08003d6c <USBD_FS_ConfigStrDescriptor>:
{
 8003d6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003d6e:	4c04      	ldr	r4, [pc, #16]	; (8003d80 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003d70:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003d72:	4804      	ldr	r0, [pc, #16]	; (8003d84 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003d74:	4621      	mov	r1, r4
 8003d76:	f7ff feae 	bl	8003ad6 <USBD_GetString>
}
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000e84 	.word	0x20000e84
 8003d84:	08004234 	.word	0x08004234

08003d88 <USBD_FS_InterfaceStrDescriptor>:
{
 8003d88:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003d8a:	4c04      	ldr	r4, [pc, #16]	; (8003d9c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003d8c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003d8e:	4804      	ldr	r0, [pc, #16]	; (8003da0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003d90:	4621      	mov	r1, r4
 8003d92:	f7ff fea0 	bl	8003ad6 <USBD_GetString>
}
 8003d96:	4620      	mov	r0, r4
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000e84 	.word	0x20000e84
 8003da0:	0800423f 	.word	0x0800423f

08003da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003da4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_PCD_MspInit+0x3c>)
 8003da8:	6802      	ldr	r2, [r0, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d115      	bne.n	8003dda <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003dae:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003db2:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003db4:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003db6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dba:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003dbc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003dbe:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003dc0:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003dca:	f7fc fdfb 	bl	80009c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003dce:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003dd0:	b003      	add	sp, #12
 8003dd2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003dd6:	f7fc be27 	b.w	8000a28 <HAL_NVIC_EnableIRQ>
}
 8003dda:	b003      	add	sp, #12
 8003ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003de0:	40005c00 	.word	0x40005c00

08003de4 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8003de4:	6802      	ldr	r2, [r0, #0]
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_PCD_MspDeInit+0x1c>)
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d107      	bne.n	8003dfc <HAL_PCD_MspDeInit+0x18>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <HAL_PCD_MspDeInit+0x20>)

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003dee:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_DISABLE();
 8003df0:	69d3      	ldr	r3, [r2, #28]
 8003df2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003df6:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003df8:	f7fc be24 	b.w	8000a44 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40005c00 	.word	0x40005c00
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003e08:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8003e0c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003e10:	f7ff bb53 	b.w	80034ba <USBD_LL_SetupStage>

08003e14 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003e14:	2328      	movs	r3, #40	; 0x28
 8003e16:	fb03 0301 	mla	r3, r3, r1, r0
 8003e1a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003e1e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003e22:	f7ff bb77 	b.w	8003514 <USBD_LL_DataOutStage>

08003e26 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003e26:	2328      	movs	r3, #40	; 0x28
 8003e28:	fb03 0301 	mla	r3, r3, r1, r0
 8003e2c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e32:	f7ff bba9 	b.w	8003588 <USBD_LL_DataInStage>

08003e36 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003e36:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003e3a:	f7ff bc3d 	b.w	80036b8 <USBD_LL_SOF>

08003e3e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003e3e:	6883      	ldr	r3, [r0, #8]
{
 8003e40:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003e42:	2b02      	cmp	r3, #2
{
 8003e44:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003e46:	d001      	beq.n	8003e4c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003e48:	f7fc fce4 	bl	8000814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003e4c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8003e50:	2101      	movs	r1, #1
 8003e52:	f7ff fc1b 	bl	800368c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003e56:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8003e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003e5e:	f7ff bbee 	b.w	800363e <USBD_LL_Reset>
	...

08003e64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003e68:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003e6c:	f7ff fc11 	bl	8003692 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003e70:	69a3      	ldr	r3, [r4, #24]
 8003e72:	b123      	cbz	r3, 8003e7e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003e74:	4a02      	ldr	r2, [pc, #8]	; (8003e80 <HAL_PCD_SuspendCallback+0x1c>)
 8003e76:	6913      	ldr	r3, [r2, #16]
 8003e78:	f043 0306 	orr.w	r3, r3, #6
 8003e7c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003e7e:	bd10      	pop	{r4, pc}
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003e84:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003e88:	f7ff bc0c 	b.w	80036a4 <USBD_LL_Resume>

08003e8c <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003e8c:	2308      	movs	r3, #8
{
 8003e8e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <USBD_LL_Init+0x7c>)
{
 8003e92:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003e94:	481d      	ldr	r0, [pc, #116]	; (8003f0c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003e96:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003e9e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003ea0:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8003ea4:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003ea8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003eac:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003eae:	f7fd f88e 	bl	8000fce <HAL_PCD_Init>
 8003eb2:	b108      	cbz	r0, 8003eb8 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8003eb4:	f7fc fcae 	bl	8000814 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2318      	movs	r3, #24
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003ec2:	f7fd ff27 	bl	8001d14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003ec6:	2358      	movs	r3, #88	; 0x58
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003ed0:	f7fd ff20 	bl	8001d14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003ed4:	23c0      	movs	r3, #192	; 0xc0
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2181      	movs	r1, #129	; 0x81
 8003eda:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003ede:	f7fd ff19 	bl	8001d14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003ee2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2101      	movs	r1, #1
 8003eea:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003eee:	f7fd ff11 	bl	8001d14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2182      	movs	r1, #130	; 0x82
 8003efa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8003efe:	f7fd ff09 	bl	8001d14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8003f02:	2000      	movs	r0, #0
 8003f04:	bd10      	pop	{r4, pc}
 8003f06:	bf00      	nop
 8003f08:	40005c00 	.word	0x40005c00
 8003f0c:	20001084 	.word	0x20001084

08003f10 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8003f10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_DeInit(pdev->pData);
 8003f12:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003f16:	f7fd f8d3 	bl	80010c0 <HAL_PCD_DeInit>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003f1a:	2803      	cmp	r0, #3
 8003f1c:	bf96      	itet	ls
 8003f1e:	4b02      	ldrls	r3, [pc, #8]	; (8003f28 <USBD_LL_DeInit+0x18>)
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8003f20:	2002      	movhi	r0, #2
 8003f22:	5c18      	ldrbls	r0, [r3, r0]
}
 8003f24:	bd08      	pop	{r3, pc}
 8003f26:	bf00      	nop
 8003f28:	0800424d 	.word	0x0800424d

08003f2c <USBD_LL_Start>:
{
 8003f2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003f2e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003f32:	f7fd f8da 	bl	80010ea <HAL_PCD_Start>
  switch (hal_status)
 8003f36:	2803      	cmp	r0, #3
 8003f38:	bf96      	itet	ls
 8003f3a:	4b02      	ldrls	r3, [pc, #8]	; (8003f44 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8003f3c:	2002      	movhi	r0, #2
 8003f3e:	5c18      	ldrbls	r0, [r3, r0]
}
 8003f40:	bd08      	pop	{r3, pc}
 8003f42:	bf00      	nop
 8003f44:	0800424d 	.word	0x0800424d

08003f48 <USBD_LL_Stop>:
{
 8003f48:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003f4a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003f4e:	f7fd f8e5 	bl	800111c <HAL_PCD_Stop>
  switch (hal_status)
 8003f52:	2803      	cmp	r0, #3
 8003f54:	bf96      	itet	ls
 8003f56:	4b02      	ldrls	r3, [pc, #8]	; (8003f60 <USBD_LL_Stop+0x18>)
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003f58:	2002      	movhi	r0, #2
 8003f5a:	5c18      	ldrbls	r0, [r3, r0]
}
 8003f5c:	bd08      	pop	{r3, pc}
 8003f5e:	bf00      	nop
 8003f60:	0800424d 	.word	0x0800424d

08003f64 <USBD_LL_OpenEP>:
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003f68:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8003f6c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003f6e:	4623      	mov	r3, r4
 8003f70:	f7fd fdd6 	bl	8001b20 <HAL_PCD_EP_Open>
  switch (hal_status)
 8003f74:	2803      	cmp	r0, #3
 8003f76:	bf96      	itet	ls
 8003f78:	4b01      	ldrls	r3, [pc, #4]	; (8003f80 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003f7a:	2002      	movhi	r0, #2
 8003f7c:	5c18      	ldrbls	r0, [r3, r0]
}
 8003f7e:	bd10      	pop	{r4, pc}
 8003f80:	0800424d 	.word	0x0800424d

08003f84 <USBD_LL_CloseEP>:
{
 8003f84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003f86:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003f8a:	f7fd fdfb 	bl	8001b84 <HAL_PCD_EP_Close>
  switch (hal_status)
 8003f8e:	2803      	cmp	r0, #3
 8003f90:	bf96      	itet	ls
 8003f92:	4b02      	ldrls	r3, [pc, #8]	; (8003f9c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003f94:	2002      	movhi	r0, #2
 8003f96:	5c18      	ldrbls	r0, [r3, r0]
}
 8003f98:	bd08      	pop	{r3, pc}
 8003f9a:	bf00      	nop
 8003f9c:	0800424d 	.word	0x0800424d

08003fa0 <USBD_LL_StallEP>:
{
 8003fa0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003fa2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003fa6:	f7fd fe4f 	bl	8001c48 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8003faa:	2803      	cmp	r0, #3
 8003fac:	bf96      	itet	ls
 8003fae:	4b02      	ldrls	r3, [pc, #8]	; (8003fb8 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003fb0:	2002      	movhi	r0, #2
 8003fb2:	5c18      	ldrbls	r0, [r3, r0]
}
 8003fb4:	bd08      	pop	{r3, pc}
 8003fb6:	bf00      	nop
 8003fb8:	0800424d 	.word	0x0800424d

08003fbc <USBD_LL_ClearStallEP>:
{
 8003fbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003fbe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003fc2:	f7fd fe75 	bl	8001cb0 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8003fc6:	2803      	cmp	r0, #3
 8003fc8:	bf96      	itet	ls
 8003fca:	4b02      	ldrls	r3, [pc, #8]	; (8003fd4 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003fcc:	2002      	movhi	r0, #2
 8003fce:	5c18      	ldrbls	r0, [r3, r0]
}
 8003fd0:	bd08      	pop	{r3, pc}
 8003fd2:	bf00      	nop
 8003fd4:	0800424d 	.word	0x0800424d

08003fd8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003fd8:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8003fda:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003fde:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003fe2:	bf1b      	ittet	ne
 8003fe4:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003fe8:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003fec:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003ff0:	1889      	addne	r1, r1, r2
 8003ff2:	bf14      	ite	ne
 8003ff4:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003ff6:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8003ffa:	4770      	bx	lr

08003ffc <USBD_LL_SetUSBAddress>:
{
 8003ffc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003ffe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004002:	f7fd f8a4 	bl	800114e <HAL_PCD_SetAddress>
  switch (hal_status)
 8004006:	2803      	cmp	r0, #3
 8004008:	bf96      	itet	ls
 800400a:	4b02      	ldrls	r3, [pc, #8]	; (8004014 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800400c:	2002      	movhi	r0, #2
 800400e:	5c18      	ldrbls	r0, [r3, r0]
}
 8004010:	bd08      	pop	{r3, pc}
 8004012:	bf00      	nop
 8004014:	0800424d 	.word	0x0800424d

08004018 <USBD_LL_Transmit>:
{
 8004018:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800401a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800401e:	f7fd fdf9 	bl	8001c14 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8004022:	2803      	cmp	r0, #3
 8004024:	bf96      	itet	ls
 8004026:	4b02      	ldrls	r3, [pc, #8]	; (8004030 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004028:	2002      	movhi	r0, #2
 800402a:	5c18      	ldrbls	r0, [r3, r0]
}
 800402c:	bd08      	pop	{r3, pc}
 800402e:	bf00      	nop
 8004030:	0800424d 	.word	0x0800424d

08004034 <USBD_LL_PrepareReceive>:
{
 8004034:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004036:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800403a:	f7fd fdcc 	bl	8001bd6 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800403e:	2803      	cmp	r0, #3
 8004040:	bf96      	itet	ls
 8004042:	4b02      	ldrls	r3, [pc, #8]	; (800404c <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004044:	2002      	movhi	r0, #2
 8004046:	5c18      	ldrbls	r0, [r3, r0]
}
 8004048:	bd08      	pop	{r3, pc}
 800404a:	bf00      	nop
 800404c:	0800424d 	.word	0x0800424d

08004050 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004050:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004054:	f7fd bdd6 	b.w	8001c04 <HAL_PCD_EP_GetRxCount>

08004058 <USBD_static_malloc>:
}
 8004058:	4800      	ldr	r0, [pc, #0]	; (800405c <USBD_static_malloc+0x4>)
 800405a:	4770      	bx	lr
 800405c:	200001a0 	.word	0x200001a0

08004060 <USBD_static_free>:
}
 8004060:	4770      	bx	lr

08004062 <HAL_PCDEx_SetConnectionState>:
}
 8004062:	4770      	bx	lr

08004064 <__libc_init_array>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	2600      	movs	r6, #0
 8004068:	4d0c      	ldr	r5, [pc, #48]	; (800409c <__libc_init_array+0x38>)
 800406a:	4c0d      	ldr	r4, [pc, #52]	; (80040a0 <__libc_init_array+0x3c>)
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	42a6      	cmp	r6, r4
 8004072:	d109      	bne.n	8004088 <__libc_init_array+0x24>
 8004074:	f000 f822 	bl	80040bc <_init>
 8004078:	2600      	movs	r6, #0
 800407a:	4d0a      	ldr	r5, [pc, #40]	; (80040a4 <__libc_init_array+0x40>)
 800407c:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <__libc_init_array+0x44>)
 800407e:	1b64      	subs	r4, r4, r5
 8004080:	10a4      	asrs	r4, r4, #2
 8004082:	42a6      	cmp	r6, r4
 8004084:	d105      	bne.n	8004092 <__libc_init_array+0x2e>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	f855 3b04 	ldr.w	r3, [r5], #4
 800408c:	4798      	blx	r3
 800408e:	3601      	adds	r6, #1
 8004090:	e7ee      	b.n	8004070 <__libc_init_array+0xc>
 8004092:	f855 3b04 	ldr.w	r3, [r5], #4
 8004096:	4798      	blx	r3
 8004098:	3601      	adds	r6, #1
 800409a:	e7f2      	b.n	8004082 <__libc_init_array+0x1e>
 800409c:	08004254 	.word	0x08004254
 80040a0:	08004254 	.word	0x08004254
 80040a4:	08004254 	.word	0x08004254
 80040a8:	08004258 	.word	0x08004258

080040ac <memset>:
 80040ac:	4603      	mov	r3, r0
 80040ae:	4402      	add	r2, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <_init>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr

080040c8 <_fini>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr
